{
  "info": {
    "version": "v2.12", 
    "contact": {
      "name": "Krishna", 
      "email": "kvasudevan@infoblox.com"
    }, 
    "description": "Sample WAPI Documentation", 
    "license": {
      "url": "https://www.infoblox.com/", 
      "name": "Infoblox License"
    }, 
    "title": "Infoblox WAPI"
  }, 
  "paths": {
    "/wapi/v2.12/ftpuser": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object", 
                "properties": {
                  "username": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "permission": {
                    "type": "string", 
                    "example": "[u'RO', u'RW']"
                  }, 
                  "home_dir": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "extattrs": {
                    "type": "string", 
                    "example": "extattr"
                  }, 
                  "password": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "create_home_dir": {
                    "type": "string", 
                    "example": "bool"
                  }
                }
              }
            }
          }, 
          "required": true, 
          "description": "Enter the request body here"
        }, 
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ftpuser"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }
        ], 
        "tags": [
          "ftpuser"
        ]
      }, 
      "get": {
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ftpuser"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields", 
            "required": false, 
            "name": "_return_fields+", 
            "in": "query"
          }, 
          {
            "schema": {
              "minimum": 1, 
              "type": "integer"
            }, 
            "description": "Enter the number of results to be fetched", 
            "required": false, 
            "name": "_max_results", 
            "in": "query"
          }, 
          {
            "schema": {
              "default": 0, 
              "enum": [
                0, 
                1
              ], 
              "type": "integer"
            }, 
            "description": "Select 1 if result is required as a object", 
            "required": false, 
            "name": "_return_as_object", 
            "in": "query"
          }, 
          {
            "schema": {
              "default": 0, 
              "enum": [
                0, 
                1
              ], 
              "type": "integer"
            }, 
            "description": "Select 1 if paging is required. If SET, _max_results and _return_as_object must be entered.", 
            "required": false, 
            "name": "_paging", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the page ID for fetching next page", 
            "required": false, 
            "name": " _page_id", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the value of the field", 
            "required": false, 
            "name": "username", 
            "in": "query"
          }
        ], 
        "tags": [
          "ftpuser"
        ]
      }
    }, 
    "/wapi/v2.12/authpolicy": {
      "get": {
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authpolicy"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields", 
            "required": false, 
            "name": "_return_fields+", 
            "in": "query"
          }, 
          {
            "schema": {
              "minimum": 1, 
              "type": "integer"
            }, 
            "description": "Enter the number of results to be fetched", 
            "required": false, 
            "name": "_max_results", 
            "in": "query"
          }, 
          {
            "schema": {
              "default": 0, 
              "enum": [
                0, 
                1
              ], 
              "type": "integer"
            }, 
            "description": "Select 1 if result is required as a object", 
            "required": false, 
            "name": "_return_as_object", 
            "in": "query"
          }, 
          {
            "schema": {
              "default": 0, 
              "enum": [
                0, 
                1
              ], 
              "type": "integer"
            }, 
            "description": "Select 1 if paging is required. If SET, _max_results and _return_as_object must be entered.", 
            "required": false, 
            "name": "_paging", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the page ID for fetching next page", 
            "required": false, 
            "name": " _page_id", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the value of the field", 
            "required": false, 
            "name": "default_group", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the value of the field", 
            "required": false, 
            "name": "usage_type", 
            "in": "query"
          }
        ], 
        "tags": [
          "authpolicy"
        ]
      }
    }, 
    "/wapi/v2.12/bfdtemplate": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object", 
                "properties": {
                  "min_rx_interval": {
                    "type": "string", 
                    "example": "uint"
                  }, 
                  "authentication_key_id": {
                    "type": "string", 
                    "example": "uint"
                  }, 
                  "min_tx_interval": {
                    "type": "string", 
                    "example": "uint"
                  }, 
                  "authentication_type": {
                    "type": "string", 
                    "example": "[u'NONE', u'MD5', u'METICULOUS-MD5', u'SHA1', u'METICULOUS-SHA1']"
                  }, 
                  "detection_multiplier": {
                    "type": "string", 
                    "example": "uint"
                  }, 
                  "authentication_key": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "name": {
                    "type": "string", 
                    "example": "string"
                  }
                }
              }
            }
          }, 
          "required": true, 
          "description": "Enter the request body here"
        }, 
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bfdtemplate"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }
        ], 
        "tags": [
          "bfdtemplate"
        ]
      }, 
      "get": {
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bfdtemplate"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields", 
            "required": false, 
            "name": "_return_fields+", 
            "in": "query"
          }, 
          {
            "schema": {
              "minimum": 1, 
              "type": "integer"
            }, 
            "description": "Enter the number of results to be fetched", 
            "required": false, 
            "name": "_max_results", 
            "in": "query"
          }, 
          {
            "schema": {
              "default": 0, 
              "enum": [
                0, 
                1
              ], 
              "type": "integer"
            }, 
            "description": "Select 1 if result is required as a object", 
            "required": false, 
            "name": "_return_as_object", 
            "in": "query"
          }, 
          {
            "schema": {
              "default": 0, 
              "enum": [
                0, 
                1
              ], 
              "type": "integer"
            }, 
            "description": "Select 1 if paging is required. If SET, _max_results and _return_as_object must be entered.", 
            "required": false, 
            "name": "_paging", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the page ID for fetching next page", 
            "required": false, 
            "name": " _page_id", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the value of the field", 
            "required": false, 
            "name": "name", 
            "in": "query"
          }
        ], 
        "tags": [
          "bfdtemplate"
        ]
      }
    }, 
    "/wapi/v2.12/localuser:authservice/{localuser:authservice_reference}": {
      "get": {
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/localuser_authservice"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string", 
              "example": "resourceID:resourceName"
            }, 
            "description": "Enter the reference for localuser:authservice", 
            "required": true, 
            "name": "localuser:authservice_reference", 
            "in": "path"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields", 
            "required": false, 
            "name": "_return_fields+", 
            "in": "query"
          }, 
          {
            "schema": {
              "default": 0, 
              "enum": [
                0, 
                1
              ], 
              "type": "integer"
            }, 
            "description": "Select 1 if result is required as a object", 
            "required": false, 
            "name": "_return_as_object", 
            "in": "query"
          }
        ], 
        "tags": [
          "localuser:authservice"
        ]
      }
    }, 
    "/wapi/v2.12/ldap_auth_service/{ldap_auth_service_reference}": {
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ldap_auth_service"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string", 
              "example": "resourceID:resourceName"
            }, 
            "description": "Enter the reference for ldap_auth_service", 
            "required": true, 
            "name": "ldap_auth_service_reference", 
            "in": "path"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }
        ], 
        "tags": [
          "ldap_auth_service"
        ], 
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object", 
                "properties": {
                  "comment": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "retries": {
                    "type": "string", 
                    "example": "uint"
                  }, 
                  "name": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "search_scope": {
                    "type": "string", 
                    "example": "[u'BASE', u'ONELEVEL', u'SUBTREE']"
                  }, 
                  "ldap_group_attribute": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "ea_mapping": {
                    "type": "string", 
                    "example": "[{u'mapped_ea': u'string', u'name': u'string'}]"
                  }, 
                  "ldap_user_attribute": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "servers": {
                    "type": "string", 
                    "example": "[{u'comment': u'string', u'version': u'enum', u'use_mgmt_port': u'bool', u'encryption': u'enum', u'address': u'string', u'authentication_type': u'enum', u'disable': u'bool', u'bind_password': u'string', u'base_dn': u'string', u'bind_user_dn': u'string', u'port': u'uint'}]"
                  }, 
                  "disable": {
                    "type": "string", 
                    "example": "bool"
                  }, 
                  "mode": {
                    "type": "string", 
                    "example": "[u'ORDERED_LIST', u'ROUND_ROBIN']"
                  }, 
                  "timeout": {
                    "type": "string", 
                    "example": "uint"
                  }, 
                  "recovery_interval": {
                    "type": "string", 
                    "example": "uint"
                  }, 
                  "ldap_group_authentication_type": {
                    "type": "string", 
                    "example": "[u'GROUP_ATTRIBUTE', u'POSIX_GROUP']"
                  }
                }
              }
            }
          }, 
          "required": true, 
          "description": "Enter the request body here"
        }, 
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "description": "Update the ldap_auth_service resource"
      }, 
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object", 
                  "properties": {
                    "check_ldap_server_settings": {
                      "type": "string", 
                      "example": {
                        "ldap_authservice": "string", 
                        "ldap_server": "ldap_server", 
                        "timeout": "uint"
                      }
                    }
                  }
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string", 
              "example": "resourceID:resourceName"
            }, 
            "description": "Enter the reference for ldap_auth_service", 
            "required": true, 
            "name": "ldap_auth_service_reference", 
            "in": "path"
          }, 
          {
            "schema": {
              "enum": [
                "check_ldap_server_settings"
              ], 
              "type": "string"
            }, 
            "description": "Select the function", 
            "required": true, 
            "name": "_function", 
            "in": "query"
          }
        ], 
        "tags": [
          "ldap_auth_service"
        ], 
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object", 
                "properties": {}
              }
            }
          }, 
          "required": true, 
          "description": "Enter the request body here"
        }, 
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "description": "Function calls"
      }, 
      "delete": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object", 
                  "properties": {
                    "$ref": {
                      "type": "string", 
                      "description": "Reference of the deleted string"
                    }
                  }
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "description": "Delete the ldap_auth_service resource", 
        "parameters": [
          {
            "schema": {
              "type": "string", 
              "example": "resourceID:resourceName"
            }, 
            "description": "Enter the reference for ldap_auth_service", 
            "required": true, 
            "name": "ldap_auth_service_reference", 
            "in": "path"
          }
        ], 
        "tags": [
          "ldap_auth_service"
        ]
      }, 
      "get": {
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ldap_auth_service"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string", 
              "example": "resourceID:resourceName"
            }, 
            "description": "Enter the reference for ldap_auth_service", 
            "required": true, 
            "name": "ldap_auth_service_reference", 
            "in": "path"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields", 
            "required": false, 
            "name": "_return_fields+", 
            "in": "query"
          }, 
          {
            "schema": {
              "default": 0, 
              "enum": [
                0, 
                1
              ], 
              "type": "integer"
            }, 
            "description": "Select 1 if result is required as a object", 
            "required": false, 
            "name": "_return_as_object", 
            "in": "query"
          }
        ], 
        "tags": [
          "ldap_auth_service"
        ]
      }
    }, 
    "/wapi/v2.12/ad_auth_service": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object", 
                "properties": {
                  "comment": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "name": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "additional_search_paths": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "domain_controllers": {
                    "type": "string", 
                    "example": "[{u'comment': u'string', u'mgmt_port': u'bool', u'encryption': u'enum', u'auth_port': u'uint', u'disabled': u'bool', u'fqdn_or_ip': u'string', u'use_mgmt_port': u'bool'}]"
                  }, 
                  "timeout": {
                    "type": "string", 
                    "example": "uint"
                  }, 
                  "disabled": {
                    "type": "string", 
                    "example": "bool"
                  }, 
                  "disable_default_search_path": {
                    "type": "string", 
                    "example": "bool"
                  }, 
                  "nested_group_querying": {
                    "type": "string", 
                    "example": "bool"
                  }, 
                  "ad_domain": {
                    "type": "string", 
                    "example": "string"
                  }
                }
              }
            }
          }, 
          "required": true, 
          "description": "Enter the request body here"
        }, 
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ad_auth_service"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }
        ], 
        "tags": [
          "ad_auth_service"
        ]
      }, 
      "get": {
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ad_auth_service"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields", 
            "required": false, 
            "name": "_return_fields+", 
            "in": "query"
          }, 
          {
            "schema": {
              "minimum": 1, 
              "type": "integer"
            }, 
            "description": "Enter the number of results to be fetched", 
            "required": false, 
            "name": "_max_results", 
            "in": "query"
          }, 
          {
            "schema": {
              "default": 0, 
              "enum": [
                0, 
                1
              ], 
              "type": "integer"
            }, 
            "description": "Select 1 if result is required as a object", 
            "required": false, 
            "name": "_return_as_object", 
            "in": "query"
          }, 
          {
            "schema": {
              "default": 0, 
              "enum": [
                0, 
                1
              ], 
              "type": "integer"
            }, 
            "description": "Select 1 if paging is required. If SET, _max_results and _return_as_object must be entered.", 
            "required": false, 
            "name": "_paging", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the page ID for fetching next page", 
            "required": false, 
            "name": " _page_id", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the value of the field", 
            "required": false, 
            "name": "ad_domain", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the value of the field", 
            "required": false, 
            "name": "comment", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the value of the field", 
            "required": false, 
            "name": "name", 
            "in": "query"
          }
        ], 
        "tags": [
          "ad_auth_service"
        ]
      }
    }, 
    "/wapi/v2.12/permission/{permission_reference}": {
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/permission"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string", 
              "example": "resourceID:resourceName"
            }, 
            "description": "Enter the reference for permission", 
            "required": true, 
            "name": "permission_reference", 
            "in": "path"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }
        ], 
        "tags": [
          "permission"
        ], 
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object", 
                "properties": {
                  "role": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "object": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "group": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "resource_type": {
                    "type": "string", 
                    "example": "[u'SUPER_HOST', u'VLAN_VIEW', u'Unknown', u'IDNS_MONITOR', u'AAAA', u'SCHEDULE_TASK', u'GRID_DHCP_PROPERTIES', u'IDNS_GEO_IP', u'BULKHOST', u'DHCP_FINGERPRINT', u'IDNS_LBDN_RECORD', u'SG_IPV6_NETWORK', u'MSSERVER', u'VLAN_OBJECTS', u'IDNS_LBDN', u'GRID_AAA_PROPERTIES', u'NAPTR', u'SUB_GRID', u'IPV6_NETWORK_TEMPLATE', u'IMC_PROPERTIES', u'FIXED_ADDRESS_TEMPLATE', u'NETWORK_DISCOVERY', u'SHARED_NETWORK', u'IDNS_CERTIFICATE', u'DATACOLLECTOR_CLUSTER', u'FIREEYE_PUBLISH_ALERT', u'CLUSTER', u'OPTION_SPACE', u'RESTART_SERVICE', u'SHARED_SRV', u'IPV6_DHCP_LEASE_HISTORY', u'VIEW', u'IPV6_RANGE', u'CNAME', u'IPV6_NETWORK', u'SHARED_AAAA', u'DASHBOARD_TASK', u'FIXED_ADDRESS', u'NETWORK_CONTAINER', u'SG_IPV4_NETWORK', u'DNAME', u'IPV6_SHARED_NETWORK', u'PTR', u'GRID_ANALYTICS_PROPERTIES', u'TLSA', u'CA_CERTIFICATE', u'RANGE', u'RULESET', u'AAA_EXTERNAL_SERVICE', u'HSM_GROUP', u'HOST_ADDRESS', u'IDNS_TOPOLOGY', u'SHARED_A', u'DELETED_OBJS_INFO_TRACKING', u'SHARED_TXT', u'DHCP_LEASE_HISTORY', u'MEMBER_DHCP_PROPERTIES', u'SUB_GRID_NETWORK_VIEW_PARENT', u'IMC_SITE', u'KERBEROS_KEY', u'MEMBER_SECURITY_PROPERTIES', u'IPV6_HOST_ADDRESS', u'IMC_AVP', u'MEMBER', u'IPV6_NETWORK_CONTAINER', u'VLAN_RANGE', u'RESPONSE_POLICY_ZONE', u'FILE_DIST_DIRECTORY', u'RESPONSE_POLICY_RULE', u'MS_SUPERSCOPE', u'HOST', u'SRV', u'IDNS_POOL', u'PORT_CONTROL', u'TENANT', u'IDNS_SERVER', u'OCSP_SERVICE', u'MEMBER_DNS_PROPERTIES', u'NETWORK_TEMPLATE', u'TEMPLATE', u'SHARED_RECORD_GROUP', u'CSV_IMPORT_TASK', u'IPV6_TEMPLATE', u'NETWORK', u'NETWORK_VIEW', u'IPV6_FIXED_ADDRESS', u'GRID_REPORTING_PROPERTIES', u'CAA', u'GRID_DNS_PROPERTIES', u'IPV6_FIXED_ADDRESS_TEMPLATE', u'REPORTING_DASHBOARD', u'ROAMING_HOST', u'ADD_A_RR_WITH_EMPTY_HOSTNAME', u'DHCP_MAC_FILTER', u'GRID_FILE_DIST_PROPERTIES', u'TXT', u'IPV6_RANGE_TEMPLATE', u'RANGE_TEMPLATE', u'DEFINED_ACL', u'A', u'SHARED_CNAME', u'BFD_TEMPLATE', u'GRID_SECURITY_PROPERTIES', u'MS_ADSITES_DOMAIN', u'SAML_AUTH_SERVICE', u'SHARED_MX', u'ALIAS', u'DEVICE', u'SG_NETWORK_VIEW', u'DNS64_SYNTHESIS_GROUP', u'ZONE', u'REPORTING_SEARCH', u'RECLAMATION', u'MX', u'MEMBER_CLOUD', u'MEMBER_ANALYTICS_PROPERTIES', u'RESTORABLE_OPERATION', u'MEMBER_FILE_DIST_PROPERTIES']"
                  }, 
                  "permission": {
                    "type": "string", 
                    "example": "[u'DENY', u'READ', u'WRITE']"
                  }
                }
              }
            }
          }, 
          "required": true, 
          "description": "Enter the request body here"
        }, 
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "description": "Update the permission resource"
      }, 
      "delete": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object", 
                  "properties": {
                    "$ref": {
                      "type": "string", 
                      "description": "Reference of the deleted string"
                    }
                  }
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "description": "Delete the permission resource", 
        "parameters": [
          {
            "schema": {
              "type": "string", 
              "example": "resourceID:resourceName"
            }, 
            "description": "Enter the reference for permission", 
            "required": true, 
            "name": "permission_reference", 
            "in": "path"
          }
        ], 
        "tags": [
          "permission"
        ]
      }, 
      "get": {
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/permission"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string", 
              "example": "resourceID:resourceName"
            }, 
            "description": "Enter the reference for permission", 
            "required": true, 
            "name": "permission_reference", 
            "in": "path"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields", 
            "required": false, 
            "name": "_return_fields+", 
            "in": "query"
          }, 
          {
            "schema": {
              "default": 0, 
              "enum": [
                0, 
                1
              ], 
              "type": "integer"
            }, 
            "description": "Select 1 if result is required as a object", 
            "required": false, 
            "name": "_return_as_object", 
            "in": "query"
          }
        ], 
        "tags": [
          "permission"
        ]
      }
    }, 
    "/wapi/v2.12/adminrole/{adminrole_reference}": {
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/adminrole"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string", 
              "example": "resourceID:resourceName"
            }, 
            "description": "Enter the reference for adminrole", 
            "required": true, 
            "name": "adminrole_reference", 
            "in": "path"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }
        ], 
        "tags": [
          "adminrole"
        ], 
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object", 
                "properties": {
                  "comment": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "disable": {
                    "type": "string", 
                    "example": "bool"
                  }, 
                  "name": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "extattrs": {
                    "type": "string", 
                    "example": "extattr"
                  }
                }
              }
            }
          }, 
          "required": true, 
          "description": "Enter the request body here"
        }, 
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "description": "Update the adminrole resource"
      }, 
      "delete": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object", 
                  "properties": {
                    "$ref": {
                      "type": "string", 
                      "description": "Reference of the deleted string"
                    }
                  }
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "description": "Delete the adminrole resource", 
        "parameters": [
          {
            "schema": {
              "type": "string", 
              "example": "resourceID:resourceName"
            }, 
            "description": "Enter the reference for adminrole", 
            "required": true, 
            "name": "adminrole_reference", 
            "in": "path"
          }
        ], 
        "tags": [
          "adminrole"
        ]
      }, 
      "get": {
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/adminrole"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string", 
              "example": "resourceID:resourceName"
            }, 
            "description": "Enter the reference for adminrole", 
            "required": true, 
            "name": "adminrole_reference", 
            "in": "path"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields", 
            "required": false, 
            "name": "_return_fields+", 
            "in": "query"
          }, 
          {
            "schema": {
              "default": 0, 
              "enum": [
                0, 
                1
              ], 
              "type": "integer"
            }, 
            "description": "Select 1 if result is required as a object", 
            "required": false, 
            "name": "_return_as_object", 
            "in": "query"
          }
        ], 
        "tags": [
          "adminrole"
        ]
      }
    }, 
    "/wapi/v2.12/networkuser/{networkuser_reference}": {
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/networkuser"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string", 
              "example": "resourceID:resourceName"
            }, 
            "description": "Enter the reference for networkuser", 
            "required": true, 
            "name": "networkuser_reference", 
            "in": "path"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }
        ], 
        "tags": [
          "networkuser"
        ], 
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object", 
                "properties": {
                  "name": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "network_view": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "domainname": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "first_seen_time": {
                    "type": "string", 
                    "example": "timestamp"
                  }, 
                  "last_seen_time": {
                    "type": "string", 
                    "example": "timestamp"
                  }, 
                  "last_updated_time": {
                    "type": "string", 
                    "example": "timestamp"
                  }, 
                  "logout_time": {
                    "type": "string", 
                    "example": "timestamp"
                  }, 
                  "logon_id": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "address": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "guid": {
                    "type": "string", 
                    "example": "string"
                  }
                }
              }
            }
          }, 
          "required": true, 
          "description": "Enter the request body here"
        }, 
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "description": "Update the networkuser resource"
      }, 
      "delete": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object", 
                  "properties": {
                    "$ref": {
                      "type": "string", 
                      "description": "Reference of the deleted string"
                    }
                  }
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "description": "Delete the networkuser resource", 
        "parameters": [
          {
            "schema": {
              "type": "string", 
              "example": "resourceID:resourceName"
            }, 
            "description": "Enter the reference for networkuser", 
            "required": true, 
            "name": "networkuser_reference", 
            "in": "path"
          }
        ], 
        "tags": [
          "networkuser"
        ]
      }, 
      "get": {
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/networkuser"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string", 
              "example": "resourceID:resourceName"
            }, 
            "description": "Enter the reference for networkuser", 
            "required": true, 
            "name": "networkuser_reference", 
            "in": "path"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields", 
            "required": false, 
            "name": "_return_fields+", 
            "in": "query"
          }, 
          {
            "schema": {
              "default": 0, 
              "enum": [
                0, 
                1
              ], 
              "type": "integer"
            }, 
            "description": "Select 1 if result is required as a object", 
            "required": false, 
            "name": "_return_as_object", 
            "in": "query"
          }
        ], 
        "tags": [
          "networkuser"
        ]
      }
    }, 
    "/wapi/v2.12/radius:authservice/{radius:authservice_reference}": {
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/radius_authservice"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string", 
              "example": "resourceID:resourceName"
            }, 
            "description": "Enter the reference for radius:authservice", 
            "required": true, 
            "name": "radius:authservice_reference", 
            "in": "path"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }
        ], 
        "tags": [
          "radius:authservice"
        ], 
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object", 
                "properties": {
                  "comment": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "acct_retries": {
                    "type": "string", 
                    "example": "uint"
                  }, 
                  "name": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "auth_timeout": {
                    "type": "string", 
                    "example": "uint"
                  }, 
                  "mode": {
                    "type": "string", 
                    "example": "[u'HUNT_GROUP', u'ROUND_ROBIN']"
                  }, 
                  "enable_cache": {
                    "type": "string", 
                    "example": "bool"
                  }, 
                  "disable": {
                    "type": "string", 
                    "example": "bool"
                  }, 
                  "acct_timeout": {
                    "type": "string", 
                    "example": "uint"
                  }, 
                  "cache_ttl": {
                    "type": "string", 
                    "example": "uint"
                  }, 
                  "servers": {
                    "type": "string", 
                    "example": "[{u'auth_type': u'enum', u'comment': u'string', u'shared_secret': u'string', u'auth_port': u'uint', u'use_accounting': u'bool', u'disable': u'bool', u'use_mgmt_port': u'bool', u'address': u'string', u'acct_port': u'uint'}]"
                  }, 
                  "recovery_interval": {
                    "type": "string", 
                    "example": "uint"
                  }, 
                  "auth_retries": {
                    "type": "string", 
                    "example": "uint"
                  }
                }
              }
            }
          }, 
          "required": true, 
          "description": "Enter the request body here"
        }, 
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "description": "Update the radius:authservice resource"
      }, 
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object", 
                  "properties": {
                    "check_radius_server_settings": {
                      "type": "string", 
                      "example": {
                        "radius_authservice": "string", 
                        "radius_server": "radius:server", 
                        "auth_timeout": "uint", 
                        "acct_timeout": "uint"
                      }
                    }
                  }
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string", 
              "example": "resourceID:resourceName"
            }, 
            "description": "Enter the reference for radius:authservice", 
            "required": true, 
            "name": "radius:authservice_reference", 
            "in": "path"
          }, 
          {
            "schema": {
              "enum": [
                "check_radius_server_settings"
              ], 
              "type": "string"
            }, 
            "description": "Select the function", 
            "required": true, 
            "name": "_function", 
            "in": "query"
          }
        ], 
        "tags": [
          "radius:authservice"
        ], 
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object", 
                "properties": {}
              }
            }
          }, 
          "required": true, 
          "description": "Enter the request body here"
        }, 
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "description": "Function calls"
      }, 
      "delete": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object", 
                  "properties": {
                    "$ref": {
                      "type": "string", 
                      "description": "Reference of the deleted string"
                    }
                  }
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "description": "Delete the radius:authservice resource", 
        "parameters": [
          {
            "schema": {
              "type": "string", 
              "example": "resourceID:resourceName"
            }, 
            "description": "Enter the reference for radius:authservice", 
            "required": true, 
            "name": "radius:authservice_reference", 
            "in": "path"
          }
        ], 
        "tags": [
          "radius:authservice"
        ]
      }, 
      "get": {
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/radius_authservice"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string", 
              "example": "resourceID:resourceName"
            }, 
            "description": "Enter the reference for radius:authservice", 
            "required": true, 
            "name": "radius:authservice_reference", 
            "in": "path"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields", 
            "required": false, 
            "name": "_return_fields+", 
            "in": "query"
          }, 
          {
            "schema": {
              "default": 0, 
              "enum": [
                0, 
                1
              ], 
              "type": "integer"
            }, 
            "description": "Select 1 if result is required as a object", 
            "required": false, 
            "name": "_return_as_object", 
            "in": "query"
          }
        ], 
        "tags": [
          "radius:authservice"
        ]
      }
    }, 
    "/wapi/v2.12/snmpuser": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object", 
                "properties": {
                  "comment": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "privacy_password": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "authentication_protocol": {
                    "type": "string", 
                    "example": "[u'NONE', u'MD5', u'SHA']"
                  }, 
                  "name": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "disable": {
                    "type": "string", 
                    "example": "bool"
                  }, 
                  "privacy_protocol": {
                    "type": "string", 
                    "example": "[u'NONE', u'DES', u'AES']"
                  }, 
                  "authentication_password": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "extattrs": {
                    "type": "string", 
                    "example": "extattr"
                  }
                }
              }
            }
          }, 
          "required": true, 
          "description": "Enter the request body here"
        }, 
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/snmpuser"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }
        ], 
        "tags": [
          "snmpuser"
        ]
      }, 
      "get": {
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/snmpuser"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields", 
            "required": false, 
            "name": "_return_fields+", 
            "in": "query"
          }, 
          {
            "schema": {
              "minimum": 1, 
              "type": "integer"
            }, 
            "description": "Enter the number of results to be fetched", 
            "required": false, 
            "name": "_max_results", 
            "in": "query"
          }, 
          {
            "schema": {
              "default": 0, 
              "enum": [
                0, 
                1
              ], 
              "type": "integer"
            }, 
            "description": "Select 1 if result is required as a object", 
            "required": false, 
            "name": "_return_as_object", 
            "in": "query"
          }, 
          {
            "schema": {
              "default": 0, 
              "enum": [
                0, 
                1
              ], 
              "type": "integer"
            }, 
            "description": "Select 1 if paging is required. If SET, _max_results and _return_as_object must be entered.", 
            "required": false, 
            "name": "_paging", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the page ID for fetching next page", 
            "required": false, 
            "name": " _page_id", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the value of the field", 
            "required": false, 
            "name": "comment", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the value of the field", 
            "required": false, 
            "name": "name", 
            "in": "query"
          }
        ], 
        "tags": [
          "snmpuser"
        ]
      }
    }, 
    "/wapi/v2.12/approvalworkflow": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object", 
                "properties": {
                  "enable_rejected_notify": {
                    "type": "string", 
                    "example": "bool"
                  }, 
                  "enable_notify_user": {
                    "type": "string", 
                    "example": "bool"
                  }, 
                  "rejected_notify_to": {
                    "type": "string", 
                    "example": "[u'SUBMITTER', u'APPROVER', u'BOTH']"
                  }, 
                  "failed_notify_to": {
                    "type": "string", 
                    "example": "[u'SUBMITTER', u'APPROVER', u'BOTH']"
                  }, 
                  "enable_approval_notify": {
                    "type": "string", 
                    "example": "bool"
                  }, 
                  "succeeded_notify_to": {
                    "type": "string", 
                    "example": "[u'SUBMITTER', u'APPROVER', u'BOTH']"
                  }, 
                  "approved_notify_to": {
                    "type": "string", 
                    "example": "[u'SUBMITTER', u'APPROVER', u'BOTH']"
                  }, 
                  "enable_rescheduled_notify": {
                    "type": "string", 
                    "example": "bool"
                  }, 
                  "submitter_group": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "approval_group": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "enable_notify_group": {
                    "type": "string", 
                    "example": "bool"
                  }, 
                  "enable_approved_notify": {
                    "type": "string", 
                    "example": "bool"
                  }, 
                  "enable_succeeded_notify": {
                    "type": "string", 
                    "example": "bool"
                  }, 
                  "extattrs": {
                    "type": "string", 
                    "example": "extattr"
                  }, 
                  "ticket_number": {
                    "type": "string", 
                    "example": "[u'UNUSED', u'OPTIONAL', u'REQUIRED']"
                  }, 
                  "submitter_comment": {
                    "type": "string", 
                    "example": "[u'UNUSED', u'OPTIONAL', u'REQUIRED']"
                  }, 
                  "approval_notify_to": {
                    "type": "string", 
                    "example": "[u'SUBMITTER', u'APPROVER', u'BOTH']"
                  }, 
                  "enable_failed_notify": {
                    "type": "string", 
                    "example": "bool"
                  }, 
                  "rescheduled_notify_to": {
                    "type": "string", 
                    "example": "[u'SUBMITTER', u'APPROVER', u'BOTH']"
                  }, 
                  "approver_comment": {
                    "type": "string", 
                    "example": "[u'UNUSED', u'OPTIONAL', u'REQUIRED']"
                  }
                }
              }
            }
          }, 
          "required": true, 
          "description": "Enter the request body here"
        }, 
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/approvalworkflow"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }
        ], 
        "tags": [
          "approvalworkflow"
        ]
      }, 
      "get": {
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/approvalworkflow"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields", 
            "required": false, 
            "name": "_return_fields+", 
            "in": "query"
          }, 
          {
            "schema": {
              "minimum": 1, 
              "type": "integer"
            }, 
            "description": "Enter the number of results to be fetched", 
            "required": false, 
            "name": "_max_results", 
            "in": "query"
          }, 
          {
            "schema": {
              "default": 0, 
              "enum": [
                0, 
                1
              ], 
              "type": "integer"
            }, 
            "description": "Select 1 if result is required as a object", 
            "required": false, 
            "name": "_return_as_object", 
            "in": "query"
          }, 
          {
            "schema": {
              "default": 0, 
              "enum": [
                0, 
                1
              ], 
              "type": "integer"
            }, 
            "description": "Select 1 if paging is required. If SET, _max_results and _return_as_object must be entered.", 
            "required": false, 
            "name": "_paging", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the page ID for fetching next page", 
            "required": false, 
            "name": " _page_id", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the value of the field", 
            "required": false, 
            "name": "approval_group", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the value of the field", 
            "required": false, 
            "name": "submitter_group", 
            "in": "query"
          }
        ], 
        "tags": [
          "approvalworkflow"
        ]
      }
    }, 
    "/wapi/v2.12/authpolicy/{authpolicy_reference}": {
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authpolicy"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string", 
              "example": "resourceID:resourceName"
            }, 
            "description": "Enter the reference for authpolicy", 
            "required": true, 
            "name": "authpolicy_reference", 
            "in": "path"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }
        ], 
        "tags": [
          "authpolicy"
        ], 
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object", 
                "properties": {
                  "auth_services": {
                    "type": "string", 
                    "example": "localuser:authservice"
                  }, 
                  "usage_type": {
                    "type": "string", 
                    "example": "[u'FULL', u'AUTH_ONLY']"
                  }, 
                  "admin_groups": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "default_group": {
                    "type": "string", 
                    "example": "string"
                  }
                }
              }
            }
          }, 
          "required": true, 
          "description": "Enter the request body here"
        }, 
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "description": "Update the authpolicy resource"
      }, 
      "get": {
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authpolicy"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string", 
              "example": "resourceID:resourceName"
            }, 
            "description": "Enter the reference for authpolicy", 
            "required": true, 
            "name": "authpolicy_reference", 
            "in": "path"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields", 
            "required": false, 
            "name": "_return_fields+", 
            "in": "query"
          }, 
          {
            "schema": {
              "default": 0, 
              "enum": [
                0, 
                1
              ], 
              "type": "integer"
            }, 
            "description": "Select 1 if result is required as a object", 
            "required": false, 
            "name": "_return_as_object", 
            "in": "query"
          }
        ], 
        "tags": [
          "authpolicy"
        ]
      }
    }, 
    "/wapi/v2.12/tacacsplus:authservice": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object", 
                "properties": {
                  "comment": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "acct_retries": {
                    "type": "string", 
                    "example": "uint"
                  }, 
                  "name": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "auth_timeout": {
                    "type": "string", 
                    "example": "uint"
                  }, 
                  "servers": {
                    "type": "string", 
                    "example": "[{u'auth_type': u'enum', u'comment': u'string', u'address': u'string', u'use_accounting': u'bool', u'disable': u'bool', u'use_mgmt_port': u'bool', u'shared_secret': u'string', u'port': u'uint'}]"
                  }, 
                  "disable": {
                    "type": "string", 
                    "example": "bool"
                  }, 
                  "acct_timeout": {
                    "type": "string", 
                    "example": "uint"
                  }, 
                  "auth_retries": {
                    "type": "string", 
                    "example": "uint"
                  }
                }
              }
            }
          }, 
          "required": true, 
          "description": "Enter the request body here"
        }, 
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tacacsplus_authservice"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }
        ], 
        "tags": [
          "tacacsplus:authservice"
        ]
      }, 
      "get": {
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tacacsplus_authservice"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields", 
            "required": false, 
            "name": "_return_fields+", 
            "in": "query"
          }, 
          {
            "schema": {
              "minimum": 1, 
              "type": "integer"
            }, 
            "description": "Enter the number of results to be fetched", 
            "required": false, 
            "name": "_max_results", 
            "in": "query"
          }, 
          {
            "schema": {
              "default": 0, 
              "enum": [
                0, 
                1
              ], 
              "type": "integer"
            }, 
            "description": "Select 1 if result is required as a object", 
            "required": false, 
            "name": "_return_as_object", 
            "in": "query"
          }, 
          {
            "schema": {
              "default": 0, 
              "enum": [
                0, 
                1
              ], 
              "type": "integer"
            }, 
            "description": "Select 1 if paging is required. If SET, _max_results and _return_as_object must be entered.", 
            "required": false, 
            "name": "_paging", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the page ID for fetching next page", 
            "required": false, 
            "name": " _page_id", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the value of the field", 
            "required": false, 
            "name": "comment", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the value of the field", 
            "required": false, 
            "name": "name", 
            "in": "query"
          }
        ], 
        "tags": [
          "tacacsplus:authservice"
        ]
      }
    }, 
    "/wapi/v2.12/admingroup": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object", 
                "properties": {
                  "comment": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "superuser": {
                    "type": "string", 
                    "example": "bool"
                  }, 
                  "admin_set_commands": {
                    "type": "string", 
                    "example": "admingroup:adminsetcommands"
                  }, 
                  "docker_show_commands": {
                    "type": "string", 
                    "example": "admingroup:dockershowcommands"
                  }, 
                  "inactivity_lockout_setting": {
                    "type": "string", 
                    "example": "setting:inactivelockout"
                  }, 
                  "cloud_set_commands": {
                    "type": "string", 
                    "example": "admingroup:cloudsetcommands"
                  }, 
                  "disable_concurrent_login": {
                    "type": "string", 
                    "example": "bool"
                  }, 
                  "grid_show_commands": {
                    "type": "string", 
                    "example": "admingroup:gridshowcommands"
                  }, 
                  "dns_show_commands": {
                    "type": "string", 
                    "example": "admingroup:dnsshowcommands"
                  }, 
                  "licensing_set_commands": {
                    "type": "string", 
                    "example": "admingroup:licensingsetcommands"
                  }, 
                  "use_disable_concurrent_login": {
                    "type": "string", 
                    "example": "bool"
                  }, 
                  "database_show_commands": {
                    "type": "string", 
                    "example": "admingroup:databaseshowcommands"
                  }, 
                  "use_account_inactivity_lockout_enable": {
                    "type": "string", 
                    "example": "bool"
                  }, 
                  "licensing_show_commands": {
                    "type": "string", 
                    "example": "admingroup:licensingshowcommands"
                  }, 
                  "use_password_setting": {
                    "type": "string", 
                    "example": "bool"
                  }, 
                  "admin_show_commands": {
                    "type": "string", 
                    "example": "admingroup:adminshowcommands"
                  }, 
                  "use_lockout_setting": {
                    "type": "string", 
                    "example": "bool"
                  }, 
                  "trouble_shooting_toplevel_commands": {
                    "type": "string", 
                    "example": "admingroup:troubleshootingtoplevelcommands"
                  }, 
                  "lockout_setting": {
                    "type": "string", 
                    "example": "admingroup:lockoutsetting"
                  }, 
                  "access_method": {
                    "type": "string", 
                    "example": "[u'GUI', u'API', u'TAXII', u'CLOUD_API', u'CLI']"
                  }, 
                  "dhcp_show_commands": {
                    "type": "string", 
                    "example": "admingroup:dhcpshowcommands"
                  }, 
                  "email_addresses": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "security_set_commands": {
                    "type": "string", 
                    "example": "admingroup:securitysetcommands"
                  }, 
                  "dns_toplevel_commands": {
                    "type": "string", 
                    "example": "admingroup:dnstoplevelcommands"
                  }, 
                  "admin_toplevel_commands": {
                    "type": "string", 
                    "example": "admingroup:admintoplevelcommands"
                  }, 
                  "password_setting": {
                    "type": "string", 
                    "example": "admingroup:passwordsetting"
                  }, 
                  "extattrs": {
                    "type": "string", 
                    "example": "extattr"
                  }, 
                  "saml_setting": {
                    "type": "string", 
                    "example": "admingroup:samlsetting"
                  }, 
                  "networking_show_commands": {
                    "type": "string", 
                    "example": "admingroup:networkingshowcommands"
                  }, 
                  "disable": {
                    "type": "string", 
                    "example": "bool"
                  }, 
                  "security_show_commands": {
                    "type": "string", 
                    "example": "admingroup:securityshowcommands"
                  }, 
                  "grid_set_commands": {
                    "type": "string", 
                    "example": "admingroup:gridsetcommands"
                  }, 
                  "machine_control_toplevel_commands": {
                    "type": "string", 
                    "example": "admingroup:machinecontroltoplevelcommands"
                  }, 
                  "name": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "roles": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "user_access": {
                    "type": "string", 
                    "example": "[{u'permission': u'enum', u'address': u'string'}]"
                  }, 
                  "networking_set_commands": {
                    "type": "string", 
                    "example": "admingroup:networkingsetcommands"
                  }, 
                  "dhcp_set_commands": {
                    "type": "string", 
                    "example": "admingroup:dhcpsetcommands"
                  }, 
                  "docker_set_commands": {
                    "type": "string", 
                    "example": "admingroup:dockersetcommands"
                  }, 
                  "enable_restricted_user_access": {
                    "type": "string", 
                    "example": "bool"
                  }, 
                  "database_set_commands": {
                    "type": "string", 
                    "example": "admingroup:databasesetcommands"
                  }, 
                  "dns_set_commands": {
                    "type": "string", 
                    "example": "admingroup:dnssetcommands"
                  }
                }
              }
            }
          }, 
          "required": true, 
          "description": "Enter the request body here"
        }, 
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/admingroup"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }
        ], 
        "tags": [
          "admingroup"
        ]
      }, 
      "get": {
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/admingroup"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields", 
            "required": false, 
            "name": "_return_fields+", 
            "in": "query"
          }, 
          {
            "schema": {
              "minimum": 1, 
              "type": "integer"
            }, 
            "description": "Enter the number of results to be fetched", 
            "required": false, 
            "name": "_max_results", 
            "in": "query"
          }, 
          {
            "schema": {
              "default": 0, 
              "enum": [
                0, 
                1
              ], 
              "type": "integer"
            }, 
            "description": "Select 1 if result is required as a object", 
            "required": false, 
            "name": "_return_as_object", 
            "in": "query"
          }, 
          {
            "schema": {
              "default": 0, 
              "enum": [
                0, 
                1
              ], 
              "type": "integer"
            }, 
            "description": "Select 1 if paging is required. If SET, _max_results and _return_as_object must be entered.", 
            "required": false, 
            "name": "_paging", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the page ID for fetching next page", 
            "required": false, 
            "name": " _page_id", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the value of the field", 
            "required": false, 
            "name": "comment", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the value of the field", 
            "required": false, 
            "name": "name", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the value of the field", 
            "required": false, 
            "name": "roles", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the value of the field", 
            "required": false, 
            "name": "superuser", 
            "in": "query"
          }
        ], 
        "tags": [
          "admingroup"
        ]
      }
    }, 
    "/wapi/v2.12/snmpuser/{snmpuser_reference}": {
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/snmpuser"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string", 
              "example": "resourceID:resourceName"
            }, 
            "description": "Enter the reference for snmpuser", 
            "required": true, 
            "name": "snmpuser_reference", 
            "in": "path"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }
        ], 
        "tags": [
          "snmpuser"
        ], 
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object", 
                "properties": {
                  "comment": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "privacy_password": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "authentication_protocol": {
                    "type": "string", 
                    "example": "[u'NONE', u'MD5', u'SHA']"
                  }, 
                  "name": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "disable": {
                    "type": "string", 
                    "example": "bool"
                  }, 
                  "privacy_protocol": {
                    "type": "string", 
                    "example": "[u'NONE', u'DES', u'AES']"
                  }, 
                  "authentication_password": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "extattrs": {
                    "type": "string", 
                    "example": "extattr"
                  }
                }
              }
            }
          }, 
          "required": true, 
          "description": "Enter the request body here"
        }, 
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "description": "Update the snmpuser resource"
      }, 
      "delete": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object", 
                  "properties": {
                    "$ref": {
                      "type": "string", 
                      "description": "Reference of the deleted string"
                    }
                  }
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "description": "Delete the snmpuser resource", 
        "parameters": [
          {
            "schema": {
              "type": "string", 
              "example": "resourceID:resourceName"
            }, 
            "description": "Enter the reference for snmpuser", 
            "required": true, 
            "name": "snmpuser_reference", 
            "in": "path"
          }
        ], 
        "tags": [
          "snmpuser"
        ]
      }, 
      "get": {
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/snmpuser"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string", 
              "example": "resourceID:resourceName"
            }, 
            "description": "Enter the reference for snmpuser", 
            "required": true, 
            "name": "snmpuser_reference", 
            "in": "path"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields", 
            "required": false, 
            "name": "_return_fields+", 
            "in": "query"
          }, 
          {
            "schema": {
              "default": 0, 
              "enum": [
                0, 
                1
              ], 
              "type": "integer"
            }, 
            "description": "Select 1 if result is required as a object", 
            "required": false, 
            "name": "_return_as_object", 
            "in": "query"
          }
        ], 
        "tags": [
          "snmpuser"
        ]
      }
    }, 
    "/wapi/v2.12/admingroup/{admingroup_reference}": {
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/admingroup"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string", 
              "example": "resourceID:resourceName"
            }, 
            "description": "Enter the reference for admingroup", 
            "required": true, 
            "name": "admingroup_reference", 
            "in": "path"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }
        ], 
        "tags": [
          "admingroup"
        ], 
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object", 
                "properties": {
                  "comment": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "superuser": {
                    "type": "string", 
                    "example": "bool"
                  }, 
                  "admin_set_commands": {
                    "type": "string", 
                    "example": "admingroup:adminsetcommands"
                  }, 
                  "docker_show_commands": {
                    "type": "string", 
                    "example": "admingroup:dockershowcommands"
                  }, 
                  "inactivity_lockout_setting": {
                    "type": "string", 
                    "example": "setting:inactivelockout"
                  }, 
                  "cloud_set_commands": {
                    "type": "string", 
                    "example": "admingroup:cloudsetcommands"
                  }, 
                  "disable_concurrent_login": {
                    "type": "string", 
                    "example": "bool"
                  }, 
                  "grid_show_commands": {
                    "type": "string", 
                    "example": "admingroup:gridshowcommands"
                  }, 
                  "dns_show_commands": {
                    "type": "string", 
                    "example": "admingroup:dnsshowcommands"
                  }, 
                  "licensing_set_commands": {
                    "type": "string", 
                    "example": "admingroup:licensingsetcommands"
                  }, 
                  "use_disable_concurrent_login": {
                    "type": "string", 
                    "example": "bool"
                  }, 
                  "database_show_commands": {
                    "type": "string", 
                    "example": "admingroup:databaseshowcommands"
                  }, 
                  "use_account_inactivity_lockout_enable": {
                    "type": "string", 
                    "example": "bool"
                  }, 
                  "licensing_show_commands": {
                    "type": "string", 
                    "example": "admingroup:licensingshowcommands"
                  }, 
                  "use_password_setting": {
                    "type": "string", 
                    "example": "bool"
                  }, 
                  "admin_show_commands": {
                    "type": "string", 
                    "example": "admingroup:adminshowcommands"
                  }, 
                  "use_lockout_setting": {
                    "type": "string", 
                    "example": "bool"
                  }, 
                  "trouble_shooting_toplevel_commands": {
                    "type": "string", 
                    "example": "admingroup:troubleshootingtoplevelcommands"
                  }, 
                  "lockout_setting": {
                    "type": "string", 
                    "example": "admingroup:lockoutsetting"
                  }, 
                  "access_method": {
                    "type": "string", 
                    "example": "[u'GUI', u'API', u'TAXII', u'CLOUD_API', u'CLI']"
                  }, 
                  "dhcp_show_commands": {
                    "type": "string", 
                    "example": "admingroup:dhcpshowcommands"
                  }, 
                  "email_addresses": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "security_set_commands": {
                    "type": "string", 
                    "example": "admingroup:securitysetcommands"
                  }, 
                  "dns_toplevel_commands": {
                    "type": "string", 
                    "example": "admingroup:dnstoplevelcommands"
                  }, 
                  "admin_toplevel_commands": {
                    "type": "string", 
                    "example": "admingroup:admintoplevelcommands"
                  }, 
                  "password_setting": {
                    "type": "string", 
                    "example": "admingroup:passwordsetting"
                  }, 
                  "extattrs": {
                    "type": "string", 
                    "example": "extattr"
                  }, 
                  "saml_setting": {
                    "type": "string", 
                    "example": "admingroup:samlsetting"
                  }, 
                  "networking_show_commands": {
                    "type": "string", 
                    "example": "admingroup:networkingshowcommands"
                  }, 
                  "disable": {
                    "type": "string", 
                    "example": "bool"
                  }, 
                  "security_show_commands": {
                    "type": "string", 
                    "example": "admingroup:securityshowcommands"
                  }, 
                  "grid_set_commands": {
                    "type": "string", 
                    "example": "admingroup:gridsetcommands"
                  }, 
                  "machine_control_toplevel_commands": {
                    "type": "string", 
                    "example": "admingroup:machinecontroltoplevelcommands"
                  }, 
                  "name": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "roles": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "user_access": {
                    "type": "string", 
                    "example": "[{u'permission': u'enum', u'address': u'string'}]"
                  }, 
                  "networking_set_commands": {
                    "type": "string", 
                    "example": "admingroup:networkingsetcommands"
                  }, 
                  "dhcp_set_commands": {
                    "type": "string", 
                    "example": "admingroup:dhcpsetcommands"
                  }, 
                  "docker_set_commands": {
                    "type": "string", 
                    "example": "admingroup:dockersetcommands"
                  }, 
                  "enable_restricted_user_access": {
                    "type": "string", 
                    "example": "bool"
                  }, 
                  "database_set_commands": {
                    "type": "string", 
                    "example": "admingroup:databasesetcommands"
                  }, 
                  "dns_set_commands": {
                    "type": "string", 
                    "example": "admingroup:dnssetcommands"
                  }
                }
              }
            }
          }, 
          "required": true, 
          "description": "Enter the request body here"
        }, 
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "description": "Update the admingroup resource"
      }, 
      "delete": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object", 
                  "properties": {
                    "$ref": {
                      "type": "string", 
                      "description": "Reference of the deleted string"
                    }
                  }
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "description": "Delete the admingroup resource", 
        "parameters": [
          {
            "schema": {
              "type": "string", 
              "example": "resourceID:resourceName"
            }, 
            "description": "Enter the reference for admingroup", 
            "required": true, 
            "name": "admingroup_reference", 
            "in": "path"
          }
        ], 
        "tags": [
          "admingroup"
        ]
      }, 
      "get": {
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/admingroup"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string", 
              "example": "resourceID:resourceName"
            }, 
            "description": "Enter the reference for admingroup", 
            "required": true, 
            "name": "admingroup_reference", 
            "in": "path"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields", 
            "required": false, 
            "name": "_return_fields+", 
            "in": "query"
          }, 
          {
            "schema": {
              "default": 0, 
              "enum": [
                0, 
                1
              ], 
              "type": "integer"
            }, 
            "description": "Select 1 if result is required as a object", 
            "required": false, 
            "name": "_return_as_object", 
            "in": "query"
          }
        ], 
        "tags": [
          "admingroup"
        ]
      }
    }, 
    "/wapi/v2.12/radius:authservice": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object", 
                "properties": {
                  "comment": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "acct_retries": {
                    "type": "string", 
                    "example": "uint"
                  }, 
                  "name": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "auth_timeout": {
                    "type": "string", 
                    "example": "uint"
                  }, 
                  "mode": {
                    "type": "string", 
                    "example": "[u'HUNT_GROUP', u'ROUND_ROBIN']"
                  }, 
                  "enable_cache": {
                    "type": "string", 
                    "example": "bool"
                  }, 
                  "disable": {
                    "type": "string", 
                    "example": "bool"
                  }, 
                  "acct_timeout": {
                    "type": "string", 
                    "example": "uint"
                  }, 
                  "cache_ttl": {
                    "type": "string", 
                    "example": "uint"
                  }, 
                  "servers": {
                    "type": "string", 
                    "example": "[{u'auth_type': u'enum', u'comment': u'string', u'shared_secret': u'string', u'auth_port': u'uint', u'use_accounting': u'bool', u'disable': u'bool', u'use_mgmt_port': u'bool', u'address': u'string', u'acct_port': u'uint'}]"
                  }, 
                  "recovery_interval": {
                    "type": "string", 
                    "example": "uint"
                  }, 
                  "auth_retries": {
                    "type": "string", 
                    "example": "uint"
                  }
                }
              }
            }
          }, 
          "required": true, 
          "description": "Enter the request body here"
        }, 
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/radius_authservice"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }
        ], 
        "tags": [
          "radius:authservice"
        ]
      }, 
      "get": {
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/radius_authservice"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields", 
            "required": false, 
            "name": "_return_fields+", 
            "in": "query"
          }, 
          {
            "schema": {
              "minimum": 1, 
              "type": "integer"
            }, 
            "description": "Enter the number of results to be fetched", 
            "required": false, 
            "name": "_max_results", 
            "in": "query"
          }, 
          {
            "schema": {
              "default": 0, 
              "enum": [
                0, 
                1
              ], 
              "type": "integer"
            }, 
            "description": "Select 1 if result is required as a object", 
            "required": false, 
            "name": "_return_as_object", 
            "in": "query"
          }, 
          {
            "schema": {
              "default": 0, 
              "enum": [
                0, 
                1
              ], 
              "type": "integer"
            }, 
            "description": "Select 1 if paging is required. If SET, _max_results and _return_as_object must be entered.", 
            "required": false, 
            "name": "_paging", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the page ID for fetching next page", 
            "required": false, 
            "name": " _page_id", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the value of the field", 
            "required": false, 
            "name": "comment", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the value of the field", 
            "required": false, 
            "name": "mode", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the value of the field", 
            "required": false, 
            "name": "name", 
            "in": "query"
          }
        ], 
        "tags": [
          "radius:authservice"
        ]
      }
    }, 
    "/wapi/v2.12/bfdtemplate/{bfdtemplate_reference}": {
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bfdtemplate"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string", 
              "example": "resourceID:resourceName"
            }, 
            "description": "Enter the reference for bfdtemplate", 
            "required": true, 
            "name": "bfdtemplate_reference", 
            "in": "path"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }
        ], 
        "tags": [
          "bfdtemplate"
        ], 
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object", 
                "properties": {
                  "min_rx_interval": {
                    "type": "string", 
                    "example": "uint"
                  }, 
                  "authentication_key_id": {
                    "type": "string", 
                    "example": "uint"
                  }, 
                  "min_tx_interval": {
                    "type": "string", 
                    "example": "uint"
                  }, 
                  "authentication_type": {
                    "type": "string", 
                    "example": "[u'NONE', u'MD5', u'METICULOUS-MD5', u'SHA1', u'METICULOUS-SHA1']"
                  }, 
                  "detection_multiplier": {
                    "type": "string", 
                    "example": "uint"
                  }, 
                  "authentication_key": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "name": {
                    "type": "string", 
                    "example": "string"
                  }
                }
              }
            }
          }, 
          "required": true, 
          "description": "Enter the request body here"
        }, 
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "description": "Update the bfdtemplate resource"
      }, 
      "delete": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object", 
                  "properties": {
                    "$ref": {
                      "type": "string", 
                      "description": "Reference of the deleted string"
                    }
                  }
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "description": "Delete the bfdtemplate resource", 
        "parameters": [
          {
            "schema": {
              "type": "string", 
              "example": "resourceID:resourceName"
            }, 
            "description": "Enter the reference for bfdtemplate", 
            "required": true, 
            "name": "bfdtemplate_reference", 
            "in": "path"
          }
        ], 
        "tags": [
          "bfdtemplate"
        ]
      }, 
      "get": {
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bfdtemplate"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string", 
              "example": "resourceID:resourceName"
            }, 
            "description": "Enter the reference for bfdtemplate", 
            "required": true, 
            "name": "bfdtemplate_reference", 
            "in": "path"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields", 
            "required": false, 
            "name": "_return_fields+", 
            "in": "query"
          }, 
          {
            "schema": {
              "default": 0, 
              "enum": [
                0, 
                1
              ], 
              "type": "integer"
            }, 
            "description": "Select 1 if result is required as a object", 
            "required": false, 
            "name": "_return_as_object", 
            "in": "query"
          }
        ], 
        "tags": [
          "bfdtemplate"
        ]
      }
    }, 
    "/wapi/v2.12/adminrole": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object", 
                "properties": {
                  "comment": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "disable": {
                    "type": "string", 
                    "example": "bool"
                  }, 
                  "name": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "extattrs": {
                    "type": "string", 
                    "example": "extattr"
                  }
                }
              }
            }
          }, 
          "required": true, 
          "description": "Enter the request body here"
        }, 
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/adminrole"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }
        ], 
        "tags": [
          "adminrole"
        ]
      }, 
      "get": {
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/adminrole"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields", 
            "required": false, 
            "name": "_return_fields+", 
            "in": "query"
          }, 
          {
            "schema": {
              "minimum": 1, 
              "type": "integer"
            }, 
            "description": "Enter the number of results to be fetched", 
            "required": false, 
            "name": "_max_results", 
            "in": "query"
          }, 
          {
            "schema": {
              "default": 0, 
              "enum": [
                0, 
                1
              ], 
              "type": "integer"
            }, 
            "description": "Select 1 if result is required as a object", 
            "required": false, 
            "name": "_return_as_object", 
            "in": "query"
          }, 
          {
            "schema": {
              "default": 0, 
              "enum": [
                0, 
                1
              ], 
              "type": "integer"
            }, 
            "description": "Select 1 if paging is required. If SET, _max_results and _return_as_object must be entered.", 
            "required": false, 
            "name": "_paging", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the page ID for fetching next page", 
            "required": false, 
            "name": " _page_id", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the value of the field", 
            "required": false, 
            "name": "comment", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the value of the field", 
            "required": false, 
            "name": "name", 
            "in": "query"
          }
        ], 
        "tags": [
          "adminrole"
        ]
      }
    }, 
    "/wapi/v2.12/tacacsplus:authservice/{tacacsplus:authservice_reference}": {
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tacacsplus_authservice"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string", 
              "example": "resourceID:resourceName"
            }, 
            "description": "Enter the reference for tacacsplus:authservice", 
            "required": true, 
            "name": "tacacsplus:authservice_reference", 
            "in": "path"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }
        ], 
        "tags": [
          "tacacsplus:authservice"
        ], 
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object", 
                "properties": {
                  "comment": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "acct_retries": {
                    "type": "string", 
                    "example": "uint"
                  }, 
                  "name": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "auth_timeout": {
                    "type": "string", 
                    "example": "uint"
                  }, 
                  "servers": {
                    "type": "string", 
                    "example": "[{u'auth_type': u'enum', u'comment': u'string', u'address': u'string', u'use_accounting': u'bool', u'disable': u'bool', u'use_mgmt_port': u'bool', u'shared_secret': u'string', u'port': u'uint'}]"
                  }, 
                  "disable": {
                    "type": "string", 
                    "example": "bool"
                  }, 
                  "acct_timeout": {
                    "type": "string", 
                    "example": "uint"
                  }, 
                  "auth_retries": {
                    "type": "string", 
                    "example": "uint"
                  }
                }
              }
            }
          }, 
          "required": true, 
          "description": "Enter the request body here"
        }, 
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "description": "Update the tacacsplus:authservice resource"
      }, 
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object", 
                  "properties": {
                    "check_tacacsplus_server_settings": {
                      "type": "string", 
                      "example": {
                        "tacacsplus_server": "tacacsplus:server", 
                        "tacacsplus_authservice": "string", 
                        "acct_timeout": "uint", 
                        "auth_timeout": "uint"
                      }
                    }
                  }
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string", 
              "example": "resourceID:resourceName"
            }, 
            "description": "Enter the reference for tacacsplus:authservice", 
            "required": true, 
            "name": "tacacsplus:authservice_reference", 
            "in": "path"
          }, 
          {
            "schema": {
              "enum": [
                "check_tacacsplus_server_settings"
              ], 
              "type": "string"
            }, 
            "description": "Select the function", 
            "required": true, 
            "name": "_function", 
            "in": "query"
          }
        ], 
        "tags": [
          "tacacsplus:authservice"
        ], 
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object", 
                "properties": {}
              }
            }
          }, 
          "required": true, 
          "description": "Enter the request body here"
        }, 
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "description": "Function calls"
      }, 
      "delete": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object", 
                  "properties": {
                    "$ref": {
                      "type": "string", 
                      "description": "Reference of the deleted string"
                    }
                  }
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "description": "Delete the tacacsplus:authservice resource", 
        "parameters": [
          {
            "schema": {
              "type": "string", 
              "example": "resourceID:resourceName"
            }, 
            "description": "Enter the reference for tacacsplus:authservice", 
            "required": true, 
            "name": "tacacsplus:authservice_reference", 
            "in": "path"
          }
        ], 
        "tags": [
          "tacacsplus:authservice"
        ]
      }, 
      "get": {
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tacacsplus_authservice"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string", 
              "example": "resourceID:resourceName"
            }, 
            "description": "Enter the reference for tacacsplus:authservice", 
            "required": true, 
            "name": "tacacsplus:authservice_reference", 
            "in": "path"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields", 
            "required": false, 
            "name": "_return_fields+", 
            "in": "query"
          }, 
          {
            "schema": {
              "default": 0, 
              "enum": [
                0, 
                1
              ], 
              "type": "integer"
            }, 
            "description": "Select 1 if result is required as a object", 
            "required": false, 
            "name": "_return_as_object", 
            "in": "query"
          }
        ], 
        "tags": [
          "tacacsplus:authservice"
        ]
      }
    }, 
    "/wapi/v2.12/ldap_auth_service": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object", 
                "properties": {
                  "comment": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "retries": {
                    "type": "string", 
                    "example": "uint"
                  }, 
                  "name": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "search_scope": {
                    "type": "string", 
                    "example": "[u'BASE', u'ONELEVEL', u'SUBTREE']"
                  }, 
                  "ldap_group_attribute": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "ea_mapping": {
                    "type": "string", 
                    "example": "[{u'mapped_ea': u'string', u'name': u'string'}]"
                  }, 
                  "ldap_user_attribute": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "servers": {
                    "type": "string", 
                    "example": "[{u'comment': u'string', u'version': u'enum', u'use_mgmt_port': u'bool', u'encryption': u'enum', u'address': u'string', u'authentication_type': u'enum', u'disable': u'bool', u'bind_password': u'string', u'base_dn': u'string', u'bind_user_dn': u'string', u'port': u'uint'}]"
                  }, 
                  "disable": {
                    "type": "string", 
                    "example": "bool"
                  }, 
                  "mode": {
                    "type": "string", 
                    "example": "[u'ORDERED_LIST', u'ROUND_ROBIN']"
                  }, 
                  "timeout": {
                    "type": "string", 
                    "example": "uint"
                  }, 
                  "recovery_interval": {
                    "type": "string", 
                    "example": "uint"
                  }, 
                  "ldap_group_authentication_type": {
                    "type": "string", 
                    "example": "[u'GROUP_ATTRIBUTE', u'POSIX_GROUP']"
                  }
                }
              }
            }
          }, 
          "required": true, 
          "description": "Enter the request body here"
        }, 
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ldap_auth_service"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }
        ], 
        "tags": [
          "ldap_auth_service"
        ]
      }, 
      "get": {
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ldap_auth_service"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields", 
            "required": false, 
            "name": "_return_fields+", 
            "in": "query"
          }, 
          {
            "schema": {
              "minimum": 1, 
              "type": "integer"
            }, 
            "description": "Enter the number of results to be fetched", 
            "required": false, 
            "name": "_max_results", 
            "in": "query"
          }, 
          {
            "schema": {
              "default": 0, 
              "enum": [
                0, 
                1
              ], 
              "type": "integer"
            }, 
            "description": "Select 1 if result is required as a object", 
            "required": false, 
            "name": "_return_as_object", 
            "in": "query"
          }, 
          {
            "schema": {
              "default": 0, 
              "enum": [
                0, 
                1
              ], 
              "type": "integer"
            }, 
            "description": "Select 1 if paging is required. If SET, _max_results and _return_as_object must be entered.", 
            "required": false, 
            "name": "_paging", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the page ID for fetching next page", 
            "required": false, 
            "name": " _page_id", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the value of the field", 
            "required": false, 
            "name": "comment", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the value of the field", 
            "required": false, 
            "name": "mode", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the value of the field", 
            "required": false, 
            "name": "name", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the value of the field", 
            "required": false, 
            "name": "search_scope", 
            "in": "query"
          }
        ], 
        "tags": [
          "ldap_auth_service"
        ]
      }
    }, 
    "/wapi/v2.12/certificate:authservice/{certificate:authservice_reference}": {
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/certificate_authservice"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string", 
              "example": "resourceID:resourceName"
            }, 
            "description": "Enter the reference for certificate:authservice", 
            "required": true, 
            "name": "certificate:authservice_reference", 
            "in": "path"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }
        ], 
        "tags": [
          "certificate:authservice"
        ], 
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object", 
                "properties": {
                  "comment": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "remote_lookup_service": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "ocsp_check": {
                    "type": "string", 
                    "example": "[u'MANUAL', u'AIA_ONLY', u'AIA_AND_MANUAL', u'DISABLED']"
                  }, 
                  "name": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "response_timeout": {
                    "type": "string", 
                    "example": "uint"
                  }, 
                  "remote_lookup_password": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "max_retries": {
                    "type": "string", 
                    "example": "uint"
                  }, 
                  "trust_model": {
                    "type": "string", 
                    "example": "[u'DIRECT', u'DELEGATED']"
                  }, 
                  "disabled": {
                    "type": "string", 
                    "example": "bool"
                  }, 
                  "enable_password_request": {
                    "type": "string", 
                    "example": "bool"
                  }, 
                  "enable_remote_lookup": {
                    "type": "string", 
                    "example": "bool"
                  }, 
                  "auto_populate_login": {
                    "type": "string", 
                    "example": "[u'SERIAL_NUMBER', u'S_DN_CN', u'S_DN_EMAIL', u'SAN_UPN', u'SAN_EMAIL', u'AD_SUBJECT_ISSUER']"
                  }, 
                  "remote_lookup_username": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "ocsp_responders": {
                    "type": "string", 
                    "example": "[{u'comment': u'string', u'certificate': u'string', u'disabled': u'bool', u'fqdn_or_ip': u'string', u'port': u'uint', u'certificate_token': u'string'}]"
                  }, 
                  "recovery_interval": {
                    "type": "string", 
                    "example": "uint"
                  }, 
                  "ca_certificates": {
                    "type": "string", 
                    "example": "cacertificate"
                  }, 
                  "user_match_type": {
                    "type": "string", 
                    "example": "[u'DIRECT_MATCH', u'AUTO_MATCH']"
                  }
                }
              }
            }
          }, 
          "required": true, 
          "description": "Enter the request body here"
        }, 
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "description": "Update the certificate:authservice resource"
      }, 
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object", 
                  "properties": {
                    "test_ocsp_responder_settings": {
                      "type": "string", 
                      "example": {
                        "certificate_auth_service": "string", 
                        "ocsp_responder": "ocsp_responder"
                      }
                    }
                  }
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string", 
              "example": "resourceID:resourceName"
            }, 
            "description": "Enter the reference for certificate:authservice", 
            "required": true, 
            "name": "certificate:authservice_reference", 
            "in": "path"
          }, 
          {
            "schema": {
              "enum": [
                "test_ocsp_responder_settings"
              ], 
              "type": "string"
            }, 
            "description": "Select the function", 
            "required": true, 
            "name": "_function", 
            "in": "query"
          }
        ], 
        "tags": [
          "certificate:authservice"
        ], 
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object", 
                "properties": {}
              }
            }
          }, 
          "required": true, 
          "description": "Enter the request body here"
        }, 
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "description": "Function calls"
      }, 
      "delete": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object", 
                  "properties": {
                    "$ref": {
                      "type": "string", 
                      "description": "Reference of the deleted string"
                    }
                  }
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "description": "Delete the certificate:authservice resource", 
        "parameters": [
          {
            "schema": {
              "type": "string", 
              "example": "resourceID:resourceName"
            }, 
            "description": "Enter the reference for certificate:authservice", 
            "required": true, 
            "name": "certificate:authservice_reference", 
            "in": "path"
          }
        ], 
        "tags": [
          "certificate:authservice"
        ]
      }, 
      "get": {
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/certificate_authservice"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string", 
              "example": "resourceID:resourceName"
            }, 
            "description": "Enter the reference for certificate:authservice", 
            "required": true, 
            "name": "certificate:authservice_reference", 
            "in": "path"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields", 
            "required": false, 
            "name": "_return_fields+", 
            "in": "query"
          }, 
          {
            "schema": {
              "default": 0, 
              "enum": [
                0, 
                1
              ], 
              "type": "integer"
            }, 
            "description": "Select 1 if result is required as a object", 
            "required": false, 
            "name": "_return_as_object", 
            "in": "query"
          }
        ], 
        "tags": [
          "certificate:authservice"
        ]
      }
    }, 
    "/wapi/v2.12/adminuser/{adminuser_reference}": {
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/adminuser"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string", 
              "example": "resourceID:resourceName"
            }, 
            "description": "Enter the reference for adminuser", 
            "required": true, 
            "name": "adminuser_reference", 
            "in": "path"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }
        ], 
        "tags": [
          "adminuser"
        ], 
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object", 
                "properties": {
                  "auth_type": {
                    "type": "string", 
                    "example": "[u'LOCAL', u'RADIUS', u'REMOTE', u'SAML', u'SAML_LOCAL']"
                  }, 
                  "comment": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "enable_certificate_authentication": {
                    "type": "string", 
                    "example": "bool"
                  }, 
                  "use_time_zone": {
                    "type": "string", 
                    "example": "bool"
                  }, 
                  "client_certificate_serial_number": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "time_zone": {
                    "type": "string", 
                    "example": "[u'(UTC - 12:00)', u'(UTC - 11:00) Midway Island, Samoa', u'(UTC - 10:00) Hawaii', u'(UTC - 9:00) Alaska', u'(UTC - 8:00) Pacific Time (US and Canada), Tijuana', u'(UTC - 7:00) Arizona', u'(UTC - 7:00) Mountain Time (US and Canada)', u'(UTC - 6:00) Central Time (US and Canada)', u'(UTC - 6:00) Mexico City, Tegucigalpa', u'(UTC - 6:00) Saskatchewan', u'(UTC - 5:00) Bogota, Lima, Quito', u'(UTC - 5:00) Eastern Time (US and Canada)', u'(UTC - 5:00) Indiana (East)', u'(UTC - 4:00) Caracas', u'(UTC - 4:00) Atlantic Time (Canada)', u'(UTC - 4:00) Santiago', u'(UTC - 3:30) Newfoundland', u'(UTC - 3:00) Brasilia', u'(UTC - 3:00) Buenos Aires', u'(UTC - 2:00) Mid-Atlantic', u'(UTC - 1:00) Azores', u'(UTC) Coordinated Universal Time', u'(UTC) Dublin', u'(UTC) Lisbon', u'(UTC) London', u'(UTC + 1:00) Casablanca', u'(UTC + 1:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna', u'(UTC + 1:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague', u'(UTC + 1:00) Brussels, Copenhagen, Madrid, Paris', u'(UTC + 1:00) Sarajevo, Skopje, Sofija, Warsaw, Zagreb', u'(UTC + 2:00) Athens, Vilnius', u'(UTC + 2:00) Bucharest', u'(UTC + 2:00) Cairo', u'(UTC + 2:00) Harare', u'(UTC + 2:00) Helsinki', u'(UTC + 2:00) Jerusalem', u'(UTC + 2:00) Kaliningrad', u'(UTC + 3:00) Baghdad, Istanbul, Kuwait, Minsk, Riyadh', u'(UTC + 3:00) Moscow, St. Petersburg, Volgograd', u'(UTC + 3:00) Nairobi', u'(UTC + 3:30) Tehran', u'(UTC + 4:00) Dubai', u'(UTC + 4:00) Baku', u'(UTC + 4:00) Samara', u'(UTC + 4:30) Kabul', u'(UTC + 5:00) Ekaterinburg', u'(UTC + 5:00) Islamabad, Karachi', u'(UTC + 5:30) Bombay, Calcutta, Madras, New Delhi', u'(UTC + 5:30) Colombo', u'(UTC + 6:00) Dhaka', u'(UTC + 6:00) Omsk', u'(UTC + 6:30) Rangoon', u'(UTC + 7:00) Bangkok, Hanoi', u'(UTC + 7:00) Krasnoyarsk', u'(UTC + 8:00) Beijing, Chongqing, Shanghai', u'(UTC + 8:00) Hong Kong', u'(UTC + 8:00) Irkutsk', u'(UTC + 8:00) Perth', u'(UTC + 8:00) Singapore', u'(UTC + 8:00) Taipei', u'(UTC + 9:00) Osaka, Sapporo, Tokyo', u'(UTC + 9:00) Seoul', u'(UTC + 9:00) Yakutsk', u'(UTC + 9:30) Adelaide', u'(UTC + 9:30) Darwin', u'(UTC + 10:00) Brisbane', u'(UTC + 10:00) Canberra, Sydney', u'(UTC + 10:00) Melbourne, Victoria', u'(UTC + 10:00) Guam', u'(UTC + 10:00) Hobart', u'(UTC + 10:00) Vladivostok', u'(UTC + 11:00) Solomon Islands', u'(UTC + 11:00) Magadan', u'(UTC + 12:00) Anadyr', u'(UTC + 12:00) Auckland', u'(UTC + 12:00) Fiji', u'(UTC + 12:00) Marshall Islands']"
                  }, 
                  "name": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "disable": {
                    "type": "string", 
                    "example": "bool"
                  }, 
                  "admin_groups": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "extattrs": {
                    "type": "string", 
                    "example": "extattr"
                  }, 
                  "password": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "email": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "ca_certificate_issuer": {
                    "type": "string", 
                    "example": "string"
                  }
                }
              }
            }
          }, 
          "required": true, 
          "description": "Enter the request body here"
        }, 
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "description": "Update the adminuser resource"
      }, 
      "delete": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object", 
                  "properties": {
                    "$ref": {
                      "type": "string", 
                      "description": "Reference of the deleted string"
                    }
                  }
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "description": "Delete the adminuser resource", 
        "parameters": [
          {
            "schema": {
              "type": "string", 
              "example": "resourceID:resourceName"
            }, 
            "description": "Enter the reference for adminuser", 
            "required": true, 
            "name": "adminuser_reference", 
            "in": "path"
          }
        ], 
        "tags": [
          "adminuser"
        ]
      }, 
      "get": {
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/adminuser"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string", 
              "example": "resourceID:resourceName"
            }, 
            "description": "Enter the reference for adminuser", 
            "required": true, 
            "name": "adminuser_reference", 
            "in": "path"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields", 
            "required": false, 
            "name": "_return_fields+", 
            "in": "query"
          }, 
          {
            "schema": {
              "default": 0, 
              "enum": [
                0, 
                1
              ], 
              "type": "integer"
            }, 
            "description": "Select 1 if result is required as a object", 
            "required": false, 
            "name": "_return_as_object", 
            "in": "query"
          }
        ], 
        "tags": [
          "adminuser"
        ]
      }
    }, 
    "/wapi/v2.12/saml:authservice/{saml:authservice_reference}": {
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/saml_authservice"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string", 
              "example": "resourceID:resourceName"
            }, 
            "description": "Enter the reference for saml:authservice", 
            "required": true, 
            "name": "saml:authservice_reference", 
            "in": "path"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }
        ], 
        "tags": [
          "saml:authservice"
        ], 
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object", 
                "properties": {
                  "comment": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "session_timeout": {
                    "type": "string", 
                    "example": "uint"
                  }, 
                  "name": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "idp": {
                    "type": "string", 
                    "example": "saml:idp"
                  }
                }
              }
            }
          }, 
          "required": true, 
          "description": "Enter the request body here"
        }, 
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "description": "Update the saml:authservice resource"
      }, 
      "delete": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object", 
                  "properties": {
                    "$ref": {
                      "type": "string", 
                      "description": "Reference of the deleted string"
                    }
                  }
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "description": "Delete the saml:authservice resource", 
        "parameters": [
          {
            "schema": {
              "type": "string", 
              "example": "resourceID:resourceName"
            }, 
            "description": "Enter the reference for saml:authservice", 
            "required": true, 
            "name": "saml:authservice_reference", 
            "in": "path"
          }
        ], 
        "tags": [
          "saml:authservice"
        ]
      }, 
      "get": {
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/saml_authservice"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string", 
              "example": "resourceID:resourceName"
            }, 
            "description": "Enter the reference for saml:authservice", 
            "required": true, 
            "name": "saml:authservice_reference", 
            "in": "path"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields", 
            "required": false, 
            "name": "_return_fields+", 
            "in": "query"
          }, 
          {
            "schema": {
              "default": 0, 
              "enum": [
                0, 
                1
              ], 
              "type": "integer"
            }, 
            "description": "Select 1 if result is required as a object", 
            "required": false, 
            "name": "_return_as_object", 
            "in": "query"
          }
        ], 
        "tags": [
          "saml:authservice"
        ]
      }
    }, 
    "/wapi/v2.12/certificate:authservice": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object", 
                "properties": {
                  "comment": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "remote_lookup_service": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "ocsp_check": {
                    "type": "string", 
                    "example": "[u'MANUAL', u'AIA_ONLY', u'AIA_AND_MANUAL', u'DISABLED']"
                  }, 
                  "name": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "response_timeout": {
                    "type": "string", 
                    "example": "uint"
                  }, 
                  "remote_lookup_password": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "max_retries": {
                    "type": "string", 
                    "example": "uint"
                  }, 
                  "trust_model": {
                    "type": "string", 
                    "example": "[u'DIRECT', u'DELEGATED']"
                  }, 
                  "disabled": {
                    "type": "string", 
                    "example": "bool"
                  }, 
                  "enable_password_request": {
                    "type": "string", 
                    "example": "bool"
                  }, 
                  "enable_remote_lookup": {
                    "type": "string", 
                    "example": "bool"
                  }, 
                  "auto_populate_login": {
                    "type": "string", 
                    "example": "[u'SERIAL_NUMBER', u'S_DN_CN', u'S_DN_EMAIL', u'SAN_UPN', u'SAN_EMAIL', u'AD_SUBJECT_ISSUER']"
                  }, 
                  "remote_lookup_username": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "ocsp_responders": {
                    "type": "string", 
                    "example": "[{u'comment': u'string', u'certificate': u'string', u'disabled': u'bool', u'fqdn_or_ip': u'string', u'port': u'uint', u'certificate_token': u'string'}]"
                  }, 
                  "recovery_interval": {
                    "type": "string", 
                    "example": "uint"
                  }, 
                  "ca_certificates": {
                    "type": "string", 
                    "example": "cacertificate"
                  }, 
                  "user_match_type": {
                    "type": "string", 
                    "example": "[u'DIRECT_MATCH', u'AUTO_MATCH']"
                  }
                }
              }
            }
          }, 
          "required": true, 
          "description": "Enter the request body here"
        }, 
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/certificate_authservice"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }
        ], 
        "tags": [
          "certificate:authservice"
        ]
      }, 
      "get": {
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/certificate_authservice"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields", 
            "required": false, 
            "name": "_return_fields+", 
            "in": "query"
          }, 
          {
            "schema": {
              "minimum": 1, 
              "type": "integer"
            }, 
            "description": "Enter the number of results to be fetched", 
            "required": false, 
            "name": "_max_results", 
            "in": "query"
          }, 
          {
            "schema": {
              "default": 0, 
              "enum": [
                0, 
                1
              ], 
              "type": "integer"
            }, 
            "description": "Select 1 if result is required as a object", 
            "required": false, 
            "name": "_return_as_object", 
            "in": "query"
          }, 
          {
            "schema": {
              "default": 0, 
              "enum": [
                0, 
                1
              ], 
              "type": "integer"
            }, 
            "description": "Select 1 if paging is required. If SET, _max_results and _return_as_object must be entered.", 
            "required": false, 
            "name": "_paging", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the page ID for fetching next page", 
            "required": false, 
            "name": " _page_id", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the value of the field", 
            "required": false, 
            "name": "comment", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the value of the field", 
            "required": false, 
            "name": "name", 
            "in": "query"
          }
        ], 
        "tags": [
          "certificate:authservice"
        ]
      }
    }, 
    "/wapi/v2.12/saml:authservice": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object", 
                "properties": {
                  "comment": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "session_timeout": {
                    "type": "string", 
                    "example": "uint"
                  }, 
                  "name": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "idp": {
                    "type": "string", 
                    "example": "saml:idp"
                  }
                }
              }
            }
          }, 
          "required": true, 
          "description": "Enter the request body here"
        }, 
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/saml_authservice"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }
        ], 
        "tags": [
          "saml:authservice"
        ]
      }, 
      "get": {
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/saml_authservice"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields", 
            "required": false, 
            "name": "_return_fields+", 
            "in": "query"
          }, 
          {
            "schema": {
              "minimum": 1, 
              "type": "integer"
            }, 
            "description": "Enter the number of results to be fetched", 
            "required": false, 
            "name": "_max_results", 
            "in": "query"
          }, 
          {
            "schema": {
              "default": 0, 
              "enum": [
                0, 
                1
              ], 
              "type": "integer"
            }, 
            "description": "Select 1 if result is required as a object", 
            "required": false, 
            "name": "_return_as_object", 
            "in": "query"
          }, 
          {
            "schema": {
              "default": 0, 
              "enum": [
                0, 
                1
              ], 
              "type": "integer"
            }, 
            "description": "Select 1 if paging is required. If SET, _max_results and _return_as_object must be entered.", 
            "required": false, 
            "name": "_paging", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the page ID for fetching next page", 
            "required": false, 
            "name": " _page_id", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the value of the field", 
            "required": false, 
            "name": "comment", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the value of the field", 
            "required": false, 
            "name": "name", 
            "in": "query"
          }
        ], 
        "tags": [
          "saml:authservice"
        ]
      }
    }, 
    "/wapi/v2.12/ftpuser/{ftpuser_reference}": {
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ftpuser"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string", 
              "example": "resourceID:resourceName"
            }, 
            "description": "Enter the reference for ftpuser", 
            "required": true, 
            "name": "ftpuser_reference", 
            "in": "path"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }
        ], 
        "tags": [
          "ftpuser"
        ], 
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object", 
                "properties": {
                  "permission": {
                    "type": "string", 
                    "example": "[u'RO', u'RW']"
                  }, 
                  "password": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "extattrs": {
                    "type": "string", 
                    "example": "extattr"
                  }
                }
              }
            }
          }, 
          "required": true, 
          "description": "Enter the request body here"
        }, 
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "description": "Update the ftpuser resource"
      }, 
      "delete": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object", 
                  "properties": {
                    "$ref": {
                      "type": "string", 
                      "description": "Reference of the deleted string"
                    }
                  }
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "description": "Delete the ftpuser resource", 
        "parameters": [
          {
            "schema": {
              "type": "string", 
              "example": "resourceID:resourceName"
            }, 
            "description": "Enter the reference for ftpuser", 
            "required": true, 
            "name": "ftpuser_reference", 
            "in": "path"
          }
        ], 
        "tags": [
          "ftpuser"
        ]
      }, 
      "get": {
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ftpuser"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string", 
              "example": "resourceID:resourceName"
            }, 
            "description": "Enter the reference for ftpuser", 
            "required": true, 
            "name": "ftpuser_reference", 
            "in": "path"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields", 
            "required": false, 
            "name": "_return_fields+", 
            "in": "query"
          }, 
          {
            "schema": {
              "default": 0, 
              "enum": [
                0, 
                1
              ], 
              "type": "integer"
            }, 
            "description": "Select 1 if result is required as a object", 
            "required": false, 
            "name": "_return_as_object", 
            "in": "query"
          }
        ], 
        "tags": [
          "ftpuser"
        ]
      }
    }, 
    "/wapi/v2.12/userprofile": {
      "get": {
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userprofile"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields", 
            "required": false, 
            "name": "_return_fields+", 
            "in": "query"
          }, 
          {
            "schema": {
              "minimum": 1, 
              "type": "integer"
            }, 
            "description": "Enter the number of results to be fetched", 
            "required": false, 
            "name": "_max_results", 
            "in": "query"
          }, 
          {
            "schema": {
              "default": 0, 
              "enum": [
                0, 
                1
              ], 
              "type": "integer"
            }, 
            "description": "Select 1 if result is required as a object", 
            "required": false, 
            "name": "_return_as_object", 
            "in": "query"
          }, 
          {
            "schema": {
              "default": 0, 
              "enum": [
                0, 
                1
              ], 
              "type": "integer"
            }, 
            "description": "Select 1 if paging is required. If SET, _max_results and _return_as_object must be entered.", 
            "required": false, 
            "name": "_paging", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the page ID for fetching next page", 
            "required": false, 
            "name": " _page_id", 
            "in": "query"
          }
        ], 
        "tags": [
          "userprofile"
        ]
      }
    }, 
    "/wapi/v2.12/ad_auth_service/{ad_auth_service_reference}": {
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ad_auth_service"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string", 
              "example": "resourceID:resourceName"
            }, 
            "description": "Enter the reference for ad_auth_service", 
            "required": true, 
            "name": "ad_auth_service_reference", 
            "in": "path"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }
        ], 
        "tags": [
          "ad_auth_service"
        ], 
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object", 
                "properties": {
                  "comment": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "name": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "additional_search_paths": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "domain_controllers": {
                    "type": "string", 
                    "example": "[{u'comment': u'string', u'mgmt_port': u'bool', u'encryption': u'enum', u'auth_port': u'uint', u'disabled': u'bool', u'fqdn_or_ip': u'string', u'use_mgmt_port': u'bool'}]"
                  }, 
                  "timeout": {
                    "type": "string", 
                    "example": "uint"
                  }, 
                  "disabled": {
                    "type": "string", 
                    "example": "bool"
                  }, 
                  "disable_default_search_path": {
                    "type": "string", 
                    "example": "bool"
                  }, 
                  "nested_group_querying": {
                    "type": "string", 
                    "example": "bool"
                  }, 
                  "ad_domain": {
                    "type": "string", 
                    "example": "string"
                  }
                }
              }
            }
          }, 
          "required": true, 
          "description": "Enter the request body here"
        }, 
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "description": "Update the ad_auth_service resource"
      }, 
      "delete": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object", 
                  "properties": {
                    "$ref": {
                      "type": "string", 
                      "description": "Reference of the deleted string"
                    }
                  }
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "description": "Delete the ad_auth_service resource", 
        "parameters": [
          {
            "schema": {
              "type": "string", 
              "example": "resourceID:resourceName"
            }, 
            "description": "Enter the reference for ad_auth_service", 
            "required": true, 
            "name": "ad_auth_service_reference", 
            "in": "path"
          }
        ], 
        "tags": [
          "ad_auth_service"
        ]
      }, 
      "get": {
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ad_auth_service"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string", 
              "example": "resourceID:resourceName"
            }, 
            "description": "Enter the reference for ad_auth_service", 
            "required": true, 
            "name": "ad_auth_service_reference", 
            "in": "path"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields", 
            "required": false, 
            "name": "_return_fields+", 
            "in": "query"
          }, 
          {
            "schema": {
              "default": 0, 
              "enum": [
                0, 
                1
              ], 
              "type": "integer"
            }, 
            "description": "Select 1 if result is required as a object", 
            "required": false, 
            "name": "_return_as_object", 
            "in": "query"
          }
        ], 
        "tags": [
          "ad_auth_service"
        ]
      }
    }, 
    "/wapi/v2.12/permission": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object", 
                "properties": {
                  "role": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "object": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "group": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "resource_type": {
                    "type": "string", 
                    "example": "[u'SUPER_HOST', u'VLAN_VIEW', u'Unknown', u'IDNS_MONITOR', u'AAAA', u'SCHEDULE_TASK', u'GRID_DHCP_PROPERTIES', u'IDNS_GEO_IP', u'BULKHOST', u'DHCP_FINGERPRINT', u'IDNS_LBDN_RECORD', u'SG_IPV6_NETWORK', u'MSSERVER', u'VLAN_OBJECTS', u'IDNS_LBDN', u'GRID_AAA_PROPERTIES', u'NAPTR', u'SUB_GRID', u'IPV6_NETWORK_TEMPLATE', u'IMC_PROPERTIES', u'FIXED_ADDRESS_TEMPLATE', u'NETWORK_DISCOVERY', u'SHARED_NETWORK', u'IDNS_CERTIFICATE', u'DATACOLLECTOR_CLUSTER', u'FIREEYE_PUBLISH_ALERT', u'CLUSTER', u'OPTION_SPACE', u'RESTART_SERVICE', u'SHARED_SRV', u'IPV6_DHCP_LEASE_HISTORY', u'VIEW', u'IPV6_RANGE', u'CNAME', u'IPV6_NETWORK', u'SHARED_AAAA', u'DASHBOARD_TASK', u'FIXED_ADDRESS', u'NETWORK_CONTAINER', u'SG_IPV4_NETWORK', u'DNAME', u'IPV6_SHARED_NETWORK', u'PTR', u'GRID_ANALYTICS_PROPERTIES', u'TLSA', u'CA_CERTIFICATE', u'RANGE', u'RULESET', u'AAA_EXTERNAL_SERVICE', u'HSM_GROUP', u'HOST_ADDRESS', u'IDNS_TOPOLOGY', u'SHARED_A', u'DELETED_OBJS_INFO_TRACKING', u'SHARED_TXT', u'DHCP_LEASE_HISTORY', u'MEMBER_DHCP_PROPERTIES', u'SUB_GRID_NETWORK_VIEW_PARENT', u'IMC_SITE', u'KERBEROS_KEY', u'MEMBER_SECURITY_PROPERTIES', u'IPV6_HOST_ADDRESS', u'IMC_AVP', u'MEMBER', u'IPV6_NETWORK_CONTAINER', u'VLAN_RANGE', u'RESPONSE_POLICY_ZONE', u'FILE_DIST_DIRECTORY', u'RESPONSE_POLICY_RULE', u'MS_SUPERSCOPE', u'HOST', u'SRV', u'IDNS_POOL', u'PORT_CONTROL', u'TENANT', u'IDNS_SERVER', u'OCSP_SERVICE', u'MEMBER_DNS_PROPERTIES', u'NETWORK_TEMPLATE', u'TEMPLATE', u'SHARED_RECORD_GROUP', u'CSV_IMPORT_TASK', u'IPV6_TEMPLATE', u'NETWORK', u'NETWORK_VIEW', u'IPV6_FIXED_ADDRESS', u'GRID_REPORTING_PROPERTIES', u'CAA', u'GRID_DNS_PROPERTIES', u'IPV6_FIXED_ADDRESS_TEMPLATE', u'REPORTING_DASHBOARD', u'ROAMING_HOST', u'ADD_A_RR_WITH_EMPTY_HOSTNAME', u'DHCP_MAC_FILTER', u'GRID_FILE_DIST_PROPERTIES', u'TXT', u'IPV6_RANGE_TEMPLATE', u'RANGE_TEMPLATE', u'DEFINED_ACL', u'A', u'SHARED_CNAME', u'BFD_TEMPLATE', u'GRID_SECURITY_PROPERTIES', u'MS_ADSITES_DOMAIN', u'SAML_AUTH_SERVICE', u'SHARED_MX', u'ALIAS', u'DEVICE', u'SG_NETWORK_VIEW', u'DNS64_SYNTHESIS_GROUP', u'ZONE', u'REPORTING_SEARCH', u'RECLAMATION', u'MX', u'MEMBER_CLOUD', u'MEMBER_ANALYTICS_PROPERTIES', u'RESTORABLE_OPERATION', u'MEMBER_FILE_DIST_PROPERTIES']"
                  }, 
                  "permission": {
                    "type": "string", 
                    "example": "[u'DENY', u'READ', u'WRITE']"
                  }
                }
              }
            }
          }, 
          "required": true, 
          "description": "Enter the request body here"
        }, 
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/permission"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }
        ], 
        "tags": [
          "permission"
        ]
      }, 
      "get": {
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/permission"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields", 
            "required": false, 
            "name": "_return_fields+", 
            "in": "query"
          }, 
          {
            "schema": {
              "minimum": 1, 
              "type": "integer"
            }, 
            "description": "Enter the number of results to be fetched", 
            "required": false, 
            "name": "_max_results", 
            "in": "query"
          }, 
          {
            "schema": {
              "default": 0, 
              "enum": [
                0, 
                1
              ], 
              "type": "integer"
            }, 
            "description": "Select 1 if result is required as a object", 
            "required": false, 
            "name": "_return_as_object", 
            "in": "query"
          }, 
          {
            "schema": {
              "default": 0, 
              "enum": [
                0, 
                1
              ], 
              "type": "integer"
            }, 
            "description": "Select 1 if paging is required. If SET, _max_results and _return_as_object must be entered.", 
            "required": false, 
            "name": "_paging", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the page ID for fetching next page", 
            "required": false, 
            "name": " _page_id", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the value of the field", 
            "required": false, 
            "name": "group", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the value of the field", 
            "required": false, 
            "name": "object", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the value of the field", 
            "required": false, 
            "name": "permission", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the value of the field", 
            "required": false, 
            "name": "resource_type", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the value of the field", 
            "required": false, 
            "name": "role", 
            "in": "query"
          }
        ], 
        "tags": [
          "permission"
        ]
      }
    }, 
    "/wapi/v2.12/networkuser": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object", 
                "properties": {
                  "name": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "network_view": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "domainname": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "first_seen_time": {
                    "type": "string", 
                    "example": "timestamp"
                  }, 
                  "last_seen_time": {
                    "type": "string", 
                    "example": "timestamp"
                  }, 
                  "last_updated_time": {
                    "type": "string", 
                    "example": "timestamp"
                  }, 
                  "logout_time": {
                    "type": "string", 
                    "example": "timestamp"
                  }, 
                  "logon_id": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "address": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "guid": {
                    "type": "string", 
                    "example": "string"
                  }
                }
              }
            }
          }, 
          "required": true, 
          "description": "Enter the request body here"
        }, 
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/networkuser"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }
        ], 
        "tags": [
          "networkuser"
        ]
      }, 
      "get": {
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/networkuser"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields", 
            "required": false, 
            "name": "_return_fields+", 
            "in": "query"
          }, 
          {
            "schema": {
              "minimum": 1, 
              "type": "integer"
            }, 
            "description": "Enter the number of results to be fetched", 
            "required": false, 
            "name": "_max_results", 
            "in": "query"
          }, 
          {
            "schema": {
              "default": 0, 
              "enum": [
                0, 
                1
              ], 
              "type": "integer"
            }, 
            "description": "Select 1 if result is required as a object", 
            "required": false, 
            "name": "_return_as_object", 
            "in": "query"
          }, 
          {
            "schema": {
              "default": 0, 
              "enum": [
                0, 
                1
              ], 
              "type": "integer"
            }, 
            "description": "Select 1 if paging is required. If SET, _max_results and _return_as_object must be entered.", 
            "required": false, 
            "name": "_paging", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the page ID for fetching next page", 
            "required": false, 
            "name": " _page_id", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the value of the field", 
            "required": false, 
            "name": "address", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the value of the field", 
            "required": false, 
            "name": "domainname", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the value of the field", 
            "required": false, 
            "name": "guid", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the value of the field", 
            "required": false, 
            "name": "logon_id", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the value of the field", 
            "required": false, 
            "name": "name", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the value of the field", 
            "required": false, 
            "name": "network_view", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the value of the field", 
            "required": false, 
            "name": "user_status", 
            "in": "query"
          }
        ], 
        "tags": [
          "networkuser"
        ]
      }
    }, 
    "/wapi/v2.12/adminuser": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object", 
                "properties": {
                  "auth_type": {
                    "type": "string", 
                    "example": "[u'LOCAL', u'RADIUS', u'REMOTE', u'SAML', u'SAML_LOCAL']"
                  }, 
                  "comment": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "enable_certificate_authentication": {
                    "type": "string", 
                    "example": "bool"
                  }, 
                  "use_time_zone": {
                    "type": "string", 
                    "example": "bool"
                  }, 
                  "client_certificate_serial_number": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "time_zone": {
                    "type": "string", 
                    "example": "[u'(UTC - 12:00)', u'(UTC - 11:00) Midway Island, Samoa', u'(UTC - 10:00) Hawaii', u'(UTC - 9:00) Alaska', u'(UTC - 8:00) Pacific Time (US and Canada), Tijuana', u'(UTC - 7:00) Arizona', u'(UTC - 7:00) Mountain Time (US and Canada)', u'(UTC - 6:00) Central Time (US and Canada)', u'(UTC - 6:00) Mexico City, Tegucigalpa', u'(UTC - 6:00) Saskatchewan', u'(UTC - 5:00) Bogota, Lima, Quito', u'(UTC - 5:00) Eastern Time (US and Canada)', u'(UTC - 5:00) Indiana (East)', u'(UTC - 4:00) Caracas', u'(UTC - 4:00) Atlantic Time (Canada)', u'(UTC - 4:00) Santiago', u'(UTC - 3:30) Newfoundland', u'(UTC - 3:00) Brasilia', u'(UTC - 3:00) Buenos Aires', u'(UTC - 2:00) Mid-Atlantic', u'(UTC - 1:00) Azores', u'(UTC) Coordinated Universal Time', u'(UTC) Dublin', u'(UTC) Lisbon', u'(UTC) London', u'(UTC + 1:00) Casablanca', u'(UTC + 1:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna', u'(UTC + 1:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague', u'(UTC + 1:00) Brussels, Copenhagen, Madrid, Paris', u'(UTC + 1:00) Sarajevo, Skopje, Sofija, Warsaw, Zagreb', u'(UTC + 2:00) Athens, Vilnius', u'(UTC + 2:00) Bucharest', u'(UTC + 2:00) Cairo', u'(UTC + 2:00) Harare', u'(UTC + 2:00) Helsinki', u'(UTC + 2:00) Jerusalem', u'(UTC + 2:00) Kaliningrad', u'(UTC + 3:00) Baghdad, Istanbul, Kuwait, Minsk, Riyadh', u'(UTC + 3:00) Moscow, St. Petersburg, Volgograd', u'(UTC + 3:00) Nairobi', u'(UTC + 3:30) Tehran', u'(UTC + 4:00) Dubai', u'(UTC + 4:00) Baku', u'(UTC + 4:00) Samara', u'(UTC + 4:30) Kabul', u'(UTC + 5:00) Ekaterinburg', u'(UTC + 5:00) Islamabad, Karachi', u'(UTC + 5:30) Bombay, Calcutta, Madras, New Delhi', u'(UTC + 5:30) Colombo', u'(UTC + 6:00) Dhaka', u'(UTC + 6:00) Omsk', u'(UTC + 6:30) Rangoon', u'(UTC + 7:00) Bangkok, Hanoi', u'(UTC + 7:00) Krasnoyarsk', u'(UTC + 8:00) Beijing, Chongqing, Shanghai', u'(UTC + 8:00) Hong Kong', u'(UTC + 8:00) Irkutsk', u'(UTC + 8:00) Perth', u'(UTC + 8:00) Singapore', u'(UTC + 8:00) Taipei', u'(UTC + 9:00) Osaka, Sapporo, Tokyo', u'(UTC + 9:00) Seoul', u'(UTC + 9:00) Yakutsk', u'(UTC + 9:30) Adelaide', u'(UTC + 9:30) Darwin', u'(UTC + 10:00) Brisbane', u'(UTC + 10:00) Canberra, Sydney', u'(UTC + 10:00) Melbourne, Victoria', u'(UTC + 10:00) Guam', u'(UTC + 10:00) Hobart', u'(UTC + 10:00) Vladivostok', u'(UTC + 11:00) Solomon Islands', u'(UTC + 11:00) Magadan', u'(UTC + 12:00) Anadyr', u'(UTC + 12:00) Auckland', u'(UTC + 12:00) Fiji', u'(UTC + 12:00) Marshall Islands']"
                  }, 
                  "name": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "disable": {
                    "type": "string", 
                    "example": "bool"
                  }, 
                  "admin_groups": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "extattrs": {
                    "type": "string", 
                    "example": "extattr"
                  }, 
                  "password": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "email": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "ca_certificate_issuer": {
                    "type": "string", 
                    "example": "string"
                  }
                }
              }
            }
          }, 
          "required": true, 
          "description": "Enter the request body here"
        }, 
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/adminuser"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }
        ], 
        "tags": [
          "adminuser"
        ]
      }, 
      "get": {
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/adminuser"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields", 
            "required": false, 
            "name": "_return_fields+", 
            "in": "query"
          }, 
          {
            "schema": {
              "minimum": 1, 
              "type": "integer"
            }, 
            "description": "Enter the number of results to be fetched", 
            "required": false, 
            "name": "_max_results", 
            "in": "query"
          }, 
          {
            "schema": {
              "default": 0, 
              "enum": [
                0, 
                1
              ], 
              "type": "integer"
            }, 
            "description": "Select 1 if result is required as a object", 
            "required": false, 
            "name": "_return_as_object", 
            "in": "query"
          }, 
          {
            "schema": {
              "default": 0, 
              "enum": [
                0, 
                1
              ], 
              "type": "integer"
            }, 
            "description": "Select 1 if paging is required. If SET, _max_results and _return_as_object must be entered.", 
            "required": false, 
            "name": "_paging", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the page ID for fetching next page", 
            "required": false, 
            "name": " _page_id", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the value of the field", 
            "required": false, 
            "name": "admin_groups", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the value of the field", 
            "required": false, 
            "name": "ca_certificate_issuer", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the value of the field", 
            "required": false, 
            "name": "client_certificate_serial_number", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the value of the field", 
            "required": false, 
            "name": "comment", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the value of the field", 
            "required": false, 
            "name": "name", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the value of the field", 
            "required": false, 
            "name": "status", 
            "in": "query"
          }
        ], 
        "tags": [
          "adminuser"
        ]
      }
    }, 
    "/wapi/v2.12/userprofile/{userprofile_reference}": {
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userprofile"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string", 
              "example": "resourceID:resourceName"
            }, 
            "description": "Enter the reference for userprofile", 
            "required": true, 
            "name": "userprofile_reference", 
            "in": "path"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }
        ], 
        "tags": [
          "userprofile"
        ], 
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object", 
                "properties": {
                  "password": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "global_search_on_ni_data": {
                    "type": "string", 
                    "example": "bool"
                  }, 
                  "use_time_zone": {
                    "type": "string", 
                    "example": "bool"
                  }, 
                  "max_count_widgets": {
                    "type": "string", 
                    "example": "uint"
                  }, 
                  "lb_tree_nodes_at_gen_level": {
                    "type": "string", 
                    "example": "uint"
                  }, 
                  "active_dashboard_type": {
                    "type": "string", 
                    "example": "[u'INFO', u'TASK']"
                  }, 
                  "global_search_on_ea": {
                    "type": "string", 
                    "example": "bool"
                  }, 
                  "time_zone": {
                    "type": "string", 
                    "example": "[u'(UTC - 12:00)', u'(UTC - 11:00) Midway Island, Samoa', u'(UTC - 10:00) Hawaii', u'(UTC - 9:00) Alaska', u'(UTC - 8:00) Pacific Time (US and Canada), Tijuana', u'(UTC - 7:00) Arizona', u'(UTC - 7:00) Mountain Time (US and Canada)', u'(UTC - 6:00) Central Time (US and Canada)', u'(UTC - 6:00) Mexico City, Tegucigalpa', u'(UTC - 6:00) Saskatchewan', u'(UTC - 5:00) Bogota, Lima, Quito', u'(UTC - 5:00) Eastern Time (US and Canada)', u'(UTC - 5:00) Indiana (East)', u'(UTC - 4:00) Caracas', u'(UTC - 4:00) Atlantic Time (Canada)', u'(UTC - 4:00) Santiago', u'(UTC - 3:30) Newfoundland', u'(UTC - 3:00) Brasilia', u'(UTC - 3:00) Buenos Aires', u'(UTC - 2:00) Mid-Atlantic', u'(UTC - 1:00) Azores', u'(UTC) Coordinated Universal Time', u'(UTC) Dublin', u'(UTC) Lisbon', u'(UTC) London', u'(UTC + 1:00) Casablanca', u'(UTC + 1:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna', u'(UTC + 1:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague', u'(UTC + 1:00) Brussels, Copenhagen, Madrid, Paris', u'(UTC + 1:00) Sarajevo, Skopje, Sofija, Warsaw, Zagreb', u'(UTC + 2:00) Athens, Vilnius', u'(UTC + 2:00) Bucharest', u'(UTC + 2:00) Cairo', u'(UTC + 2:00) Harare', u'(UTC + 2:00) Helsinki', u'(UTC + 2:00) Jerusalem', u'(UTC + 2:00) Kaliningrad', u'(UTC + 3:00) Baghdad, Istanbul, Kuwait, Minsk, Riyadh', u'(UTC + 3:00) Moscow, St. Petersburg, Volgograd', u'(UTC + 3:00) Nairobi', u'(UTC + 3:30) Tehran', u'(UTC + 4:00) Dubai', u'(UTC + 4:00) Baku', u'(UTC + 4:00) Samara', u'(UTC + 4:30) Kabul', u'(UTC + 5:00) Ekaterinburg', u'(UTC + 5:00) Islamabad, Karachi', u'(UTC + 5:30) Bombay, Calcutta, Madras, New Delhi', u'(UTC + 5:30) Colombo', u'(UTC + 6:00) Dhaka', u'(UTC + 6:00) Omsk', u'(UTC + 6:30) Rangoon', u'(UTC + 7:00) Bangkok, Hanoi', u'(UTC + 7:00) Krasnoyarsk', u'(UTC + 8:00) Beijing, Chongqing, Shanghai', u'(UTC + 8:00) Hong Kong', u'(UTC + 8:00) Irkutsk', u'(UTC + 8:00) Perth', u'(UTC + 8:00) Singapore', u'(UTC + 8:00) Taipei', u'(UTC + 9:00) Osaka, Sapporo, Tokyo', u'(UTC + 9:00) Seoul', u'(UTC + 9:00) Yakutsk', u'(UTC + 9:30) Adelaide', u'(UTC + 9:30) Darwin', u'(UTC + 10:00) Brisbane', u'(UTC + 10:00) Canberra, Sydney', u'(UTC + 10:00) Melbourne, Victoria', u'(UTC + 10:00) Guam', u'(UTC + 10:00) Hobart', u'(UTC + 10:00) Vladivostok', u'(UTC + 11:00) Solomon Islands', u'(UTC + 11:00) Magadan', u'(UTC + 12:00) Anadyr', u'(UTC + 12:00) Auckland', u'(UTC + 12:00) Fiji', u'(UTC + 12:00) Marshall Islands']"
                  }, 
                  "table_size": {
                    "type": "string", 
                    "example": "uint"
                  }, 
                  "old_password": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "lb_tree_nodes_at_last_level": {
                    "type": "string", 
                    "example": "uint"
                  }, 
                  "email": {
                    "type": "string", 
                    "example": "string"
                  }
                }
              }
            }
          }, 
          "required": true, 
          "description": "Enter the request body here"
        }, 
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "description": "Update the userprofile resource"
      }, 
      "get": {
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userprofile"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string", 
              "example": "resourceID:resourceName"
            }, 
            "description": "Enter the reference for userprofile", 
            "required": true, 
            "name": "userprofile_reference", 
            "in": "path"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields", 
            "required": false, 
            "name": "_return_fields+", 
            "in": "query"
          }, 
          {
            "schema": {
              "default": 0, 
              "enum": [
                0, 
                1
              ], 
              "type": "integer"
            }, 
            "description": "Select 1 if result is required as a object", 
            "required": false, 
            "name": "_return_as_object", 
            "in": "query"
          }
        ], 
        "tags": [
          "userprofile"
        ]
      }
    }, 
    "/wapi/v2.12/approvalworkflow/{approvalworkflow_reference}": {
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/approvalworkflow"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string", 
              "example": "resourceID:resourceName"
            }, 
            "description": "Enter the reference for approvalworkflow", 
            "required": true, 
            "name": "approvalworkflow_reference", 
            "in": "path"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }
        ], 
        "tags": [
          "approvalworkflow"
        ], 
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object", 
                "properties": {
                  "enable_rejected_notify": {
                    "type": "string", 
                    "example": "bool"
                  }, 
                  "enable_notify_user": {
                    "type": "string", 
                    "example": "bool"
                  }, 
                  "rejected_notify_to": {
                    "type": "string", 
                    "example": "[u'SUBMITTER', u'APPROVER', u'BOTH']"
                  }, 
                  "failed_notify_to": {
                    "type": "string", 
                    "example": "[u'SUBMITTER', u'APPROVER', u'BOTH']"
                  }, 
                  "enable_approval_notify": {
                    "type": "string", 
                    "example": "bool"
                  }, 
                  "succeeded_notify_to": {
                    "type": "string", 
                    "example": "[u'SUBMITTER', u'APPROVER', u'BOTH']"
                  }, 
                  "approved_notify_to": {
                    "type": "string", 
                    "example": "[u'SUBMITTER', u'APPROVER', u'BOTH']"
                  }, 
                  "enable_rescheduled_notify": {
                    "type": "string", 
                    "example": "bool"
                  }, 
                  "approval_group": {
                    "type": "string", 
                    "example": "string"
                  }, 
                  "enable_notify_group": {
                    "type": "string", 
                    "example": "bool"
                  }, 
                  "enable_approved_notify": {
                    "type": "string", 
                    "example": "bool"
                  }, 
                  "enable_succeeded_notify": {
                    "type": "string", 
                    "example": "bool"
                  }, 
                  "extattrs": {
                    "type": "string", 
                    "example": "extattr"
                  }, 
                  "ticket_number": {
                    "type": "string", 
                    "example": "[u'UNUSED', u'OPTIONAL', u'REQUIRED']"
                  }, 
                  "submitter_comment": {
                    "type": "string", 
                    "example": "[u'UNUSED', u'OPTIONAL', u'REQUIRED']"
                  }, 
                  "approval_notify_to": {
                    "type": "string", 
                    "example": "[u'SUBMITTER', u'APPROVER', u'BOTH']"
                  }, 
                  "enable_failed_notify": {
                    "type": "string", 
                    "example": "bool"
                  }, 
                  "rescheduled_notify_to": {
                    "type": "string", 
                    "example": "[u'SUBMITTER', u'APPROVER', u'BOTH']"
                  }, 
                  "approver_comment": {
                    "type": "string", 
                    "example": "[u'UNUSED', u'OPTIONAL', u'REQUIRED']"
                  }
                }
              }
            }
          }, 
          "required": true, 
          "description": "Enter the request body here"
        }, 
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "description": "Update the approvalworkflow resource"
      }, 
      "delete": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object", 
                  "properties": {
                    "$ref": {
                      "type": "string", 
                      "description": "Reference of the deleted string"
                    }
                  }
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "description": "Delete the approvalworkflow resource", 
        "parameters": [
          {
            "schema": {
              "type": "string", 
              "example": "resourceID:resourceName"
            }, 
            "description": "Enter the reference for approvalworkflow", 
            "required": true, 
            "name": "approvalworkflow_reference", 
            "in": "path"
          }
        ], 
        "tags": [
          "approvalworkflow"
        ]
      }, 
      "get": {
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/approvalworkflow"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string", 
              "example": "resourceID:resourceName"
            }, 
            "description": "Enter the reference for approvalworkflow", 
            "required": true, 
            "name": "approvalworkflow_reference", 
            "in": "path"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields", 
            "required": false, 
            "name": "_return_fields+", 
            "in": "query"
          }, 
          {
            "schema": {
              "default": 0, 
              "enum": [
                0, 
                1
              ], 
              "type": "integer"
            }, 
            "description": "Select 1 if result is required as a object", 
            "required": false, 
            "name": "_return_as_object", 
            "in": "query"
          }
        ], 
        "tags": [
          "approvalworkflow"
        ]
      }
    }, 
    "/wapi/v2.12/localuser:authservice": {
      "get": {
        "security": [
          {
            "basicAuth": []
          }
        ], 
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/localuser_authservice"
                }
              }
            }, 
            "description": "OK"
          }
        }, 
        "parameters": [
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma", 
            "required": false, 
            "name": "_return_fields", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields", 
            "required": false, 
            "name": "_return_fields+", 
            "in": "query"
          }, 
          {
            "schema": {
              "minimum": 1, 
              "type": "integer"
            }, 
            "description": "Enter the number of results to be fetched", 
            "required": false, 
            "name": "_max_results", 
            "in": "query"
          }, 
          {
            "schema": {
              "default": 0, 
              "enum": [
                0, 
                1
              ], 
              "type": "integer"
            }, 
            "description": "Select 1 if result is required as a object", 
            "required": false, 
            "name": "_return_as_object", 
            "in": "query"
          }, 
          {
            "schema": {
              "default": 0, 
              "enum": [
                0, 
                1
              ], 
              "type": "integer"
            }, 
            "description": "Select 1 if paging is required. If SET, _max_results and _return_as_object must be entered.", 
            "required": false, 
            "name": "_paging", 
            "in": "query"
          }, 
          {
            "schema": {
              "type": "string"
            }, 
            "description": "Enter the page ID for fetching next page", 
            "required": false, 
            "name": " _page_id", 
            "in": "query"
          }
        ], 
        "tags": [
          "localuser:authservice"
        ]
      }
    }
  }, 
  "components": {
    "securitySchemes": {
      "basicAuth": {
        "scheme": "basic", 
        "type": "http"
      }
    }, 
    "schemas": {
      "admingroup": {
        "type": "object", 
        "properties": {
          "comment": {
            "type": "string", 
            "description": "Comment for the Admin Group; maximum 256 characters."
          }, 
          "superuser": {
            "type": "boolean", 
            "example": "boolean", 
            "description": "Determines whether this Admin Group is a superuser group. A superuser group can perform all operations on the appliance, and can view and configure all types of data."
          }, 
          "admin_set_commands": {
            "enum": [
              "admingroup:adminsetcommands"
            ], 
            "type": "string", 
            "description": "Admin set commands for the admin command group."
          }, 
          "docker_show_commands": {
            "enum": [
              "admingroup:dockershowcommands"
            ], 
            "type": "string", 
            "description": "Docker show commands for the dcoker command group."
          }, 
          "inactivity_lockout_setting": {
            "enum": [
              "setting:inactivelockout"
            ], 
            "type": "string", 
            "description": "The Admin group inactivity lockout settings."
          }, 
          "cloud_set_commands": {
            "enum": [
              "admingroup:cloudsetcommands"
            ], 
            "type": "string", 
            "description": "Cloud set commands for the cloud command group."
          }, 
          "disable_concurrent_login": {
            "type": "boolean", 
            "example": "boolean", 
            "description": "Disable concurrent login feature"
          }, 
          "grid_show_commands": {
            "enum": [
              "admingroup:gridshowcommands"
            ], 
            "type": "string", 
            "description": "Show commands for the grid command group."
          }, 
          "dns_show_commands": {
            "enum": [
              "admingroup:dnsshowcommands"
            ], 
            "type": "string", 
            "description": "Dns show commands for the dns command group."
          }, 
          "licensing_set_commands": {
            "enum": [
              "admingroup:licensingsetcommands"
            ], 
            "type": "string", 
            "description": "Set commands for the licensing command group."
          }, 
          "use_disable_concurrent_login": {
            "type": "boolean", 
            "example": "boolean", 
            "description": "Whether to override grid concurrent login"
          }, 
          "database_show_commands": {
            "enum": [
              "admingroup:databaseshowcommands"
            ], 
            "type": "string", 
            "description": "Database show commands for the database command"
          }, 
          "use_account_inactivity_lockout_enable": {
            "type": "boolean", 
            "example": "boolean", 
            "description": "This is the use flag for account inactivity lockout settings."
          }, 
          "licensing_show_commands": {
            "enum": [
              "admingroup:licensingshowcommands"
            ], 
            "type": "string", 
            "description": "Show commands for the licensing command group."
          }, 
          "use_password_setting": {
            "type": "boolean", 
            "example": "boolean", 
            "description": "Whether grid password expiry setting should be override."
          }, 
          "admin_show_commands": {
            "enum": [
              "admingroup:adminshowcommands"
            ], 
            "type": "string", 
            "description": "Admin show commands for the admin command group."
          }, 
          "use_lockout_setting": {
            "type": "boolean", 
            "example": "boolean", 
            "description": "Whether to override grid sequential lockout setting"
          }, 
          "trouble_shooting_toplevel_commands": {
            "enum": [
              "admingroup:troubleshootingtoplevelcommands"
            ], 
            "type": "string", 
            "description": "Toplevel commands for the troubleshooting command group."
          }, 
          "lockout_setting": {
            "enum": [
              "admingroup:lockoutsetting"
            ], 
            "type": "string", 
            "description": "This struct specifies security policy settings in admin group."
          }, 
          "access_method": {
            "enum": [
              "GUI", 
              "API", 
              "TAXII", 
              "CLOUD_API", 
              "CLI"
            ], 
            "type": "string", 
            "description": "Access methods specify whether an admin group can use the GUI and the API to access the appliance or to send Taxii messages to the appliance. Note that API includes both the Perl API and RESTful API."
          }, 
          "dhcp_show_commands": {
            "enum": [
              "admingroup:dhcpshowcommands"
            ], 
            "type": "string", 
            "description": "Dhcp show commands for the dhcp command group."
          }, 
          "email_addresses": {
            "type": "string", 
            "description": "The e-mail addresses for the Admin Group."
          }, 
          "security_set_commands": {
            "enum": [
              "admingroup:securitysetcommands"
            ], 
            "type": "string", 
            "description": "Set commands for the security command group."
          }, 
          "dns_toplevel_commands": {
            "enum": [
              "admingroup:dnstoplevelcommands"
            ], 
            "type": "string", 
            "description": "Dns toplevel commands for the dns command group."
          }, 
          "admin_toplevel_commands": {
            "enum": [
              "admingroup:admintoplevelcommands"
            ], 
            "type": "string", 
            "description": "Admin_toplevel commands for the admin command group"
          }, 
          "password_setting": {
            "enum": [
              "admingroup:passwordsetting"
            ], 
            "type": "string", 
            "description": "The Admin Group password settings."
          }, 
          "extattrs": {
            "enum": [
              "extattr"
            ], 
            "type": "string", 
            "description": "Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}."
          }, 
          "saml_setting": {
            "enum": [
              "admingroup:samlsetting"
            ], 
            "type": "string", 
            "description": "The Admin Group SAML settings."
          }, 
          "networking_show_commands": {
            "enum": [
              "admingroup:networkingshowcommands"
            ], 
            "type": "string", 
            "description": "Show commands for the networking command group."
          }, 
          "disable": {
            "type": "boolean", 
            "example": "boolean", 
            "description": "Determines whether the Admin Group is disabled or not. When this is set to False, the Admin Group is enabled."
          }, 
          "security_show_commands": {
            "enum": [
              "admingroup:securityshowcommands"
            ], 
            "type": "string", 
            "description": "Show commands for the security command group."
          }, 
          "grid_set_commands": {
            "enum": [
              "admingroup:gridsetcommands"
            ], 
            "type": "string", 
            "description": "Grid set commands for the grid command group."
          }, 
          "machine_control_toplevel_commands": {
            "enum": [
              "admingroup:machinecontroltoplevelcommands"
            ], 
            "type": "string", 
            "description": "Machine control toplevel commands for the machine control command group."
          }, 
          "name": {
            "type": "string", 
            "description": "The name of the Admin Group."
          }, 
          "roles": {
            "type": "string", 
            "description": "The names of roles this Admin Group applies to."
          }, 
          "user_access": {
            "enum": [
              "addressac"
            ], 
            "type": "string", 
            "description": "The access control items for this Admin Group."
          }, 
          "networking_set_commands": {
            "enum": [
              "admingroup:networkingsetcommands"
            ], 
            "type": "string", 
            "description": "Set commands for the networking command group."
          }, 
          "dhcp_set_commands": {
            "enum": [
              "admingroup:dhcpsetcommands"
            ], 
            "type": "string", 
            "description": "Dhcp set commands for the dhcp command group."
          }, 
          "docker_set_commands": {
            "enum": [
              "admingroup:dockersetcommands"
            ], 
            "type": "string", 
            "description": "Docker set commands for the dcoker command group."
          }, 
          "enable_restricted_user_access": {
            "type": "boolean", 
            "example": "boolean", 
            "description": "Determines whether the restrictions will be applied to the admin connector level for users of this Admin Group."
          }, 
          "database_set_commands": {
            "enum": [
              "admingroup:databasesetcommands"
            ], 
            "type": "string", 
            "description": "Database set commands for database admin group."
          }, 
          "dns_set_commands": {
            "enum": [
              "admingroup:dnssetcommands"
            ], 
            "type": "string", 
            "description": "Dns set commands for the dns command group."
          }
        }
      }, 
      "tacacsplus_authservice": {
        "type": "object", 
        "properties": {
          "comment": {
            "type": "string", 
            "description": "The TACACS+ authentication service descriptive comment."
          }, 
          "acct_retries": {
            "type": "integer", 
            "example": "integer", 
            "description": "The number of the accounting retries before giving up and moving on to the next server."
          }, 
          "name": {
            "type": "string", 
            "description": "The TACACS+ authentication service name."
          }, 
          "auth_timeout": {
            "type": "integer", 
            "example": "integer", 
            "description": "The authentication/authorization timeout period in milliseconds."
          }, 
          "servers": {
            "enum": [
              "tacacsplus:server"
            ], 
            "type": "string", 
            "description": "The list of the TACACS+ servers used for authentication."
          }, 
          "disable": {
            "type": "boolean", 
            "example": "boolean", 
            "description": "Determines whether the TACACS+ authentication service object is disabled."
          }, 
          "acct_timeout": {
            "type": "integer", 
            "example": "integer", 
            "description": "The accounting retry period in milliseconds."
          }, 
          "auth_retries": {
            "type": "integer", 
            "example": "integer", 
            "description": "The number of the authentication/authorization retries before giving up and moving on to the next server."
          }
        }
      }, 
      "ftpuser": {
        "type": "object", 
        "properties": {
          "username": {
            "type": "string", 
            "description": "The FTP user name."
          }, 
          "permission": {
            "enum": [
              "RO", 
              "RW"
            ], 
            "type": "string", 
            "description": "The FTP user permission."
          }, 
          "home_dir": {
            "type": "string", 
            "description": "The absolute path of the FTP user's home directory."
          }, 
          "extattrs": {
            "enum": [
              "extattr"
            ], 
            "type": "string", 
            "description": "Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}."
          }, 
          "password": {
            "type": "string", 
            "description": "The FTP user password."
          }, 
          "create_home_dir": {
            "type": "boolean", 
            "example": "boolean", 
            "description": "Determines whether to create the home directory with the user name or to use the existing directory as the home directory."
          }
        }
      }, 
      "adminuser": {
        "type": "object", 
        "properties": {
          "auth_type": {
            "enum": [
              "LOCAL", 
              "RADIUS", 
              "REMOTE", 
              "SAML", 
              "SAML_LOCAL"
            ], 
            "type": "string", 
            "description": "The authentication type for the admin user."
          }, 
          "comment": {
            "type": "string", 
            "description": "Comment for the admin user; maximum 256 characters."
          }, 
          "enable_certificate_authentication": {
            "type": "boolean", 
            "example": "boolean", 
            "description": "Determines whether the user is allowed to log in only with the certificate. Regular username/password authentication will be disabled for this user."
          }, 
          "use_time_zone": {
            "type": "boolean", 
            "example": "boolean", 
            "description": "Use flag for: time_zone"
          }, 
          "client_certificate_serial_number": {
            "type": "string", 
            "description": "The serial number of the client certificate."
          }, 
          "time_zone": {
            "enum": [
              "(UTC - 12:00)", 
              "(UTC - 11:00) Midway Island, Samoa", 
              "(UTC - 10:00) Hawaii", 
              "(UTC - 9:00) Alaska", 
              "(UTC - 8:00) Pacific Time (US and Canada), Tijuana", 
              "(UTC - 7:00) Arizona", 
              "(UTC - 7:00) Mountain Time (US and Canada)", 
              "(UTC - 6:00) Central Time (US and Canada)", 
              "(UTC - 6:00) Mexico City, Tegucigalpa", 
              "(UTC - 6:00) Saskatchewan", 
              "(UTC - 5:00) Bogota, Lima, Quito", 
              "(UTC - 5:00) Eastern Time (US and Canada)", 
              "(UTC - 5:00) Indiana (East)", 
              "(UTC - 4:00) Caracas", 
              "(UTC - 4:00) Atlantic Time (Canada)", 
              "(UTC - 4:00) Santiago", 
              "(UTC - 3:30) Newfoundland", 
              "(UTC - 3:00) Brasilia", 
              "(UTC - 3:00) Buenos Aires", 
              "(UTC - 2:00) Mid-Atlantic", 
              "(UTC - 1:00) Azores", 
              "(UTC) Coordinated Universal Time", 
              "(UTC) Dublin", 
              "(UTC) Lisbon", 
              "(UTC) London", 
              "(UTC + 1:00) Casablanca", 
              "(UTC + 1:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna", 
              "(UTC + 1:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague", 
              "(UTC + 1:00) Brussels, Copenhagen, Madrid, Paris", 
              "(UTC + 1:00) Sarajevo, Skopje, Sofija, Warsaw, Zagreb", 
              "(UTC + 2:00) Athens, Vilnius", 
              "(UTC + 2:00) Bucharest", 
              "(UTC + 2:00) Cairo", 
              "(UTC + 2:00) Harare", 
              "(UTC + 2:00) Helsinki", 
              "(UTC + 2:00) Jerusalem", 
              "(UTC + 2:00) Kaliningrad", 
              "(UTC + 3:00) Baghdad, Istanbul, Kuwait, Minsk, Riyadh", 
              "(UTC + 3:00) Moscow, St. Petersburg, Volgograd", 
              "(UTC + 3:00) Nairobi", 
              "(UTC + 3:30) Tehran", 
              "(UTC + 4:00) Dubai", 
              "(UTC + 4:00) Baku", 
              "(UTC + 4:00) Samara", 
              "(UTC + 4:30) Kabul", 
              "(UTC + 5:00) Ekaterinburg", 
              "(UTC + 5:00) Islamabad, Karachi", 
              "(UTC + 5:30) Bombay, Calcutta, Madras, New Delhi", 
              "(UTC + 5:30) Colombo", 
              "(UTC + 6:00) Dhaka", 
              "(UTC + 6:00) Omsk", 
              "(UTC + 6:30) Rangoon", 
              "(UTC + 7:00) Bangkok, Hanoi", 
              "(UTC + 7:00) Krasnoyarsk", 
              "(UTC + 8:00) Beijing, Chongqing, Shanghai", 
              "(UTC + 8:00) Hong Kong", 
              "(UTC + 8:00) Irkutsk", 
              "(UTC + 8:00) Perth", 
              "(UTC + 8:00) Singapore", 
              "(UTC + 8:00) Taipei", 
              "(UTC + 9:00) Osaka, Sapporo, Tokyo", 
              "(UTC + 9:00) Seoul", 
              "(UTC + 9:00) Yakutsk", 
              "(UTC + 9:30) Adelaide", 
              "(UTC + 9:30) Darwin", 
              "(UTC + 10:00) Brisbane", 
              "(UTC + 10:00) Canberra, Sydney", 
              "(UTC + 10:00) Melbourne, Victoria", 
              "(UTC + 10:00) Guam", 
              "(UTC + 10:00) Hobart", 
              "(UTC + 10:00) Vladivostok", 
              "(UTC + 11:00) Solomon Islands", 
              "(UTC + 11:00) Magadan", 
              "(UTC + 12:00) Anadyr", 
              "(UTC + 12:00) Auckland", 
              "(UTC + 12:00) Fiji", 
              "(UTC + 12:00) Marshall Islands"
            ], 
            "type": "string", 
            "description": "The time zone for this admin user."
          }, 
          "name": {
            "type": "string", 
            "description": "The name of the admin user."
          }, 
          "status": {
            "enum": [
              "ACTIVE", 
              "INACTIVE", 
              "LOCKED", 
              "DISABLED"
            ], 
            "type": "string", 
            "description": "Status of the user account."
          }, 
          "disable": {
            "type": "boolean", 
            "example": "boolean", 
            "description": "Determines whether the admin user is disabled or not. When this is set to False, the admin user is enabled."
          }, 
          "admin_groups": {
            "type": "string", 
            "description": "The names of the Admin Groups to which this Admin User belongs. Currently, this is limited to only one Admin Group."
          }, 
          "extattrs": {
            "enum": [
              "extattr"
            ], 
            "type": "string", 
            "description": "Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}."
          }, 
          "password": {
            "type": "string", 
            "description": "The password for the administrator to use when logging in."
          }, 
          "email": {
            "type": "string", 
            "description": "The e-mail address for the admin user."
          }, 
          "ca_certificate_issuer": {
            "type": "string", 
            "description": "The CA certificate that is used for user lookup during authentication."
          }
        }
      }, 
      "permission": {
        "type": "object", 
        "properties": {
          "role": {
            "type": "string", 
            "description": "The name of the role this permission applies to."
          }, 
          "object": {
            "type": "string", 
            "description": "A reference to a WAPI object, which will be the object this permission applies to."
          }, 
          "group": {
            "type": "string", 
            "description": "The name of the admin group this permission applies to."
          }, 
          "resource_type": {
            "enum": [
              "SUPER_HOST", 
              "VLAN_VIEW", 
              "Unknown", 
              "IDNS_MONITOR", 
              "AAAA", 
              "SCHEDULE_TASK", 
              "GRID_DHCP_PROPERTIES", 
              "IDNS_GEO_IP", 
              "BULKHOST", 
              "DHCP_FINGERPRINT", 
              "IDNS_LBDN_RECORD", 
              "SG_IPV6_NETWORK", 
              "MSSERVER", 
              "VLAN_OBJECTS", 
              "IDNS_LBDN", 
              "GRID_AAA_PROPERTIES", 
              "NAPTR", 
              "SUB_GRID", 
              "IPV6_NETWORK_TEMPLATE", 
              "IMC_PROPERTIES", 
              "FIXED_ADDRESS_TEMPLATE", 
              "NETWORK_DISCOVERY", 
              "SHARED_NETWORK", 
              "IDNS_CERTIFICATE", 
              "DATACOLLECTOR_CLUSTER", 
              "FIREEYE_PUBLISH_ALERT", 
              "CLUSTER", 
              "OPTION_SPACE", 
              "RESTART_SERVICE", 
              "SHARED_SRV", 
              "IPV6_DHCP_LEASE_HISTORY", 
              "VIEW", 
              "IPV6_RANGE", 
              "CNAME", 
              "IPV6_NETWORK", 
              "SHARED_AAAA", 
              "DASHBOARD_TASK", 
              "FIXED_ADDRESS", 
              "NETWORK_CONTAINER", 
              "SG_IPV4_NETWORK", 
              "DNAME", 
              "IPV6_SHARED_NETWORK", 
              "PTR", 
              "GRID_ANALYTICS_PROPERTIES", 
              "TLSA", 
              "CA_CERTIFICATE", 
              "RANGE", 
              "RULESET", 
              "AAA_EXTERNAL_SERVICE", 
              "HSM_GROUP", 
              "HOST_ADDRESS", 
              "IDNS_TOPOLOGY", 
              "SHARED_A", 
              "DELETED_OBJS_INFO_TRACKING", 
              "SHARED_TXT", 
              "DHCP_LEASE_HISTORY", 
              "MEMBER_DHCP_PROPERTIES", 
              "SUB_GRID_NETWORK_VIEW_PARENT", 
              "IMC_SITE", 
              "KERBEROS_KEY", 
              "MEMBER_SECURITY_PROPERTIES", 
              "IPV6_HOST_ADDRESS", 
              "IMC_AVP", 
              "MEMBER", 
              "IPV6_NETWORK_CONTAINER", 
              "VLAN_RANGE", 
              "RESPONSE_POLICY_ZONE", 
              "FILE_DIST_DIRECTORY", 
              "RESPONSE_POLICY_RULE", 
              "MS_SUPERSCOPE", 
              "HOST", 
              "SRV", 
              "IDNS_POOL", 
              "PORT_CONTROL", 
              "TENANT", 
              "IDNS_SERVER", 
              "OCSP_SERVICE", 
              "MEMBER_DNS_PROPERTIES", 
              "NETWORK_TEMPLATE", 
              "TEMPLATE", 
              "SHARED_RECORD_GROUP", 
              "CSV_IMPORT_TASK", 
              "IPV6_TEMPLATE", 
              "NETWORK", 
              "NETWORK_VIEW", 
              "IPV6_FIXED_ADDRESS", 
              "GRID_REPORTING_PROPERTIES", 
              "CAA", 
              "GRID_DNS_PROPERTIES", 
              "IPV6_FIXED_ADDRESS_TEMPLATE", 
              "REPORTING_DASHBOARD", 
              "ROAMING_HOST", 
              "ADD_A_RR_WITH_EMPTY_HOSTNAME", 
              "DHCP_MAC_FILTER", 
              "GRID_FILE_DIST_PROPERTIES", 
              "TXT", 
              "IPV6_RANGE_TEMPLATE", 
              "RANGE_TEMPLATE", 
              "DEFINED_ACL", 
              "A", 
              "SHARED_CNAME", 
              "BFD_TEMPLATE", 
              "GRID_SECURITY_PROPERTIES", 
              "MS_ADSITES_DOMAIN", 
              "SAML_AUTH_SERVICE", 
              "SHARED_MX", 
              "ALIAS", 
              "DEVICE", 
              "SG_NETWORK_VIEW", 
              "DNS64_SYNTHESIS_GROUP", 
              "ZONE", 
              "REPORTING_SEARCH", 
              "RECLAMATION", 
              "MX", 
              "MEMBER_CLOUD", 
              "MEMBER_ANALYTICS_PROPERTIES", 
              "RESTORABLE_OPERATION", 
              "MEMBER_FILE_DIST_PROPERTIES"
            ], 
            "type": "string", 
            "description": "The type of resource this permission applies to. If 'object' is set, the permission is going to apply to child objects of the specified type, for example if 'object' was set to an authoritative zone reference and 'resource_type' was set to 'A', the permission would apply to A Resource Records within the specified zone."
          }, 
          "permission": {
            "enum": [
              "DENY", 
              "READ", 
              "WRITE"
            ], 
            "type": "string", 
            "description": "The type of permission."
          }
        }
      }, 
      "networkuser": {
        "type": "object", 
        "properties": {
          "user_status": {
            "enum": [
              "ACTIVE", 
              "LOGOUT", 
              "TIMEOUT"
            ], 
            "type": "string", 
            "description": "The status of the Network User."
          }, 
          "data_source": {
            "type": "string", 
            "description": "The Network User data source."
          }, 
          "name": {
            "type": "string", 
            "description": "The name of the Network User."
          }, 
          "network_view": {
            "type": "string", 
            "description": "The name of the network view in which this Network User resides."
          }, 
          "domainname": {
            "type": "string", 
            "description": "The domain name of the Network User."
          }, 
          "address_object": {
            "type": "string", 
            "description": "The reference of the IPAM IPv4Address or IPv6Address object describing the address of the Network User."
          }, 
          "data_source_ip": {
            "type": "string", 
            "description": "The Network User data source IPv4 Address or IPv6 Address or FQDN address."
          }, 
          "first_seen_time": {
            "enum": [
              "timestamp"
            ], 
            "type": "string", 
            "description": "The first seen timestamp of the Network User."
          }, 
          "last_seen_time": {
            "enum": [
              "timestamp"
            ], 
            "type": "string", 
            "description": "The last seen timestamp of the Network User."
          }, 
          "last_updated_time": {
            "enum": [
              "timestamp"
            ], 
            "type": "string", 
            "description": "The last updated timestamp of the Network User."
          }, 
          "logout_time": {
            "enum": [
              "timestamp"
            ], 
            "type": "string", 
            "description": "The logout timestamp of the Network User."
          }, 
          "logon_id": {
            "type": "string", 
            "description": "The logon identifier of the Network User."
          }, 
          "address": {
            "type": "string", 
            "description": "The IPv4 Address or IPv6 Address of the Network User."
          }, 
          "guid": {
            "type": "string", 
            "description": "The group identifier of the Network User."
          }, 
          "network": {
            "type": "string", 
            "description": "The reference to the network to which the Network User belongs."
          }
        }
      }, 
      "bfdtemplate": {
        "type": "object", 
        "properties": {
          "min_rx_interval": {
            "type": "integer", 
            "example": "integer", 
            "description": "The minimum receive time (in seconds) for BFD protocol. Valid values are between 50 and 9999."
          }, 
          "authentication_key_id": {
            "type": "integer", 
            "example": "integer", 
            "description": "The authentication key identifier for BFD protocol authentication. Valid values are between 1 and 255."
          }, 
          "min_tx_interval": {
            "type": "integer", 
            "example": "integer", 
            "description": "The minimum transmission time (in seconds) for BFD protocol. Valid values are between 50 and 9999."
          }, 
          "authentication_type": {
            "enum": [
              "NONE", 
              "MD5", 
              "METICULOUS-MD5", 
              "SHA1", 
              "METICULOUS-SHA1"
            ], 
            "type": "string", 
            "description": "The authentication type for BFD protocol."
          }, 
          "detection_multiplier": {
            "type": "integer", 
            "example": "integer", 
            "description": "The detection time multiplier value for BFD protocol. The negotiated transmit interval, multiplied by this value, provides the detection time for the receiving system in asynchronous BFD mode. Valid values are between 3 and 50."
          }, 
          "authentication_key": {
            "type": "string", 
            "description": "The authentication key for BFD protocol message-digest authentication."
          }, 
          "name": {
            "type": "string", 
            "description": "The name of the BFD template object."
          }
        }
      }, 
      "radius_authservice": {
        "type": "object", 
        "properties": {
          "comment": {
            "type": "string", 
            "description": "The RADIUS descriptive comment."
          }, 
          "acct_retries": {
            "type": "integer", 
            "example": "integer", 
            "description": "The number of times to attempt to contact an accounting RADIUS server."
          }, 
          "name": {
            "type": "string", 
            "description": "The RADIUS authentication service name."
          }, 
          "auth_timeout": {
            "type": "integer", 
            "example": "integer", 
            "description": "The number of seconds to wait for a response from the RADIUS server."
          }, 
          "mode": {
            "enum": [
              "HUNT_GROUP", 
              "ROUND_ROBIN"
            ], 
            "type": "string", 
            "description": "The way to contact the RADIUS server."
          }, 
          "enable_cache": {
            "type": "boolean", 
            "example": "boolean", 
            "description": "Determines whether the authentication cache is enabled."
          }, 
          "disable": {
            "type": "boolean", 
            "example": "boolean", 
            "description": "Determines whether the RADIUS authentication service is disabled."
          }, 
          "acct_timeout": {
            "type": "integer", 
            "example": "integer", 
            "description": "The number of seconds to wait for a response from the RADIUS server."
          }, 
          "cache_ttl": {
            "type": "integer", 
            "example": "integer", 
            "description": "The TTL of cached authentication data in seconds."
          }, 
          "servers": {
            "enum": [
              "radius:server"
            ], 
            "type": "string", 
            "description": "The ordered list of RADIUS authentication servers."
          }, 
          "recovery_interval": {
            "type": "integer", 
            "example": "integer", 
            "description": "The time period to wait before retrying a server that has been marked as down."
          }, 
          "auth_retries": {
            "type": "integer", 
            "example": "integer", 
            "description": "The number of times to attempt to contact an authentication RADIUS server."
          }
        }
      }, 
      "ad_auth_service": {
        "type": "object", 
        "properties": {
          "comment": {
            "type": "string", 
            "description": "The descriptive comment for the AD authentication service."
          }, 
          "name": {
            "type": "string", 
            "description": "The AD authentication service name."
          }, 
          "additional_search_paths": {
            "type": "string", 
            "description": "The unordered list of additional search paths for nested group querying."
          }, 
          "domain_controllers": {
            "enum": [
              "ad_auth_server"
            ], 
            "type": "string", 
            "description": "The AD authentication server list."
          }, 
          "timeout": {
            "type": "integer", 
            "example": "integer", 
            "description": "The number of seconds that the appliance waits for a response from the AD server."
          }, 
          "disabled": {
            "type": "boolean", 
            "example": "boolean", 
            "description": "Determines if Active Directory Authentication Service is disabled."
          }, 
          "disable_default_search_path": {
            "type": "boolean", 
            "example": "boolean", 
            "description": "Determines whether the default search path for nested group querying is used."
          }, 
          "nested_group_querying": {
            "type": "boolean", 
            "example": "boolean", 
            "description": "Determines whether the nested group querying is enabled."
          }, 
          "ad_domain": {
            "type": "string", 
            "description": "The Active Directory domain to which this server belongs."
          }
        }
      }, 
      "snmpuser": {
        "type": "object", 
        "properties": {
          "comment": {
            "type": "string", 
            "description": "A descriptive comment for the SNMPv3 User."
          }, 
          "privacy_password": {
            "type": "string", 
            "description": "Determines a password for the privacy protocol."
          }, 
          "authentication_protocol": {
            "enum": [
              "NONE", 
              "MD5", 
              "SHA"
            ], 
            "type": "string", 
            "description": "The authentication protocol to be used for this user."
          }, 
          "name": {
            "type": "string", 
            "description": "The name of the user."
          }, 
          "disable": {
            "type": "boolean", 
            "example": "boolean", 
            "description": "Determines if SNMPv3 user is disabled or not."
          }, 
          "privacy_protocol": {
            "enum": [
              "NONE", 
              "DES", 
              "AES"
            ], 
            "type": "string", 
            "description": "The privacy protocol to be used for this user."
          }, 
          "authentication_password": {
            "type": "string", 
            "description": "Determines an authentication password for the user. This is a write-only attribute."
          }, 
          "extattrs": {
            "enum": [
              "extattr"
            ], 
            "type": "string", 
            "description": "Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}."
          }
        }
      }, 
      "localuser_authservice": {
        "type": "object", 
        "properties": {
          "comment": {
            "type": "string", 
            "description": "The local user authentication service comment."
          }, 
          "disabled": {
            "type": "boolean", 
            "example": "boolean", 
            "description": "Flag that indicates whether the local user authentication service is enabled or not."
          }, 
          "name": {
            "type": "string", 
            "description": "The name of the local user authentication service."
          }
        }
      }, 
      "certificate_authservice": {
        "type": "object", 
        "properties": {
          "comment": {
            "type": "string", 
            "description": "The descriptive comment for the certificate authentication service."
          }, 
          "remote_lookup_service": {
            "type": "string", 
            "description": "The service that will be used for remote lookup."
          }, 
          "ocsp_check": {
            "enum": [
              "MANUAL", 
              "AIA_ONLY", 
              "AIA_AND_MANUAL", 
              "DISABLED"
            ], 
            "type": "string", 
            "description": "Specifies the source of OCSP settings."
          }, 
          "name": {
            "type": "string", 
            "description": "The name of the certificate authentication service."
          }, 
          "response_timeout": {
            "type": "integer", 
            "example": "integer", 
            "description": "The validation timeout period in milliseconds."
          }, 
          "remote_lookup_password": {
            "type": "string", 
            "description": "The password for the service account."
          }, 
          "max_retries": {
            "type": "integer", 
            "example": "integer", 
            "description": "The number of validation attempts before the appliance contacts the next responder."
          }, 
          "trust_model": {
            "enum": [
              "DIRECT", 
              "DELEGATED"
            ], 
            "type": "string", 
            "description": "The OCSP trust model."
          }, 
          "disabled": {
            "type": "boolean", 
            "example": "boolean", 
            "description": "Determines if this certificate authentication service is enabled or disabled."
          }, 
          "enable_password_request": {
            "type": "boolean", 
            "example": "boolean", 
            "description": "Determines if username/password authentication together with client certificate authentication is enabled or disabled."
          }, 
          "enable_remote_lookup": {
            "type": "boolean", 
            "example": "boolean", 
            "description": "Determines if the lookup for user group membership information on remote services is enabled or disabled."
          }, 
          "auto_populate_login": {
            "enum": [
              "SERIAL_NUMBER", 
              "S_DN_CN", 
              "S_DN_EMAIL", 
              "SAN_UPN", 
              "SAN_EMAIL", 
              "AD_SUBJECT_ISSUER"
            ], 
            "type": "string", 
            "description": "Specifies the value of the client certificate for automatically populating the NIOS login name."
          }, 
          "remote_lookup_username": {
            "type": "string", 
            "description": "The username for the service account."
          }, 
          "ocsp_responders": {
            "enum": [
              "ocsp_responder"
            ], 
            "type": "string", 
            "description": "An ordered list of OCSP responders that are part of the certificate authentication service."
          }, 
          "recovery_interval": {
            "type": "integer", 
            "example": "integer", 
            "description": "The period of time the appliance waits before it attempts to contact a responder that is out of service again. The value must be between 1 and 600 seconds."
          }, 
          "ca_certificates": {
            "enum": [
              "cacertificate"
            ], 
            "type": "string", 
            "description": "The list of CA certificates."
          }, 
          "user_match_type": {
            "enum": [
              "DIRECT_MATCH", 
              "AUTO_MATCH"
            ], 
            "type": "string", 
            "description": "Specifies how to search for a user."
          }
        }
      }, 
      "adminrole": {
        "type": "object", 
        "properties": {
          "comment": {
            "type": "string", 
            "description": "The descriptive comment of the Admin Role object."
          }, 
          "disable": {
            "type": "boolean", 
            "example": "boolean", 
            "description": "The disable flag."
          }, 
          "name": {
            "type": "string", 
            "description": "The name of an admin role."
          }, 
          "extattrs": {
            "enum": [
              "extattr"
            ], 
            "type": "string", 
            "description": "Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}."
          }
        }
      }, 
      "saml_authservice": {
        "type": "object", 
        "properties": {
          "comment": {
            "type": "string", 
            "description": "The descriptive comment for the SAML authentication service."
          }, 
          "session_timeout": {
            "type": "integer", 
            "example": "integer", 
            "description": "The session timeout in seconds."
          }, 
          "name": {
            "type": "string", 
            "description": "The name of the SAML authentication service."
          }, 
          "idp": {
            "enum": [
              "saml:idp"
            ], 
            "type": "string", 
            "description": "The SAML Identity Provider to use for authentication."
          }
        }
      }, 
      "authpolicy": {
        "type": "object", 
        "properties": {
          "auth_services": {
            "enum": [
              "localuser:authservice"
            ], 
            "type": "string", 
            "description": "The array that contains an ordered list of refs to :doc:`localuser:authservice object </objects/localuser.authservice>`, ldap_auth_service object ldap_auth_service, :doc:`radius:authservice object </objects/radius.authservice>`, :doc:`tacacsplus:authservice object </objects/tacacsplus.authservice>`, ad_auth_service object ad_auth_service, :doc:`certificate:authservice object </objects/certificate.authservice>`. :doc:`saml:authservice object </objects/saml.authservice>`,"
          }, 
          "usage_type": {
            "enum": [
              "FULL", 
              "AUTH_ONLY"
            ], 
            "type": "string", 
            "description": "Remote policies usage."
          }, 
          "admin_groups": {
            "type": "string", 
            "description": "List of names of local administration groups that are mapped to remote administration groups."
          }, 
          "default_group": {
            "type": "string", 
            "description": "The default admin group that provides authentication in case no valid group is found."
          }
        }
      }, 
      "ldap_auth_service": {
        "type": "object", 
        "properties": {
          "comment": {
            "type": "string", 
            "description": "The LDAP descriptive comment."
          }, 
          "retries": {
            "type": "integer", 
            "example": "integer", 
            "description": "The maximum number of LDAP authentication attempts."
          }, 
          "name": {
            "type": "string", 
            "description": "The LDAP authentication service name."
          }, 
          "search_scope": {
            "enum": [
              "BASE", 
              "ONELEVEL", 
              "SUBTREE"
            ], 
            "type": "string", 
            "description": "The starting point of the LDAP search."
          }, 
          "ldap_group_attribute": {
            "type": "string", 
            "description": "The name of the LDAP attribute that defines group membership."
          }, 
          "ea_mapping": {
            "enum": [
              "ldap_eamapping"
            ], 
            "type": "string", 
            "description": "The mapping LDAP fields to extensible attributes."
          }, 
          "ldap_user_attribute": {
            "type": "string", 
            "description": "The LDAP userid attribute that is used for search."
          }, 
          "servers": {
            "enum": [
              "ldap_server"
            ], 
            "type": "string", 
            "description": "The list of LDAP servers used for authentication."
          }, 
          "disable": {
            "type": "boolean", 
            "example": "boolean", 
            "description": "Determines if the LDAP authentication service is disabled."
          }, 
          "mode": {
            "enum": [
              "ORDERED_LIST", 
              "ROUND_ROBIN"
            ], 
            "type": "string", 
            "description": "The LDAP authentication mode."
          }, 
          "timeout": {
            "type": "integer", 
            "example": "integer", 
            "description": "The LDAP authentication timeout in seconds."
          }, 
          "recovery_interval": {
            "type": "integer", 
            "example": "integer", 
            "description": "The period of time in seconds to wait before trying to contact a LDAP server that has been marked as 'DOWN'."
          }, 
          "ldap_group_authentication_type": {
            "enum": [
              "GROUP_ATTRIBUTE", 
              "POSIX_GROUP"
            ], 
            "type": "string", 
            "description": "The LDAP group authentication type."
          }
        }
      }, 
      "approvalworkflow": {
        "type": "object", 
        "properties": {
          "enable_rejected_notify": {
            "type": "boolean", 
            "example": "boolean", 
            "description": "Determines whether rejected task notifications are enabled."
          }, 
          "enable_notify_user": {
            "type": "boolean", 
            "example": "boolean", 
            "description": "Determines whether e-mail notifications to an admin member's e-mail address are enabled."
          }, 
          "rejected_notify_to": {
            "enum": [
              "SUBMITTER", 
              "APPROVER", 
              "BOTH"
            ], 
            "type": "string", 
            "description": "The destination for rejected task notifications."
          }, 
          "failed_notify_to": {
            "enum": [
              "SUBMITTER", 
              "APPROVER", 
              "BOTH"
            ], 
            "type": "string", 
            "description": "The destination for failed task notifications."
          }, 
          "enable_approval_notify": {
            "type": "boolean", 
            "example": "boolean", 
            "description": "Determines whether approval task notifications are enabled."
          }, 
          "succeeded_notify_to": {
            "enum": [
              "SUBMITTER", 
              "APPROVER", 
              "BOTH"
            ], 
            "type": "string", 
            "description": "The destination for succeeded task notifications."
          }, 
          "approved_notify_to": {
            "enum": [
              "SUBMITTER", 
              "APPROVER", 
              "BOTH"
            ], 
            "type": "string", 
            "description": "The destination for approved task notifications."
          }, 
          "enable_rescheduled_notify": {
            "type": "boolean", 
            "example": "boolean", 
            "description": "Determines whether rescheduled task notifications are enabled."
          }, 
          "submitter_group": {
            "type": "string", 
            "description": "The submitter admininstration group."
          }, 
          "approval_group": {
            "type": "string", 
            "description": "The approval administration group."
          }, 
          "enable_notify_group": {
            "type": "boolean", 
            "example": "boolean", 
            "description": "Determines whether e-mail notifications to admin group's e-mail address are enabled."
          }, 
          "enable_approved_notify": {
            "type": "boolean", 
            "example": "boolean", 
            "description": "Determines whether approved task notifications are enabled."
          }, 
          "enable_succeeded_notify": {
            "type": "boolean", 
            "example": "boolean", 
            "description": "Determines whether succeeded task notifications are enabled."
          }, 
          "extattrs": {
            "enum": [
              "extattr"
            ], 
            "type": "string", 
            "description": "Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}."
          }, 
          "ticket_number": {
            "enum": [
              "UNUSED", 
              "OPTIONAL", 
              "REQUIRED"
            ], 
            "type": "string", 
            "description": "The requirement for the ticket number when a submitter submits a task for approval."
          }, 
          "submitter_comment": {
            "enum": [
              "UNUSED", 
              "OPTIONAL", 
              "REQUIRED"
            ], 
            "type": "string", 
            "description": "The requirement for the comment when a submitter submits a task for approval."
          }, 
          "approval_notify_to": {
            "enum": [
              "SUBMITTER", 
              "APPROVER", 
              "BOTH"
            ], 
            "type": "string", 
            "description": "The destination for approval task notifications."
          }, 
          "enable_failed_notify": {
            "type": "boolean", 
            "example": "boolean", 
            "description": "Determines whether failed task notifications are enabled."
          }, 
          "rescheduled_notify_to": {
            "enum": [
              "SUBMITTER", 
              "APPROVER", 
              "BOTH"
            ], 
            "type": "string", 
            "description": "The destination for rescheduled task notifications."
          }, 
          "approver_comment": {
            "enum": [
              "UNUSED", 
              "OPTIONAL", 
              "REQUIRED"
            ], 
            "type": "string", 
            "description": "The requirement for the comment when an approver approves a submitted task."
          }
        }
      }, 
      "userprofile": {
        "type": "object", 
        "properties": {
          "grid_admin_groups": {
            "type": "string", 
            "description": "List of Admin Group objects that the current user is mapped to."
          }, 
          "global_search_on_ni_data": {
            "type": "boolean", 
            "example": "boolean", 
            "description": "Determines if global search will search for network insight devices and interfaces or not."
          }, 
          "name": {
            "type": "string", 
            "description": "The admin name."
          }, 
          "user_type": {
            "enum": [
              "LOCAL", 
              "REMOTE"
            ], 
            "type": "string", 
            "description": "The admin type."
          }, 
          "password": {
            "type": "string", 
            "description": "The new password of the admin. To change a password in the database, you must provide both the current and new password values. This is a write-only attribute."
          }, 
          "use_time_zone": {
            "type": "boolean", 
            "example": "boolean", 
            "description": "Use flag for: time_zone"
          }, 
          "max_count_widgets": {
            "type": "integer", 
            "example": "integer", 
            "description": "The maximum count of widgets that can be added to one dashboard."
          }, 
          "lb_tree_nodes_at_gen_level": {
            "type": "integer", 
            "example": "integer", 
            "description": "Determines how many nodes are displayed at generation levels."
          }, 
          "admin_group": {
            "type": "string", 
            "description": "The Admin Group object to which the admin belongs. An admin user can belong to only one admin group at a time."
          }, 
          "active_dashboard_type": {
            "enum": [
              "INFO", 
              "TASK"
            ], 
            "type": "string", 
            "description": "Determines the active dashboard type."
          }, 
          "last_login": {
            "enum": [
              "timestamp"
            ], 
            "type": "string", 
            "description": "The timestamp when the admin last logged in."
          }, 
          "days_to_expire": {
            "enum": [
              "int"
            ], 
            "type": "string", 
            "description": "The number of days left before the admin's password expires."
          }, 
          "global_search_on_ea": {
            "type": "boolean", 
            "example": "boolean", 
            "description": "Determines if extensible attribute values will be returned by global search or not."
          }, 
          "time_zone": {
            "enum": [
              "(UTC - 12:00)", 
              "(UTC - 11:00) Midway Island, Samoa", 
              "(UTC - 10:00) Hawaii", 
              "(UTC - 9:00) Alaska", 
              "(UTC - 8:00) Pacific Time (US and Canada), Tijuana", 
              "(UTC - 7:00) Arizona", 
              "(UTC - 7:00) Mountain Time (US and Canada)", 
              "(UTC - 6:00) Central Time (US and Canada)", 
              "(UTC - 6:00) Mexico City, Tegucigalpa", 
              "(UTC - 6:00) Saskatchewan", 
              "(UTC - 5:00) Bogota, Lima, Quito", 
              "(UTC - 5:00) Eastern Time (US and Canada)", 
              "(UTC - 5:00) Indiana (East)", 
              "(UTC - 4:00) Caracas", 
              "(UTC - 4:00) Atlantic Time (Canada)", 
              "(UTC - 4:00) Santiago", 
              "(UTC - 3:30) Newfoundland", 
              "(UTC - 3:00) Brasilia", 
              "(UTC - 3:00) Buenos Aires", 
              "(UTC - 2:00) Mid-Atlantic", 
              "(UTC - 1:00) Azores", 
              "(UTC) Coordinated Universal Time", 
              "(UTC) Dublin", 
              "(UTC) Lisbon", 
              "(UTC) London", 
              "(UTC + 1:00) Casablanca", 
              "(UTC + 1:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna", 
              "(UTC + 1:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague", 
              "(UTC + 1:00) Brussels, Copenhagen, Madrid, Paris", 
              "(UTC + 1:00) Sarajevo, Skopje, Sofija, Warsaw, Zagreb", 
              "(UTC + 2:00) Athens, Vilnius", 
              "(UTC + 2:00) Bucharest", 
              "(UTC + 2:00) Cairo", 
              "(UTC + 2:00) Harare", 
              "(UTC + 2:00) Helsinki", 
              "(UTC + 2:00) Jerusalem", 
              "(UTC + 2:00) Kaliningrad", 
              "(UTC + 3:00) Baghdad, Istanbul, Kuwait, Minsk, Riyadh", 
              "(UTC + 3:00) Moscow, St. Petersburg, Volgograd", 
              "(UTC + 3:00) Nairobi", 
              "(UTC + 3:30) Tehran", 
              "(UTC + 4:00) Dubai", 
              "(UTC + 4:00) Baku", 
              "(UTC + 4:00) Samara", 
              "(UTC + 4:30) Kabul", 
              "(UTC + 5:00) Ekaterinburg", 
              "(UTC + 5:00) Islamabad, Karachi", 
              "(UTC + 5:30) Bombay, Calcutta, Madras, New Delhi", 
              "(UTC + 5:30) Colombo", 
              "(UTC + 6:00) Dhaka", 
              "(UTC + 6:00) Omsk", 
              "(UTC + 6:30) Rangoon", 
              "(UTC + 7:00) Bangkok, Hanoi", 
              "(UTC + 7:00) Krasnoyarsk", 
              "(UTC + 8:00) Beijing, Chongqing, Shanghai", 
              "(UTC + 8:00) Hong Kong", 
              "(UTC + 8:00) Irkutsk", 
              "(UTC + 8:00) Perth", 
              "(UTC + 8:00) Singapore", 
              "(UTC + 8:00) Taipei", 
              "(UTC + 9:00) Osaka, Sapporo, Tokyo", 
              "(UTC + 9:00) Seoul", 
              "(UTC + 9:00) Yakutsk", 
              "(UTC + 9:30) Adelaide", 
              "(UTC + 9:30) Darwin", 
              "(UTC + 10:00) Brisbane", 
              "(UTC + 10:00) Canberra, Sydney", 
              "(UTC + 10:00) Melbourne, Victoria", 
              "(UTC + 10:00) Guam", 
              "(UTC + 10:00) Hobart", 
              "(UTC + 10:00) Vladivostok", 
              "(UTC + 11:00) Solomon Islands", 
              "(UTC + 11:00) Magadan", 
              "(UTC + 12:00) Anadyr", 
              "(UTC + 12:00) Auckland", 
              "(UTC + 12:00) Fiji", 
              "(UTC + 12:00) Marshall Islands"
            ], 
            "type": "string", 
            "description": "The time zone of the admin user."
          }, 
          "table_size": {
            "type": "integer", 
            "example": "integer", 
            "description": "The number of lines of data a table or a single list view can contain."
          }, 
          "old_password": {
            "type": "string", 
            "description": "The current password that will be replaced by a new password. To change a password in the database, you must provide both the current and new password values. This is a write-only attribute."
          }, 
          "lb_tree_nodes_at_last_level": {
            "type": "integer", 
            "example": "integer", 
            "description": "Determines how many nodes are displayed at the last level."
          }, 
          "email": {
            "type": "string", 
            "description": "The email address of the admin."
          }
        }
      }
    }
  }, 
  "openapi": "3.0.0"
}