{'openapi': '3.0.0', 'info': {'description': 'WAPI Documentation', 'version': 'v2.10', 'title': 'Infoblox WAPI', 'license': {'name': 'Infoblox License', 'url': 'https://www.infoblox.com/'}, 'contact': {'name': 'Support', 'email': 'vsethia@infoblox.com'}}, 'paths': {'/wapi/v2.10/dtc': {}, '/wapi/v2.10/dtc/{dtc_reference}': {'post': {'description': 'Function calls', 'tags': ['dtc'], 'parameters': [{'name': 'dtc_reference', 'in': 'path', 'required': True, 'description': 'Enter the reference for dtc', 'schema': {'type': 'string', 'example': 'resourceID:resourceName'}}, {'name': '_function', 'in': 'query', 'required': True, 'description': 'Select the function', 'schema': {'type': 'string', 'enum': ['add_certificate', 'generate_ea_topology_db', 'import_maxminddb', 'query']}}], 'requestBody': {'description': 'Enter the request body here', 'required': True, 'content': {'application/json': {'schema': {'type': 'object', 'properties': {}}}}}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'add_certificate': {'type': 'string', 'example': {'token': 'string'}}, 'import_maxminddb': {'type': 'string', 'example': {'token': 'string'}}, 'query': {'type': 'string', 'example': {'address': 'string', 'qname': 'string', 'type': ['A', 'AAAA', 'NAPTR', 'CNAME', 'SRV'], 'lbdn': 'string', 'member': 'string'}}}}}}}}, 'security': [{'basicAuth': []}]}}, '/wapi/v2.10/dtc:allrecords': {'get': {'tags': ['dtc:allrecords'], 'parameters': [{'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}, {'name': '_return_fields+', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma, this returns the required fields along with the default fields', 'schema': {'type': 'string'}}, {'name': '_max_results', 'in': 'query', 'required': False, 'description': 'Enter the number of results to be fetched', 'schema': {'type': 'integer', 'minimum': 1}}, {'name': '_return_as_object', 'in': 'query', 'required': False, 'description': 'Select 1 if result is required as a object', 'schema': {'type': 'integer', 'enum': [0, 1], 'default': 0}}, {'name': '_paging', 'in': 'query', 'required': False, 'description': 'Select 1 if paging is required. If SET, _max_results and _return_as_object must be entered.', 'schema': {'type': 'integer', 'enum': [0, 1], 'default': 0}}, {'name': ' _page_id', 'in': 'query', 'required': False, 'description': 'Enter the page ID for fetching next page', 'schema': {'type': 'string'}}, {'name': 'comment', 'in': 'query', 'required': False, 'description': 'Enter the value of the field', 'schema': {'type': 'string'}}, {'name': 'dtc_server', 'in': 'query', 'required': False, 'description': 'Enter the value of the field', 'schema': {'type': 'string'}}, {'name': 'type', 'in': 'query', 'required': False, 'description': 'Enter the value of the field', 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_allrecords'}}}}}, 'security': [{'basicAuth': []}]}}, '/wapi/v2.10/dtc:allrecords/{dtc:allrecords_reference}': {'get': {'tags': ['dtc:allrecords'], 'parameters': [{'name': 'dtc:allrecords_reference', 'in': 'path', 'required': True, 'description': 'Enter the reference for dtc:allrecords', 'schema': {'type': 'string', 'example': 'resourceID:resourceName'}}, {'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}, {'name': '_return_fields+', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma, this returns the required fields along with the default fields', 'schema': {'type': 'string'}}, {'name': '_return_as_object', 'in': 'query', 'required': False, 'description': 'Select 1 if result is required as a object', 'schema': {'type': 'integer', 'enum': [0, 1], 'default': 0}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_allrecords'}}}}}, 'security': [{'basicAuth': []}]}}, '/wapi/v2.10/dtc:certificate': {'get': {'tags': ['dtc:certificate'], 'parameters': [{'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}, {'name': '_return_fields+', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma, this returns the required fields along with the default fields', 'schema': {'type': 'string'}}, {'name': '_max_results', 'in': 'query', 'required': False, 'description': 'Enter the number of results to be fetched', 'schema': {'type': 'integer', 'minimum': 1}}, {'name': '_return_as_object', 'in': 'query', 'required': False, 'description': 'Select 1 if result is required as a object', 'schema': {'type': 'integer', 'enum': [0, 1], 'default': 0}}, {'name': '_paging', 'in': 'query', 'required': False, 'description': 'Select 1 if paging is required. If SET, _max_results and _return_as_object must be entered.', 'schema': {'type': 'integer', 'enum': [0, 1], 'default': 0}}, {'name': ' _page_id', 'in': 'query', 'required': False, 'description': 'Enter the page ID for fetching next page', 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_certificate'}}}}}, 'security': [{'basicAuth': []}]}}, '/wapi/v2.10/dtc:certificate/{dtc:certificate_reference}': {'get': {'tags': ['dtc:certificate'], 'parameters': [{'name': 'dtc:certificate_reference', 'in': 'path', 'required': True, 'description': 'Enter the reference for dtc:certificate', 'schema': {'type': 'string', 'example': 'resourceID:resourceName'}}, {'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}, {'name': '_return_fields+', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma, this returns the required fields along with the default fields', 'schema': {'type': 'string'}}, {'name': '_return_as_object', 'in': 'query', 'required': False, 'description': 'Select 1 if result is required as a object', 'schema': {'type': 'integer', 'enum': [0, 1], 'default': 0}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_certificate'}}}}}, 'security': [{'basicAuth': []}]}}, '/wapi/v2.10/dtc:monitor:http': {'get': {'tags': ['dtc:monitor:http'], 'parameters': [{'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}, {'name': '_return_fields+', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma, this returns the required fields along with the default fields', 'schema': {'type': 'string'}}, {'name': '_max_results', 'in': 'query', 'required': False, 'description': 'Enter the number of results to be fetched', 'schema': {'type': 'integer', 'minimum': 1}}, {'name': '_return_as_object', 'in': 'query', 'required': False, 'description': 'Select 1 if result is required as a object', 'schema': {'type': 'integer', 'enum': [0, 1], 'default': 0}}, {'name': '_paging', 'in': 'query', 'required': False, 'description': 'Select 1 if paging is required. If SET, _max_results and _return_as_object must be entered.', 'schema': {'type': 'integer', 'enum': [0, 1], 'default': 0}}, {'name': ' _page_id', 'in': 'query', 'required': False, 'description': 'Enter the page ID for fetching next page', 'schema': {'type': 'string'}}, {'name': 'comment', 'in': 'query', 'required': False, 'description': 'Enter the value of the field', 'schema': {'type': 'string'}}, {'name': 'name', 'in': 'query', 'required': False, 'description': 'Enter the value of the field', 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_monitor_http'}}}}}, 'security': [{'basicAuth': []}]}, 'post': {'tags': ['dtc:monitor:http'], 'parameters': [{'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Enter the request body here', 'required': True, 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'ciphers': {'type': 'string', 'example': 'string'}, 'client_cert': {'type': 'string', 'example': 'string'}, 'comment': {'type': 'string', 'example': 'string'}, 'content_check': {'type': 'string', 'example': "['NONE', 'MATCH', 'EXTRACT']"}, 'content_check_input': {'type': 'string', 'example': "['HEADERS', 'ALL', 'BODY']"}, 'content_check_op': {'type': 'string', 'example': "['EQ', 'NEQ', 'LEQ', 'GEQ']"}, 'content_check_regex': {'type': 'string', 'example': 'string'}, 'content_extract_group': {'type': 'string', 'example': 'uint'}, 'content_extract_type': {'type': 'string', 'example': "['STRING', 'INTEGER']"}, 'content_extract_value': {'type': 'string', 'example': 'string'}, 'enable_sni': {'type': 'string', 'example': 'bool'}, 'extattrs': {'type': 'string', 'example': 'extattr'}, 'interval': {'type': 'string', 'example': 'uint'}, 'name': {'type': 'string', 'example': 'string'}, 'port': {'type': 'string', 'example': 'uint'}, 'request': {'type': 'string', 'example': 'string'}, 'result': {'type': 'string', 'example': "['ANY', 'CODE_IS', 'CODE_IS_NOT']"}, 'result_code': {'type': 'string', 'example': 'uint'}, 'retry_down': {'type': 'string', 'example': 'uint'}, 'retry_up': {'type': 'string', 'example': 'uint'}, 'secure': {'type': 'string', 'example': 'bool'}, 'timeout': {'type': 'string', 'example': 'uint'}, 'validate_cert': {'type': 'string', 'example': 'bool'}}}}}}, 'responses': {'201': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_monitor_http'}}}}}, 'security': [{'basicAuth': []}]}}, '/wapi/v2.10/dtc:monitor:http/{dtc:monitor:http_reference}': {'get': {'tags': ['dtc:monitor:http'], 'parameters': [{'name': 'dtc:monitor:http_reference', 'in': 'path', 'required': True, 'description': 'Enter the reference for dtc:monitor:http', 'schema': {'type': 'string', 'example': 'resourceID:resourceName'}}, {'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}, {'name': '_return_fields+', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma, this returns the required fields along with the default fields', 'schema': {'type': 'string'}}, {'name': '_return_as_object', 'in': 'query', 'required': False, 'description': 'Select 1 if result is required as a object', 'schema': {'type': 'integer', 'enum': [0, 1], 'default': 0}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_monitor_http'}}}}}, 'security': [{'basicAuth': []}]}, 'put': {'description': 'Update the dtc:monitor:http resource', 'tags': ['dtc:monitor:http'], 'parameters': [{'name': 'dtc:monitor:http_reference', 'in': 'path', 'required': True, 'description': 'Enter the reference for dtc:monitor:http', 'schema': {'type': 'string', 'example': 'resourceID:resourceName'}}, {'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Enter the request body here', 'required': True, 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'ciphers': {'type': 'string', 'example': 'string'}, 'client_cert': {'type': 'string', 'example': 'string'}, 'comment': {'type': 'string', 'example': 'string'}, 'content_check': {'type': 'string', 'example': "['NONE', 'MATCH', 'EXTRACT']"}, 'content_check_input': {'type': 'string', 'example': "['HEADERS', 'ALL', 'BODY']"}, 'content_check_op': {'type': 'string', 'example': "['EQ', 'NEQ', 'LEQ', 'GEQ']"}, 'content_check_regex': {'type': 'string', 'example': 'string'}, 'content_extract_group': {'type': 'string', 'example': 'uint'}, 'content_extract_type': {'type': 'string', 'example': "['STRING', 'INTEGER']"}, 'content_extract_value': {'type': 'string', 'example': 'string'}, 'enable_sni': {'type': 'string', 'example': 'bool'}, 'extattrs': {'type': 'string', 'example': 'extattr'}, 'interval': {'type': 'string', 'example': 'uint'}, 'name': {'type': 'string', 'example': 'string'}, 'port': {'type': 'string', 'example': 'uint'}, 'request': {'type': 'string', 'example': 'string'}, 'result': {'type': 'string', 'example': "['ANY', 'CODE_IS', 'CODE_IS_NOT']"}, 'result_code': {'type': 'string', 'example': 'uint'}, 'retry_down': {'type': 'string', 'example': 'uint'}, 'retry_up': {'type': 'string', 'example': 'uint'}, 'secure': {'type': 'string', 'example': 'bool'}, 'timeout': {'type': 'string', 'example': 'uint'}, 'validate_cert': {'type': 'string', 'example': 'bool'}}}}}}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_monitor_http'}}}}}, 'security': [{'basicAuth': []}]}, 'delete': {'description': 'Delete the dtc:monitor:http resource', 'tags': ['dtc:monitor:http'], 'parameters': [{'name': 'dtc:monitor:http_reference', 'in': 'path', 'required': True, 'description': 'Enter the reference for dtc:monitor:http', 'schema': {'type': 'string', 'example': 'resourceID:resourceName'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'$ref': {'type': 'string', 'description': 'Reference of the deleted string'}}}}}}}, 'security': [{'basicAuth': []}]}}, '/wapi/v2.10/dtc:monitor:icmp': {'get': {'tags': ['dtc:monitor:icmp'], 'parameters': [{'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}, {'name': '_return_fields+', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma, this returns the required fields along with the default fields', 'schema': {'type': 'string'}}, {'name': '_max_results', 'in': 'query', 'required': False, 'description': 'Enter the number of results to be fetched', 'schema': {'type': 'integer', 'minimum': 1}}, {'name': '_return_as_object', 'in': 'query', 'required': False, 'description': 'Select 1 if result is required as a object', 'schema': {'type': 'integer', 'enum': [0, 1], 'default': 0}}, {'name': '_paging', 'in': 'query', 'required': False, 'description': 'Select 1 if paging is required. If SET, _max_results and _return_as_object must be entered.', 'schema': {'type': 'integer', 'enum': [0, 1], 'default': 0}}, {'name': ' _page_id', 'in': 'query', 'required': False, 'description': 'Enter the page ID for fetching next page', 'schema': {'type': 'string'}}, {'name': 'comment', 'in': 'query', 'required': False, 'description': 'Enter the value of the field', 'schema': {'type': 'string'}}, {'name': 'name', 'in': 'query', 'required': False, 'description': 'Enter the value of the field', 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_monitor_icmp'}}}}}, 'security': [{'basicAuth': []}]}, 'post': {'tags': ['dtc:monitor:icmp'], 'parameters': [{'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Enter the request body here', 'required': True, 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'comment': {'type': 'string', 'example': 'string'}, 'extattrs': {'type': 'string', 'example': 'extattr'}, 'interval': {'type': 'string', 'example': 'uint'}, 'name': {'type': 'string', 'example': 'string'}, 'retry_down': {'type': 'string', 'example': 'uint'}, 'retry_up': {'type': 'string', 'example': 'uint'}, 'timeout': {'type': 'string', 'example': 'uint'}}}}}}, 'responses': {'201': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_monitor_icmp'}}}}}, 'security': [{'basicAuth': []}]}}, '/wapi/v2.10/dtc:monitor:icmp/{dtc:monitor:icmp_reference}': {'get': {'tags': ['dtc:monitor:icmp'], 'parameters': [{'name': 'dtc:monitor:icmp_reference', 'in': 'path', 'required': True, 'description': 'Enter the reference for dtc:monitor:icmp', 'schema': {'type': 'string', 'example': 'resourceID:resourceName'}}, {'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}, {'name': '_return_fields+', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma, this returns the required fields along with the default fields', 'schema': {'type': 'string'}}, {'name': '_return_as_object', 'in': 'query', 'required': False, 'description': 'Select 1 if result is required as a object', 'schema': {'type': 'integer', 'enum': [0, 1], 'default': 0}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_monitor_icmp'}}}}}, 'security': [{'basicAuth': []}]}, 'put': {'description': 'Update the dtc:monitor:icmp resource', 'tags': ['dtc:monitor:icmp'], 'parameters': [{'name': 'dtc:monitor:icmp_reference', 'in': 'path', 'required': True, 'description': 'Enter the reference for dtc:monitor:icmp', 'schema': {'type': 'string', 'example': 'resourceID:resourceName'}}, {'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Enter the request body here', 'required': True, 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'comment': {'type': 'string', 'example': 'string'}, 'extattrs': {'type': 'string', 'example': 'extattr'}, 'interval': {'type': 'string', 'example': 'uint'}, 'name': {'type': 'string', 'example': 'string'}, 'retry_down': {'type': 'string', 'example': 'uint'}, 'retry_up': {'type': 'string', 'example': 'uint'}, 'timeout': {'type': 'string', 'example': 'uint'}}}}}}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_monitor_icmp'}}}}}, 'security': [{'basicAuth': []}]}, 'delete': {'description': 'Delete the dtc:monitor:icmp resource', 'tags': ['dtc:monitor:icmp'], 'parameters': [{'name': 'dtc:monitor:icmp_reference', 'in': 'path', 'required': True, 'description': 'Enter the reference for dtc:monitor:icmp', 'schema': {'type': 'string', 'example': 'resourceID:resourceName'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'$ref': {'type': 'string', 'description': 'Reference of the deleted string'}}}}}}}, 'security': [{'basicAuth': []}]}}, '/wapi/v2.10/dtc:monitor:pdp': {'get': {'tags': ['dtc:monitor:pdp'], 'parameters': [{'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}, {'name': '_return_fields+', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma, this returns the required fields along with the default fields', 'schema': {'type': 'string'}}, {'name': '_max_results', 'in': 'query', 'required': False, 'description': 'Enter the number of results to be fetched', 'schema': {'type': 'integer', 'minimum': 1}}, {'name': '_return_as_object', 'in': 'query', 'required': False, 'description': 'Select 1 if result is required as a object', 'schema': {'type': 'integer', 'enum': [0, 1], 'default': 0}}, {'name': '_paging', 'in': 'query', 'required': False, 'description': 'Select 1 if paging is required. If SET, _max_results and _return_as_object must be entered.', 'schema': {'type': 'integer', 'enum': [0, 1], 'default': 0}}, {'name': ' _page_id', 'in': 'query', 'required': False, 'description': 'Enter the page ID for fetching next page', 'schema': {'type': 'string'}}, {'name': 'comment', 'in': 'query', 'required': False, 'description': 'Enter the value of the field', 'schema': {'type': 'string'}}, {'name': 'name', 'in': 'query', 'required': False, 'description': 'Enter the value of the field', 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_monitor_pdp'}}}}}, 'security': [{'basicAuth': []}]}, 'post': {'tags': ['dtc:monitor:pdp'], 'parameters': [{'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Enter the request body here', 'required': True, 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'comment': {'type': 'string', 'example': 'string'}, 'extattrs': {'type': 'string', 'example': 'extattr'}, 'interval': {'type': 'string', 'example': 'uint'}, 'name': {'type': 'string', 'example': 'string'}, 'port': {'type': 'string', 'example': 'uint'}, 'retry_down': {'type': 'string', 'example': 'uint'}, 'retry_up': {'type': 'string', 'example': 'uint'}, 'timeout': {'type': 'string', 'example': 'uint'}}}}}}, 'responses': {'201': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_monitor_pdp'}}}}}, 'security': [{'basicAuth': []}]}}, '/wapi/v2.10/dtc:monitor:pdp/{dtc:monitor:pdp_reference}': {'get': {'tags': ['dtc:monitor:pdp'], 'parameters': [{'name': 'dtc:monitor:pdp_reference', 'in': 'path', 'required': True, 'description': 'Enter the reference for dtc:monitor:pdp', 'schema': {'type': 'string', 'example': 'resourceID:resourceName'}}, {'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}, {'name': '_return_fields+', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma, this returns the required fields along with the default fields', 'schema': {'type': 'string'}}, {'name': '_return_as_object', 'in': 'query', 'required': False, 'description': 'Select 1 if result is required as a object', 'schema': {'type': 'integer', 'enum': [0, 1], 'default': 0}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_monitor_pdp'}}}}}, 'security': [{'basicAuth': []}]}, 'put': {'description': 'Update the dtc:monitor:pdp resource', 'tags': ['dtc:monitor:pdp'], 'parameters': [{'name': 'dtc:monitor:pdp_reference', 'in': 'path', 'required': True, 'description': 'Enter the reference for dtc:monitor:pdp', 'schema': {'type': 'string', 'example': 'resourceID:resourceName'}}, {'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Enter the request body here', 'required': True, 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'comment': {'type': 'string', 'example': 'string'}, 'extattrs': {'type': 'string', 'example': 'extattr'}, 'interval': {'type': 'string', 'example': 'uint'}, 'name': {'type': 'string', 'example': 'string'}, 'port': {'type': 'string', 'example': 'uint'}, 'retry_down': {'type': 'string', 'example': 'uint'}, 'retry_up': {'type': 'string', 'example': 'uint'}, 'timeout': {'type': 'string', 'example': 'uint'}}}}}}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_monitor_pdp'}}}}}, 'security': [{'basicAuth': []}]}, 'delete': {'description': 'Delete the dtc:monitor:pdp resource', 'tags': ['dtc:monitor:pdp'], 'parameters': [{'name': 'dtc:monitor:pdp_reference', 'in': 'path', 'required': True, 'description': 'Enter the reference for dtc:monitor:pdp', 'schema': {'type': 'string', 'example': 'resourceID:resourceName'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'$ref': {'type': 'string', 'description': 'Reference of the deleted string'}}}}}}}, 'security': [{'basicAuth': []}]}}, '/wapi/v2.10/dtc:monitor:sip': {'get': {'tags': ['dtc:monitor:sip'], 'parameters': [{'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}, {'name': '_return_fields+', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma, this returns the required fields along with the default fields', 'schema': {'type': 'string'}}, {'name': '_max_results', 'in': 'query', 'required': False, 'description': 'Enter the number of results to be fetched', 'schema': {'type': 'integer', 'minimum': 1}}, {'name': '_return_as_object', 'in': 'query', 'required': False, 'description': 'Select 1 if result is required as a object', 'schema': {'type': 'integer', 'enum': [0, 1], 'default': 0}}, {'name': '_paging', 'in': 'query', 'required': False, 'description': 'Select 1 if paging is required. If SET, _max_results and _return_as_object must be entered.', 'schema': {'type': 'integer', 'enum': [0, 1], 'default': 0}}, {'name': ' _page_id', 'in': 'query', 'required': False, 'description': 'Enter the page ID for fetching next page', 'schema': {'type': 'string'}}, {'name': 'comment', 'in': 'query', 'required': False, 'description': 'Enter the value of the field', 'schema': {'type': 'string'}}, {'name': 'name', 'in': 'query', 'required': False, 'description': 'Enter the value of the field', 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_monitor_sip'}}}}}, 'security': [{'basicAuth': []}]}, 'post': {'tags': ['dtc:monitor:sip'], 'parameters': [{'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Enter the request body here', 'required': True, 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'ciphers': {'type': 'string', 'example': 'string'}, 'client_cert': {'type': 'string', 'example': 'string'}, 'comment': {'type': 'string', 'example': 'string'}, 'extattrs': {'type': 'string', 'example': 'extattr'}, 'interval': {'type': 'string', 'example': 'uint'}, 'name': {'type': 'string', 'example': 'string'}, 'port': {'type': 'string', 'example': 'uint'}, 'request': {'type': 'string', 'example': 'string'}, 'result': {'type': 'string', 'example': "['ANY', 'CODE_IS', 'CODE_IS_NOT']"}, 'result_code': {'type': 'string', 'example': 'uint'}, 'retry_down': {'type': 'string', 'example': 'uint'}, 'retry_up': {'type': 'string', 'example': 'uint'}, 'timeout': {'type': 'string', 'example': 'uint'}, 'transport': {'type': 'string', 'example': "['TCP', 'SIPS', 'TLS', 'UDP']"}, 'validate_cert': {'type': 'string', 'example': 'bool'}}}}}}, 'responses': {'201': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_monitor_sip'}}}}}, 'security': [{'basicAuth': []}]}}, '/wapi/v2.10/dtc:monitor:sip/{dtc:monitor:sip_reference}': {'get': {'tags': ['dtc:monitor:sip'], 'parameters': [{'name': 'dtc:monitor:sip_reference', 'in': 'path', 'required': True, 'description': 'Enter the reference for dtc:monitor:sip', 'schema': {'type': 'string', 'example': 'resourceID:resourceName'}}, {'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}, {'name': '_return_fields+', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma, this returns the required fields along with the default fields', 'schema': {'type': 'string'}}, {'name': '_return_as_object', 'in': 'query', 'required': False, 'description': 'Select 1 if result is required as a object', 'schema': {'type': 'integer', 'enum': [0, 1], 'default': 0}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_monitor_sip'}}}}}, 'security': [{'basicAuth': []}]}, 'put': {'description': 'Update the dtc:monitor:sip resource', 'tags': ['dtc:monitor:sip'], 'parameters': [{'name': 'dtc:monitor:sip_reference', 'in': 'path', 'required': True, 'description': 'Enter the reference for dtc:monitor:sip', 'schema': {'type': 'string', 'example': 'resourceID:resourceName'}}, {'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Enter the request body here', 'required': True, 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'ciphers': {'type': 'string', 'example': 'string'}, 'client_cert': {'type': 'string', 'example': 'string'}, 'comment': {'type': 'string', 'example': 'string'}, 'extattrs': {'type': 'string', 'example': 'extattr'}, 'interval': {'type': 'string', 'example': 'uint'}, 'name': {'type': 'string', 'example': 'string'}, 'port': {'type': 'string', 'example': 'uint'}, 'request': {'type': 'string', 'example': 'string'}, 'result': {'type': 'string', 'example': "['ANY', 'CODE_IS', 'CODE_IS_NOT']"}, 'result_code': {'type': 'string', 'example': 'uint'}, 'retry_down': {'type': 'string', 'example': 'uint'}, 'retry_up': {'type': 'string', 'example': 'uint'}, 'timeout': {'type': 'string', 'example': 'uint'}, 'transport': {'type': 'string', 'example': "['TCP', 'SIPS', 'TLS', 'UDP']"}, 'validate_cert': {'type': 'string', 'example': 'bool'}}}}}}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_monitor_sip'}}}}}, 'security': [{'basicAuth': []}]}, 'delete': {'description': 'Delete the dtc:monitor:sip resource', 'tags': ['dtc:monitor:sip'], 'parameters': [{'name': 'dtc:monitor:sip_reference', 'in': 'path', 'required': True, 'description': 'Enter the reference for dtc:monitor:sip', 'schema': {'type': 'string', 'example': 'resourceID:resourceName'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'$ref': {'type': 'string', 'description': 'Reference of the deleted string'}}}}}}}, 'security': [{'basicAuth': []}]}}, '/wapi/v2.10/dtc:monitor:snmp': {'get': {'tags': ['dtc:monitor:snmp'], 'parameters': [{'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}, {'name': '_return_fields+', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma, this returns the required fields along with the default fields', 'schema': {'type': 'string'}}, {'name': '_max_results', 'in': 'query', 'required': False, 'description': 'Enter the number of results to be fetched', 'schema': {'type': 'integer', 'minimum': 1}}, {'name': '_return_as_object', 'in': 'query', 'required': False, 'description': 'Select 1 if result is required as a object', 'schema': {'type': 'integer', 'enum': [0, 1], 'default': 0}}, {'name': '_paging', 'in': 'query', 'required': False, 'description': 'Select 1 if paging is required. If SET, _max_results and _return_as_object must be entered.', 'schema': {'type': 'integer', 'enum': [0, 1], 'default': 0}}, {'name': ' _page_id', 'in': 'query', 'required': False, 'description': 'Enter the page ID for fetching next page', 'schema': {'type': 'string'}}, {'name': 'comment', 'in': 'query', 'required': False, 'description': 'Enter the value of the field', 'schema': {'type': 'string'}}, {'name': 'context', 'in': 'query', 'required': False, 'description': 'Enter the value of the field', 'schema': {'type': 'string'}}, {'name': 'engine_id', 'in': 'query', 'required': False, 'description': 'Enter the value of the field', 'schema': {'type': 'string'}}, {'name': 'name', 'in': 'query', 'required': False, 'description': 'Enter the value of the field', 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_monitor_snmp'}}}}}, 'security': [{'basicAuth': []}]}, 'post': {'tags': ['dtc:monitor:snmp'], 'parameters': [{'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Enter the request body here', 'required': True, 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'comment': {'type': 'string', 'example': 'string'}, 'community': {'type': 'string', 'example': 'string'}, 'context': {'type': 'string', 'example': 'string'}, 'engine_id': {'type': 'string', 'example': 'string'}, 'extattrs': {'type': 'string', 'example': 'extattr'}, 'interval': {'type': 'string', 'example': 'uint'}, 'name': {'type': 'string', 'example': 'string'}, 'oids': {'type': 'string', 'example': "[{'oid': 'string', 'comment': 'string', 'type': 'enum', 'condition': 'enum', 'first': 'string', 'last': 'string'}]"}, 'port': {'type': 'string', 'example': 'uint'}, 'retry_down': {'type': 'string', 'example': 'uint'}, 'retry_up': {'type': 'string', 'example': 'uint'}, 'timeout': {'type': 'string', 'example': 'uint'}, 'user': {'type': 'string', 'example': 'string'}, 'version': {'type': 'string', 'example': "['V1', 'V2C', 'V3']"}}}}}}, 'responses': {'201': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_monitor_snmp'}}}}}, 'security': [{'basicAuth': []}]}}, '/wapi/v2.10/dtc:monitor:snmp/{dtc:monitor:snmp_reference}': {'get': {'tags': ['dtc:monitor:snmp'], 'parameters': [{'name': 'dtc:monitor:snmp_reference', 'in': 'path', 'required': True, 'description': 'Enter the reference for dtc:monitor:snmp', 'schema': {'type': 'string', 'example': 'resourceID:resourceName'}}, {'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}, {'name': '_return_fields+', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma, this returns the required fields along with the default fields', 'schema': {'type': 'string'}}, {'name': '_return_as_object', 'in': 'query', 'required': False, 'description': 'Select 1 if result is required as a object', 'schema': {'type': 'integer', 'enum': [0, 1], 'default': 0}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_monitor_snmp'}}}}}, 'security': [{'basicAuth': []}]}, 'put': {'description': 'Update the dtc:monitor:snmp resource', 'tags': ['dtc:monitor:snmp'], 'parameters': [{'name': 'dtc:monitor:snmp_reference', 'in': 'path', 'required': True, 'description': 'Enter the reference for dtc:monitor:snmp', 'schema': {'type': 'string', 'example': 'resourceID:resourceName'}}, {'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Enter the request body here', 'required': True, 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'comment': {'type': 'string', 'example': 'string'}, 'community': {'type': 'string', 'example': 'string'}, 'context': {'type': 'string', 'example': 'string'}, 'engine_id': {'type': 'string', 'example': 'string'}, 'extattrs': {'type': 'string', 'example': 'extattr'}, 'interval': {'type': 'string', 'example': 'uint'}, 'name': {'type': 'string', 'example': 'string'}, 'oids': {'type': 'string', 'example': "[{'oid': 'string', 'comment': 'string', 'type': 'enum', 'condition': 'enum', 'first': 'string', 'last': 'string'}]"}, 'port': {'type': 'string', 'example': 'uint'}, 'retry_down': {'type': 'string', 'example': 'uint'}, 'retry_up': {'type': 'string', 'example': 'uint'}, 'timeout': {'type': 'string', 'example': 'uint'}, 'user': {'type': 'string', 'example': 'string'}, 'version': {'type': 'string', 'example': "['V1', 'V2C', 'V3']"}}}}}}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_monitor_snmp'}}}}}, 'security': [{'basicAuth': []}]}, 'delete': {'description': 'Delete the dtc:monitor:snmp resource', 'tags': ['dtc:monitor:snmp'], 'parameters': [{'name': 'dtc:monitor:snmp_reference', 'in': 'path', 'required': True, 'description': 'Enter the reference for dtc:monitor:snmp', 'schema': {'type': 'string', 'example': 'resourceID:resourceName'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'$ref': {'type': 'string', 'description': 'Reference of the deleted string'}}}}}}}, 'security': [{'basicAuth': []}]}}, '/wapi/v2.10/dtc:monitor:tcp': {'get': {'tags': ['dtc:monitor:tcp'], 'parameters': [{'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}, {'name': '_return_fields+', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma, this returns the required fields along with the default fields', 'schema': {'type': 'string'}}, {'name': '_max_results', 'in': 'query', 'required': False, 'description': 'Enter the number of results to be fetched', 'schema': {'type': 'integer', 'minimum': 1}}, {'name': '_return_as_object', 'in': 'query', 'required': False, 'description': 'Select 1 if result is required as a object', 'schema': {'type': 'integer', 'enum': [0, 1], 'default': 0}}, {'name': '_paging', 'in': 'query', 'required': False, 'description': 'Select 1 if paging is required. If SET, _max_results and _return_as_object must be entered.', 'schema': {'type': 'integer', 'enum': [0, 1], 'default': 0}}, {'name': ' _page_id', 'in': 'query', 'required': False, 'description': 'Enter the page ID for fetching next page', 'schema': {'type': 'string'}}, {'name': 'comment', 'in': 'query', 'required': False, 'description': 'Enter the value of the field', 'schema': {'type': 'string'}}, {'name': 'name', 'in': 'query', 'required': False, 'description': 'Enter the value of the field', 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_monitor_tcp'}}}}}, 'security': [{'basicAuth': []}]}, 'post': {'tags': ['dtc:monitor:tcp'], 'parameters': [{'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Enter the request body here', 'required': True, 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'comment': {'type': 'string', 'example': 'string'}, 'extattrs': {'type': 'string', 'example': 'extattr'}, 'interval': {'type': 'string', 'example': 'uint'}, 'name': {'type': 'string', 'example': 'string'}, 'port': {'type': 'string', 'example': 'uint'}, 'retry_down': {'type': 'string', 'example': 'uint'}, 'retry_up': {'type': 'string', 'example': 'uint'}, 'timeout': {'type': 'string', 'example': 'uint'}}}}}}, 'responses': {'201': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_monitor_tcp'}}}}}, 'security': [{'basicAuth': []}]}}, '/wapi/v2.10/dtc:monitor:tcp/{dtc:monitor:tcp_reference}': {'get': {'tags': ['dtc:monitor:tcp'], 'parameters': [{'name': 'dtc:monitor:tcp_reference', 'in': 'path', 'required': True, 'description': 'Enter the reference for dtc:monitor:tcp', 'schema': {'type': 'string', 'example': 'resourceID:resourceName'}}, {'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}, {'name': '_return_fields+', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma, this returns the required fields along with the default fields', 'schema': {'type': 'string'}}, {'name': '_return_as_object', 'in': 'query', 'required': False, 'description': 'Select 1 if result is required as a object', 'schema': {'type': 'integer', 'enum': [0, 1], 'default': 0}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_monitor_tcp'}}}}}, 'security': [{'basicAuth': []}]}, 'put': {'description': 'Update the dtc:monitor:tcp resource', 'tags': ['dtc:monitor:tcp'], 'parameters': [{'name': 'dtc:monitor:tcp_reference', 'in': 'path', 'required': True, 'description': 'Enter the reference for dtc:monitor:tcp', 'schema': {'type': 'string', 'example': 'resourceID:resourceName'}}, {'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Enter the request body here', 'required': True, 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'comment': {'type': 'string', 'example': 'string'}, 'extattrs': {'type': 'string', 'example': 'extattr'}, 'interval': {'type': 'string', 'example': 'uint'}, 'name': {'type': 'string', 'example': 'string'}, 'port': {'type': 'string', 'example': 'uint'}, 'retry_down': {'type': 'string', 'example': 'uint'}, 'retry_up': {'type': 'string', 'example': 'uint'}, 'timeout': {'type': 'string', 'example': 'uint'}}}}}}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_monitor_tcp'}}}}}, 'security': [{'basicAuth': []}]}, 'delete': {'description': 'Delete the dtc:monitor:tcp resource', 'tags': ['dtc:monitor:tcp'], 'parameters': [{'name': 'dtc:monitor:tcp_reference', 'in': 'path', 'required': True, 'description': 'Enter the reference for dtc:monitor:tcp', 'schema': {'type': 'string', 'example': 'resourceID:resourceName'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'$ref': {'type': 'string', 'description': 'Reference of the deleted string'}}}}}}}, 'security': [{'basicAuth': []}]}}, '/wapi/v2.10/dtc:object': {'get': {'tags': ['dtc:object'], 'parameters': [{'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}, {'name': '_return_fields+', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma, this returns the required fields along with the default fields', 'schema': {'type': 'string'}}, {'name': '_max_results', 'in': 'query', 'required': False, 'description': 'Enter the number of results to be fetched', 'schema': {'type': 'integer', 'minimum': 1}}, {'name': '_return_as_object', 'in': 'query', 'required': False, 'description': 'Select 1 if result is required as a object', 'schema': {'type': 'integer', 'enum': [0, 1], 'default': 0}}, {'name': '_paging', 'in': 'query', 'required': False, 'description': 'Select 1 if paging is required. If SET, _max_results and _return_as_object must be entered.', 'schema': {'type': 'integer', 'enum': [0, 1], 'default': 0}}, {'name': ' _page_id', 'in': 'query', 'required': False, 'description': 'Enter the page ID for fetching next page', 'schema': {'type': 'string'}}, {'name': 'comment', 'in': 'query', 'required': False, 'description': 'Enter the value of the field', 'schema': {'type': 'string'}}, {'name': 'name', 'in': 'query', 'required': False, 'description': 'Enter the value of the field', 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_object'}}}}}, 'security': [{'basicAuth': []}]}}, '/wapi/v2.10/dtc:object/{dtc:object_reference}': {'get': {'tags': ['dtc:object'], 'parameters': [{'name': 'dtc:object_reference', 'in': 'path', 'required': True, 'description': 'Enter the reference for dtc:object', 'schema': {'type': 'string', 'example': 'resourceID:resourceName'}}, {'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}, {'name': '_return_fields+', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma, this returns the required fields along with the default fields', 'schema': {'type': 'string'}}, {'name': '_return_as_object', 'in': 'query', 'required': False, 'description': 'Select 1 if result is required as a object', 'schema': {'type': 'integer', 'enum': [0, 1], 'default': 0}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_object'}}}}}, 'security': [{'basicAuth': []}]}}, '/wapi/v2.10/dtc:pool': {'get': {'tags': ['dtc:pool'], 'parameters': [{'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}, {'name': '_return_fields+', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma, this returns the required fields along with the default fields', 'schema': {'type': 'string'}}, {'name': '_max_results', 'in': 'query', 'required': False, 'description': 'Enter the number of results to be fetched', 'schema': {'type': 'integer', 'minimum': 1}}, {'name': '_return_as_object', 'in': 'query', 'required': False, 'description': 'Select 1 if result is required as a object', 'schema': {'type': 'integer', 'enum': [0, 1], 'default': 0}}, {'name': '_paging', 'in': 'query', 'required': False, 'description': 'Select 1 if paging is required. If SET, _max_results and _return_as_object must be entered.', 'schema': {'type': 'integer', 'enum': [0, 1], 'default': 0}}, {'name': ' _page_id', 'in': 'query', 'required': False, 'description': 'Enter the page ID for fetching next page', 'schema': {'type': 'string'}}, {'name': 'comment', 'in': 'query', 'required': False, 'description': 'Enter the value of the field', 'schema': {'type': 'string'}}, {'name': 'name', 'in': 'query', 'required': False, 'description': 'Enter the value of the field', 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_pool'}}}}}, 'security': [{'basicAuth': []}]}, 'post': {'tags': ['dtc:pool'], 'parameters': [{'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Enter the request body here', 'required': True, 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'availability': {'type': 'string', 'example': "['ALL', 'ANY', 'QUORUM']"}, 'comment': {'type': 'string', 'example': 'string'}, 'consolidated_monitors': {'type': 'string', 'example': "[{'members': 'string', 'monitor': 'string', 'availability': 'enum'}]"}, 'disable': {'type': 'string', 'example': 'bool'}, 'extattrs': {'type': 'string', 'example': 'extattr'}, 'lb_alternate_method': {'type': 'string', 'example': "['GLOBAL_AVAILABILITY', 'RATIO', 'ROUND_ROBIN', 'TOPOLOGY', 'ALL_AVAILABLE', 'DYNAMIC_RATIO']"}, 'lb_alternate_topology': {'type': 'string', 'example': 'string'}, 'lb_dynamic_ratio_alternate': {'type': 'string', 'example': 'setting:dynamicratio'}, 'lb_dynamic_ratio_preferred': {'type': 'string', 'example': 'setting:dynamicratio'}, 'lb_preferred_method': {'type': 'string', 'example': "['GLOBAL_AVAILABILITY', 'RATIO', 'ROUND_ROBIN', 'TOPOLOGY', 'ALL_AVAILABLE', 'DYNAMIC_RATIO']"}, 'lb_preferred_topology': {'type': 'string', 'example': 'string'}, 'monitors': {'type': 'string', 'example': 'dtc:monitor:http'}, 'name': {'type': 'string', 'example': 'string'}, 'quorum': {'type': 'string', 'example': 'uint'}, 'servers': {'type': 'string', 'example': "[{'server': 'string', 'ratio': 'uint'}]"}, 'ttl': {'type': 'string', 'example': 'uint'}, 'use_ttl': {'type': 'string', 'example': 'bool'}}}}}}, 'responses': {'201': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_pool'}}}}}, 'security': [{'basicAuth': []}]}}, '/wapi/v2.10/dtc:pool/{dtc:pool_reference}': {'get': {'tags': ['dtc:pool'], 'parameters': [{'name': 'dtc:pool_reference', 'in': 'path', 'required': True, 'description': 'Enter the reference for dtc:pool', 'schema': {'type': 'string', 'example': 'resourceID:resourceName'}}, {'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}, {'name': '_return_fields+', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma, this returns the required fields along with the default fields', 'schema': {'type': 'string'}}, {'name': '_return_as_object', 'in': 'query', 'required': False, 'description': 'Select 1 if result is required as a object', 'schema': {'type': 'integer', 'enum': [0, 1], 'default': 0}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_pool'}}}}}, 'security': [{'basicAuth': []}]}, 'put': {'description': 'Update the dtc:pool resource', 'tags': ['dtc:pool'], 'parameters': [{'name': 'dtc:pool_reference', 'in': 'path', 'required': True, 'description': 'Enter the reference for dtc:pool', 'schema': {'type': 'string', 'example': 'resourceID:resourceName'}}, {'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Enter the request body here', 'required': True, 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'availability': {'type': 'string', 'example': "['ALL', 'ANY', 'QUORUM']"}, 'comment': {'type': 'string', 'example': 'string'}, 'consolidated_monitors': {'type': 'string', 'example': "[{'members': 'string', 'monitor': 'string', 'availability': 'enum'}]"}, 'disable': {'type': 'string', 'example': 'bool'}, 'extattrs': {'type': 'string', 'example': 'extattr'}, 'lb_alternate_method': {'type': 'string', 'example': "['GLOBAL_AVAILABILITY', 'RATIO', 'ROUND_ROBIN', 'TOPOLOGY', 'ALL_AVAILABLE', 'DYNAMIC_RATIO']"}, 'lb_alternate_topology': {'type': 'string', 'example': 'string'}, 'lb_dynamic_ratio_alternate': {'type': 'string', 'example': 'setting:dynamicratio'}, 'lb_dynamic_ratio_preferred': {'type': 'string', 'example': 'setting:dynamicratio'}, 'lb_preferred_method': {'type': 'string', 'example': "['GLOBAL_AVAILABILITY', 'RATIO', 'ROUND_ROBIN', 'TOPOLOGY', 'ALL_AVAILABLE', 'DYNAMIC_RATIO']"}, 'lb_preferred_topology': {'type': 'string', 'example': 'string'}, 'monitors': {'type': 'string', 'example': 'dtc:monitor:http'}, 'name': {'type': 'string', 'example': 'string'}, 'quorum': {'type': 'string', 'example': 'uint'}, 'servers': {'type': 'string', 'example': "[{'server': 'string', 'ratio': 'uint'}]"}, 'ttl': {'type': 'string', 'example': 'uint'}, 'use_ttl': {'type': 'string', 'example': 'bool'}}}}}}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_pool'}}}}}, 'security': [{'basicAuth': []}]}, 'delete': {'description': 'Delete the dtc:pool resource', 'tags': ['dtc:pool'], 'parameters': [{'name': 'dtc:pool_reference', 'in': 'path', 'required': True, 'description': 'Enter the reference for dtc:pool', 'schema': {'type': 'string', 'example': 'resourceID:resourceName'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'$ref': {'type': 'string', 'description': 'Reference of the deleted string'}}}}}}}, 'security': [{'basicAuth': []}]}}, '/wapi/v2.10/dtc:record:a': {'get': {'tags': ['dtc:record:a'], 'parameters': [{'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}, {'name': '_return_fields+', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma, this returns the required fields along with the default fields', 'schema': {'type': 'string'}}, {'name': '_max_results', 'in': 'query', 'required': False, 'description': 'Enter the number of results to be fetched', 'schema': {'type': 'integer', 'minimum': 1}}, {'name': '_return_as_object', 'in': 'query', 'required': False, 'description': 'Select 1 if result is required as a object', 'schema': {'type': 'integer', 'enum': [0, 1], 'default': 0}}, {'name': '_paging', 'in': 'query', 'required': False, 'description': 'Select 1 if paging is required. If SET, _max_results and _return_as_object must be entered.', 'schema': {'type': 'integer', 'enum': [0, 1], 'default': 0}}, {'name': ' _page_id', 'in': 'query', 'required': False, 'description': 'Enter the page ID for fetching next page', 'schema': {'type': 'string'}}, {'name': 'comment', 'in': 'query', 'required': False, 'description': 'Enter the value of the field', 'schema': {'type': 'string'}}, {'name': 'dtc_server', 'in': 'query', 'required': False, 'description': 'Enter the value of the field', 'schema': {'type': 'string'}}, {'name': 'ipv4addr', 'in': 'query', 'required': False, 'description': 'Enter the value of the field', 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_record_a'}}}}}, 'security': [{'basicAuth': []}]}, 'post': {'tags': ['dtc:record:a'], 'parameters': [{'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Enter the request body here', 'required': True, 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'comment': {'type': 'string', 'example': 'string'}, 'disable': {'type': 'string', 'example': 'bool'}, 'dtc_server': {'type': 'string', 'example': 'string'}, 'ipv4addr': {'type': 'string', 'example': 'string'}, 'ttl': {'type': 'string', 'example': 'uint'}, 'use_ttl': {'type': 'string', 'example': 'bool'}}}}}}, 'responses': {'201': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_record_a'}}}}}, 'security': [{'basicAuth': []}]}}, '/wapi/v2.10/dtc:record:a/{dtc:record:a_reference}': {'get': {'tags': ['dtc:record:a'], 'parameters': [{'name': 'dtc:record:a_reference', 'in': 'path', 'required': True, 'description': 'Enter the reference for dtc:record:a', 'schema': {'type': 'string', 'example': 'resourceID:resourceName'}}, {'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}, {'name': '_return_fields+', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma, this returns the required fields along with the default fields', 'schema': {'type': 'string'}}, {'name': '_return_as_object', 'in': 'query', 'required': False, 'description': 'Select 1 if result is required as a object', 'schema': {'type': 'integer', 'enum': [0, 1], 'default': 0}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_record_a'}}}}}, 'security': [{'basicAuth': []}]}, 'put': {'description': 'Update the dtc:record:a resource', 'tags': ['dtc:record:a'], 'parameters': [{'name': 'dtc:record:a_reference', 'in': 'path', 'required': True, 'description': 'Enter the reference for dtc:record:a', 'schema': {'type': 'string', 'example': 'resourceID:resourceName'}}, {'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Enter the request body here', 'required': True, 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'comment': {'type': 'string', 'example': 'string'}, 'disable': {'type': 'string', 'example': 'bool'}, 'ipv4addr': {'type': 'string', 'example': 'string'}, 'ttl': {'type': 'string', 'example': 'uint'}, 'use_ttl': {'type': 'string', 'example': 'bool'}}}}}}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_record_a'}}}}}, 'security': [{'basicAuth': []}]}, 'delete': {'description': 'Delete the dtc:record:a resource', 'tags': ['dtc:record:a'], 'parameters': [{'name': 'dtc:record:a_reference', 'in': 'path', 'required': True, 'description': 'Enter the reference for dtc:record:a', 'schema': {'type': 'string', 'example': 'resourceID:resourceName'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'$ref': {'type': 'string', 'description': 'Reference of the deleted string'}}}}}}}, 'security': [{'basicAuth': []}]}}, '/wapi/v2.10/dtc:record:aaaa': {'get': {'tags': ['dtc:record:aaaa'], 'parameters': [{'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}, {'name': '_return_fields+', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma, this returns the required fields along with the default fields', 'schema': {'type': 'string'}}, {'name': '_max_results', 'in': 'query', 'required': False, 'description': 'Enter the number of results to be fetched', 'schema': {'type': 'integer', 'minimum': 1}}, {'name': '_return_as_object', 'in': 'query', 'required': False, 'description': 'Select 1 if result is required as a object', 'schema': {'type': 'integer', 'enum': [0, 1], 'default': 0}}, {'name': '_paging', 'in': 'query', 'required': False, 'description': 'Select 1 if paging is required. If SET, _max_results and _return_as_object must be entered.', 'schema': {'type': 'integer', 'enum': [0, 1], 'default': 0}}, {'name': ' _page_id', 'in': 'query', 'required': False, 'description': 'Enter the page ID for fetching next page', 'schema': {'type': 'string'}}, {'name': 'comment', 'in': 'query', 'required': False, 'description': 'Enter the value of the field', 'schema': {'type': 'string'}}, {'name': 'dtc_server', 'in': 'query', 'required': False, 'description': 'Enter the value of the field', 'schema': {'type': 'string'}}, {'name': 'ipv6addr', 'in': 'query', 'required': False, 'description': 'Enter the value of the field', 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_record_aaaa'}}}}}, 'security': [{'basicAuth': []}]}, 'post': {'tags': ['dtc:record:aaaa'], 'parameters': [{'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Enter the request body here', 'required': True, 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'comment': {'type': 'string', 'example': 'string'}, 'disable': {'type': 'string', 'example': 'bool'}, 'dtc_server': {'type': 'string', 'example': 'string'}, 'ipv6addr': {'type': 'string', 'example': 'string'}, 'ttl': {'type': 'string', 'example': 'uint'}, 'use_ttl': {'type': 'string', 'example': 'bool'}}}}}}, 'responses': {'201': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_record_aaaa'}}}}}, 'security': [{'basicAuth': []}]}}, '/wapi/v2.10/dtc:record:aaaa/{dtc:record:aaaa_reference}': {'get': {'tags': ['dtc:record:aaaa'], 'parameters': [{'name': 'dtc:record:aaaa_reference', 'in': 'path', 'required': True, 'description': 'Enter the reference for dtc:record:aaaa', 'schema': {'type': 'string', 'example': 'resourceID:resourceName'}}, {'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}, {'name': '_return_fields+', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma, this returns the required fields along with the default fields', 'schema': {'type': 'string'}}, {'name': '_return_as_object', 'in': 'query', 'required': False, 'description': 'Select 1 if result is required as a object', 'schema': {'type': 'integer', 'enum': [0, 1], 'default': 0}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_record_aaaa'}}}}}, 'security': [{'basicAuth': []}]}, 'put': {'description': 'Update the dtc:record:aaaa resource', 'tags': ['dtc:record:aaaa'], 'parameters': [{'name': 'dtc:record:aaaa_reference', 'in': 'path', 'required': True, 'description': 'Enter the reference for dtc:record:aaaa', 'schema': {'type': 'string', 'example': 'resourceID:resourceName'}}, {'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Enter the request body here', 'required': True, 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'comment': {'type': 'string', 'example': 'string'}, 'disable': {'type': 'string', 'example': 'bool'}, 'ipv6addr': {'type': 'string', 'example': 'string'}, 'ttl': {'type': 'string', 'example': 'uint'}, 'use_ttl': {'type': 'string', 'example': 'bool'}}}}}}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_record_aaaa'}}}}}, 'security': [{'basicAuth': []}]}, 'delete': {'description': 'Delete the dtc:record:aaaa resource', 'tags': ['dtc:record:aaaa'], 'parameters': [{'name': 'dtc:record:aaaa_reference', 'in': 'path', 'required': True, 'description': 'Enter the reference for dtc:record:aaaa', 'schema': {'type': 'string', 'example': 'resourceID:resourceName'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'$ref': {'type': 'string', 'description': 'Reference of the deleted string'}}}}}}}, 'security': [{'basicAuth': []}]}}, '/wapi/v2.10/dtc:record:cname': {'get': {'tags': ['dtc:record:cname'], 'parameters': [{'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}, {'name': '_return_fields+', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma, this returns the required fields along with the default fields', 'schema': {'type': 'string'}}, {'name': '_max_results', 'in': 'query', 'required': False, 'description': 'Enter the number of results to be fetched', 'schema': {'type': 'integer', 'minimum': 1}}, {'name': '_return_as_object', 'in': 'query', 'required': False, 'description': 'Select 1 if result is required as a object', 'schema': {'type': 'integer', 'enum': [0, 1], 'default': 0}}, {'name': '_paging', 'in': 'query', 'required': False, 'description': 'Select 1 if paging is required. If SET, _max_results and _return_as_object must be entered.', 'schema': {'type': 'integer', 'enum': [0, 1], 'default': 0}}, {'name': ' _page_id', 'in': 'query', 'required': False, 'description': 'Enter the page ID for fetching next page', 'schema': {'type': 'string'}}, {'name': 'canonical', 'in': 'query', 'required': False, 'description': 'Enter the value of the field', 'schema': {'type': 'string'}}, {'name': 'comment', 'in': 'query', 'required': False, 'description': 'Enter the value of the field', 'schema': {'type': 'string'}}, {'name': 'dtc_server', 'in': 'query', 'required': False, 'description': 'Enter the value of the field', 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_record_cname'}}}}}, 'security': [{'basicAuth': []}]}, 'post': {'tags': ['dtc:record:cname'], 'parameters': [{'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Enter the request body here', 'required': True, 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'canonical': {'type': 'string', 'example': 'string'}, 'comment': {'type': 'string', 'example': 'string'}, 'disable': {'type': 'string', 'example': 'bool'}, 'dtc_server': {'type': 'string', 'example': 'string'}, 'ttl': {'type': 'string', 'example': 'uint'}, 'use_ttl': {'type': 'string', 'example': 'bool'}}}}}}, 'responses': {'201': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_record_cname'}}}}}, 'security': [{'basicAuth': []}]}}, '/wapi/v2.10/dtc:record:cname/{dtc:record:cname_reference}': {'get': {'tags': ['dtc:record:cname'], 'parameters': [{'name': 'dtc:record:cname_reference', 'in': 'path', 'required': True, 'description': 'Enter the reference for dtc:record:cname', 'schema': {'type': 'string', 'example': 'resourceID:resourceName'}}, {'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}, {'name': '_return_fields+', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma, this returns the required fields along with the default fields', 'schema': {'type': 'string'}}, {'name': '_return_as_object', 'in': 'query', 'required': False, 'description': 'Select 1 if result is required as a object', 'schema': {'type': 'integer', 'enum': [0, 1], 'default': 0}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_record_cname'}}}}}, 'security': [{'basicAuth': []}]}, 'put': {'description': 'Update the dtc:record:cname resource', 'tags': ['dtc:record:cname'], 'parameters': [{'name': 'dtc:record:cname_reference', 'in': 'path', 'required': True, 'description': 'Enter the reference for dtc:record:cname', 'schema': {'type': 'string', 'example': 'resourceID:resourceName'}}, {'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Enter the request body here', 'required': True, 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'canonical': {'type': 'string', 'example': 'string'}, 'comment': {'type': 'string', 'example': 'string'}, 'disable': {'type': 'string', 'example': 'bool'}, 'ttl': {'type': 'string', 'example': 'uint'}, 'use_ttl': {'type': 'string', 'example': 'bool'}}}}}}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_record_cname'}}}}}, 'security': [{'basicAuth': []}]}, 'delete': {'description': 'Delete the dtc:record:cname resource', 'tags': ['dtc:record:cname'], 'parameters': [{'name': 'dtc:record:cname_reference', 'in': 'path', 'required': True, 'description': 'Enter the reference for dtc:record:cname', 'schema': {'type': 'string', 'example': 'resourceID:resourceName'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'$ref': {'type': 'string', 'description': 'Reference of the deleted string'}}}}}}}, 'security': [{'basicAuth': []}]}}, '/wapi/v2.10/dtc:record:naptr': {'get': {'tags': ['dtc:record:naptr'], 'parameters': [{'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}, {'name': '_return_fields+', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma, this returns the required fields along with the default fields', 'schema': {'type': 'string'}}, {'name': '_max_results', 'in': 'query', 'required': False, 'description': 'Enter the number of results to be fetched', 'schema': {'type': 'integer', 'minimum': 1}}, {'name': '_return_as_object', 'in': 'query', 'required': False, 'description': 'Select 1 if result is required as a object', 'schema': {'type': 'integer', 'enum': [0, 1], 'default': 0}}, {'name': '_paging', 'in': 'query', 'required': False, 'description': 'Select 1 if paging is required. If SET, _max_results and _return_as_object must be entered.', 'schema': {'type': 'integer', 'enum': [0, 1], 'default': 0}}, {'name': ' _page_id', 'in': 'query', 'required': False, 'description': 'Enter the page ID for fetching next page', 'schema': {'type': 'string'}}, {'name': 'comment', 'in': 'query', 'required': False, 'description': 'Enter the value of the field', 'schema': {'type': 'string'}}, {'name': 'dtc_server', 'in': 'query', 'required': False, 'description': 'Enter the value of the field', 'schema': {'type': 'string'}}, {'name': 'flags', 'in': 'query', 'required': False, 'description': 'Enter the value of the field', 'schema': {'type': 'string'}}, {'name': 'order', 'in': 'query', 'required': False, 'description': 'Enter the value of the field', 'schema': {'type': 'string'}}, {'name': 'preference', 'in': 'query', 'required': False, 'description': 'Enter the value of the field', 'schema': {'type': 'string'}}, {'name': 'replacement', 'in': 'query', 'required': False, 'description': 'Enter the value of the field', 'schema': {'type': 'string'}}, {'name': 'services', 'in': 'query', 'required': False, 'description': 'Enter the value of the field', 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_record_naptr'}}}}}, 'security': [{'basicAuth': []}]}, 'post': {'tags': ['dtc:record:naptr'], 'parameters': [{'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Enter the request body here', 'required': True, 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'comment': {'type': 'string', 'example': 'string'}, 'disable': {'type': 'string', 'example': 'bool'}, 'dtc_server': {'type': 'string', 'example': 'string'}, 'flags': {'type': 'string', 'example': 'string'}, 'order': {'type': 'string', 'example': 'uint'}, 'preference': {'type': 'string', 'example': 'uint'}, 'regexp': {'type': 'string', 'example': 'string'}, 'replacement': {'type': 'string', 'example': 'string'}, 'services': {'type': 'string', 'example': 'string'}, 'ttl': {'type': 'string', 'example': 'uint'}, 'use_ttl': {'type': 'string', 'example': 'bool'}}}}}}, 'responses': {'201': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_record_naptr'}}}}}, 'security': [{'basicAuth': []}]}}, '/wapi/v2.10/dtc:record:naptr/{dtc:record:naptr_reference}': {'get': {'tags': ['dtc:record:naptr'], 'parameters': [{'name': 'dtc:record:naptr_reference', 'in': 'path', 'required': True, 'description': 'Enter the reference for dtc:record:naptr', 'schema': {'type': 'string', 'example': 'resourceID:resourceName'}}, {'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}, {'name': '_return_fields+', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma, this returns the required fields along with the default fields', 'schema': {'type': 'string'}}, {'name': '_return_as_object', 'in': 'query', 'required': False, 'description': 'Select 1 if result is required as a object', 'schema': {'type': 'integer', 'enum': [0, 1], 'default': 0}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_record_naptr'}}}}}, 'security': [{'basicAuth': []}]}, 'put': {'description': 'Update the dtc:record:naptr resource', 'tags': ['dtc:record:naptr'], 'parameters': [{'name': 'dtc:record:naptr_reference', 'in': 'path', 'required': True, 'description': 'Enter the reference for dtc:record:naptr', 'schema': {'type': 'string', 'example': 'resourceID:resourceName'}}, {'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Enter the request body here', 'required': True, 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'comment': {'type': 'string', 'example': 'string'}, 'disable': {'type': 'string', 'example': 'bool'}, 'flags': {'type': 'string', 'example': 'string'}, 'order': {'type': 'string', 'example': 'uint'}, 'preference': {'type': 'string', 'example': 'uint'}, 'regexp': {'type': 'string', 'example': 'string'}, 'replacement': {'type': 'string', 'example': 'string'}, 'services': {'type': 'string', 'example': 'string'}, 'ttl': {'type': 'string', 'example': 'uint'}, 'use_ttl': {'type': 'string', 'example': 'bool'}}}}}}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_record_naptr'}}}}}, 'security': [{'basicAuth': []}]}, 'delete': {'description': 'Delete the dtc:record:naptr resource', 'tags': ['dtc:record:naptr'], 'parameters': [{'name': 'dtc:record:naptr_reference', 'in': 'path', 'required': True, 'description': 'Enter the reference for dtc:record:naptr', 'schema': {'type': 'string', 'example': 'resourceID:resourceName'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'$ref': {'type': 'string', 'description': 'Reference of the deleted string'}}}}}}}, 'security': [{'basicAuth': []}]}}, '/wapi/v2.10/dtc:record:srv': {'get': {'tags': ['dtc:record:srv'], 'parameters': [{'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}, {'name': '_return_fields+', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma, this returns the required fields along with the default fields', 'schema': {'type': 'string'}}, {'name': '_max_results', 'in': 'query', 'required': False, 'description': 'Enter the number of results to be fetched', 'schema': {'type': 'integer', 'minimum': 1}}, {'name': '_return_as_object', 'in': 'query', 'required': False, 'description': 'Select 1 if result is required as a object', 'schema': {'type': 'integer', 'enum': [0, 1], 'default': 0}}, {'name': '_paging', 'in': 'query', 'required': False, 'description': 'Select 1 if paging is required. If SET, _max_results and _return_as_object must be entered.', 'schema': {'type': 'integer', 'enum': [0, 1], 'default': 0}}, {'name': ' _page_id', 'in': 'query', 'required': False, 'description': 'Enter the page ID for fetching next page', 'schema': {'type': 'string'}}, {'name': 'comment', 'in': 'query', 'required': False, 'description': 'Enter the value of the field', 'schema': {'type': 'string'}}, {'name': 'dtc_server', 'in': 'query', 'required': False, 'description': 'Enter the value of the field', 'schema': {'type': 'string'}}, {'name': 'name', 'in': 'query', 'required': False, 'description': 'Enter the value of the field', 'schema': {'type': 'string'}}, {'name': 'port', 'in': 'query', 'required': False, 'description': 'Enter the value of the field', 'schema': {'type': 'string'}}, {'name': 'priority', 'in': 'query', 'required': False, 'description': 'Enter the value of the field', 'schema': {'type': 'string'}}, {'name': 'target', 'in': 'query', 'required': False, 'description': 'Enter the value of the field', 'schema': {'type': 'string'}}, {'name': 'weight', 'in': 'query', 'required': False, 'description': 'Enter the value of the field', 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_record_srv'}}}}}, 'security': [{'basicAuth': []}]}, 'post': {'tags': ['dtc:record:srv'], 'parameters': [{'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Enter the request body here', 'required': True, 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'comment': {'type': 'string', 'example': 'string'}, 'disable': {'type': 'string', 'example': 'bool'}, 'dtc_server': {'type': 'string', 'example': 'string'}, 'name': {'type': 'string', 'example': 'string'}, 'port': {'type': 'string', 'example': 'uint'}, 'priority': {'type': 'string', 'example': 'uint'}, 'target': {'type': 'string', 'example': 'string'}, 'ttl': {'type': 'string', 'example': 'uint'}, 'use_ttl': {'type': 'string', 'example': 'bool'}, 'weight': {'type': 'string', 'example': 'uint'}}}}}}, 'responses': {'201': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_record_srv'}}}}}, 'security': [{'basicAuth': []}]}}, '/wapi/v2.10/dtc:record:srv/{dtc:record:srv_reference}': {'get': {'tags': ['dtc:record:srv'], 'parameters': [{'name': 'dtc:record:srv_reference', 'in': 'path', 'required': True, 'description': 'Enter the reference for dtc:record:srv', 'schema': {'type': 'string', 'example': 'resourceID:resourceName'}}, {'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}, {'name': '_return_fields+', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma, this returns the required fields along with the default fields', 'schema': {'type': 'string'}}, {'name': '_return_as_object', 'in': 'query', 'required': False, 'description': 'Select 1 if result is required as a object', 'schema': {'type': 'integer', 'enum': [0, 1], 'default': 0}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_record_srv'}}}}}, 'security': [{'basicAuth': []}]}, 'put': {'description': 'Update the dtc:record:srv resource', 'tags': ['dtc:record:srv'], 'parameters': [{'name': 'dtc:record:srv_reference', 'in': 'path', 'required': True, 'description': 'Enter the reference for dtc:record:srv', 'schema': {'type': 'string', 'example': 'resourceID:resourceName'}}, {'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Enter the request body here', 'required': True, 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'comment': {'type': 'string', 'example': 'string'}, 'disable': {'type': 'string', 'example': 'bool'}, 'name': {'type': 'string', 'example': 'string'}, 'port': {'type': 'string', 'example': 'uint'}, 'priority': {'type': 'string', 'example': 'uint'}, 'target': {'type': 'string', 'example': 'string'}, 'ttl': {'type': 'string', 'example': 'uint'}, 'use_ttl': {'type': 'string', 'example': 'bool'}, 'weight': {'type': 'string', 'example': 'uint'}}}}}}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_record_srv'}}}}}, 'security': [{'basicAuth': []}]}, 'delete': {'description': 'Delete the dtc:record:srv resource', 'tags': ['dtc:record:srv'], 'parameters': [{'name': 'dtc:record:srv_reference', 'in': 'path', 'required': True, 'description': 'Enter the reference for dtc:record:srv', 'schema': {'type': 'string', 'example': 'resourceID:resourceName'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'$ref': {'type': 'string', 'description': 'Reference of the deleted string'}}}}}}}, 'security': [{'basicAuth': []}]}}, '/wapi/v2.10/dtc:server': {'get': {'tags': ['dtc:server'], 'parameters': [{'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}, {'name': '_return_fields+', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma, this returns the required fields along with the default fields', 'schema': {'type': 'string'}}, {'name': '_max_results', 'in': 'query', 'required': False, 'description': 'Enter the number of results to be fetched', 'schema': {'type': 'integer', 'minimum': 1}}, {'name': '_return_as_object', 'in': 'query', 'required': False, 'description': 'Select 1 if result is required as a object', 'schema': {'type': 'integer', 'enum': [0, 1], 'default': 0}}, {'name': '_paging', 'in': 'query', 'required': False, 'description': 'Select 1 if paging is required. If SET, _max_results and _return_as_object must be entered.', 'schema': {'type': 'integer', 'enum': [0, 1], 'default': 0}}, {'name': ' _page_id', 'in': 'query', 'required': False, 'description': 'Enter the page ID for fetching next page', 'schema': {'type': 'string'}}, {'name': 'comment', 'in': 'query', 'required': False, 'description': 'Enter the value of the field', 'schema': {'type': 'string'}}, {'name': 'host', 'in': 'query', 'required': False, 'description': 'Enter the value of the field', 'schema': {'type': 'string'}}, {'name': 'name', 'in': 'query', 'required': False, 'description': 'Enter the value of the field', 'schema': {'type': 'string'}}, {'name': 'sni_hostname', 'in': 'query', 'required': False, 'description': 'Enter the value of the field', 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_server'}}}}}, 'security': [{'basicAuth': []}]}, 'post': {'tags': ['dtc:server'], 'parameters': [{'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Enter the request body here', 'required': True, 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'auto_create_host_record': {'type': 'string', 'example': 'bool'}, 'comment': {'type': 'string', 'example': 'string'}, 'disable': {'type': 'string', 'example': 'bool'}, 'extattrs': {'type': 'string', 'example': 'extattr'}, 'host': {'type': 'string', 'example': 'string'}, 'monitors': {'type': 'string', 'example': "[{'monitor': 'string', 'host': 'string'}]"}, 'name': {'type': 'string', 'example': 'string'}, 'sni_hostname': {'type': 'string', 'example': 'string'}, 'use_sni_hostname': {'type': 'string', 'example': 'bool'}}}}}}, 'responses': {'201': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_server'}}}}}, 'security': [{'basicAuth': []}]}}, '/wapi/v2.10/dtc:server/{dtc:server_reference}': {'get': {'tags': ['dtc:server'], 'parameters': [{'name': 'dtc:server_reference', 'in': 'path', 'required': True, 'description': 'Enter the reference for dtc:server', 'schema': {'type': 'string', 'example': 'resourceID:resourceName'}}, {'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}, {'name': '_return_fields+', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma, this returns the required fields along with the default fields', 'schema': {'type': 'string'}}, {'name': '_return_as_object', 'in': 'query', 'required': False, 'description': 'Select 1 if result is required as a object', 'schema': {'type': 'integer', 'enum': [0, 1], 'default': 0}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_server'}}}}}, 'security': [{'basicAuth': []}]}, 'put': {'description': 'Update the dtc:server resource', 'tags': ['dtc:server'], 'parameters': [{'name': 'dtc:server_reference', 'in': 'path', 'required': True, 'description': 'Enter the reference for dtc:server', 'schema': {'type': 'string', 'example': 'resourceID:resourceName'}}, {'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Enter the request body here', 'required': True, 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'auto_create_host_record': {'type': 'string', 'example': 'bool'}, 'comment': {'type': 'string', 'example': 'string'}, 'disable': {'type': 'string', 'example': 'bool'}, 'extattrs': {'type': 'string', 'example': 'extattr'}, 'host': {'type': 'string', 'example': 'string'}, 'monitors': {'type': 'string', 'example': "[{'monitor': 'string', 'host': 'string'}]"}, 'name': {'type': 'string', 'example': 'string'}, 'sni_hostname': {'type': 'string', 'example': 'string'}, 'use_sni_hostname': {'type': 'string', 'example': 'bool'}}}}}}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_server'}}}}}, 'security': [{'basicAuth': []}]}, 'delete': {'description': 'Delete the dtc:server resource', 'tags': ['dtc:server'], 'parameters': [{'name': 'dtc:server_reference', 'in': 'path', 'required': True, 'description': 'Enter the reference for dtc:server', 'schema': {'type': 'string', 'example': 'resourceID:resourceName'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'$ref': {'type': 'string', 'description': 'Reference of the deleted string'}}}}}}}, 'security': [{'basicAuth': []}]}}, '/wapi/v2.10/dtc:topology': {'get': {'tags': ['dtc:topology'], 'parameters': [{'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}, {'name': '_return_fields+', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma, this returns the required fields along with the default fields', 'schema': {'type': 'string'}}, {'name': '_max_results', 'in': 'query', 'required': False, 'description': 'Enter the number of results to be fetched', 'schema': {'type': 'integer', 'minimum': 1}}, {'name': '_return_as_object', 'in': 'query', 'required': False, 'description': 'Select 1 if result is required as a object', 'schema': {'type': 'integer', 'enum': [0, 1], 'default': 0}}, {'name': '_paging', 'in': 'query', 'required': False, 'description': 'Select 1 if paging is required. If SET, _max_results and _return_as_object must be entered.', 'schema': {'type': 'integer', 'enum': [0, 1], 'default': 0}}, {'name': ' _page_id', 'in': 'query', 'required': False, 'description': 'Enter the page ID for fetching next page', 'schema': {'type': 'string'}}, {'name': 'comment', 'in': 'query', 'required': False, 'description': 'Enter the value of the field', 'schema': {'type': 'string'}}, {'name': 'name', 'in': 'query', 'required': False, 'description': 'Enter the value of the field', 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_topology'}}}}}, 'security': [{'basicAuth': []}]}, 'post': {'tags': ['dtc:topology'], 'parameters': [{'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Enter the request body here', 'required': True, 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'comment': {'type': 'string', 'example': 'string'}, 'extattrs': {'type': 'string', 'example': 'extattr'}, 'name': {'type': 'string', 'example': 'string'}, 'rules': {'type': 'string', 'example': 'dtc:topology:rule'}}}}}}, 'responses': {'201': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_topology'}}}}}, 'security': [{'basicAuth': []}]}}, '/wapi/v2.10/dtc:topology/{dtc:topology_reference}': {'get': {'tags': ['dtc:topology'], 'parameters': [{'name': 'dtc:topology_reference', 'in': 'path', 'required': True, 'description': 'Enter the reference for dtc:topology', 'schema': {'type': 'string', 'example': 'resourceID:resourceName'}}, {'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}, {'name': '_return_fields+', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma, this returns the required fields along with the default fields', 'schema': {'type': 'string'}}, {'name': '_return_as_object', 'in': 'query', 'required': False, 'description': 'Select 1 if result is required as a object', 'schema': {'type': 'integer', 'enum': [0, 1], 'default': 0}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_topology'}}}}}, 'security': [{'basicAuth': []}]}, 'put': {'description': 'Update the dtc:topology resource', 'tags': ['dtc:topology'], 'parameters': [{'name': 'dtc:topology_reference', 'in': 'path', 'required': True, 'description': 'Enter the reference for dtc:topology', 'schema': {'type': 'string', 'example': 'resourceID:resourceName'}}, {'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Enter the request body here', 'required': True, 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'comment': {'type': 'string', 'example': 'string'}, 'extattrs': {'type': 'string', 'example': 'extattr'}, 'name': {'type': 'string', 'example': 'string'}, 'rules': {'type': 'string', 'example': 'dtc:topology:rule'}}}}}}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_topology'}}}}}, 'security': [{'basicAuth': []}]}, 'delete': {'description': 'Delete the dtc:topology resource', 'tags': ['dtc:topology'], 'parameters': [{'name': 'dtc:topology_reference', 'in': 'path', 'required': True, 'description': 'Enter the reference for dtc:topology', 'schema': {'type': 'string', 'example': 'resourceID:resourceName'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'$ref': {'type': 'string', 'description': 'Reference of the deleted string'}}}}}}}, 'security': [{'basicAuth': []}]}}, '/wapi/v2.10/dtc:topology:label': {'get': {'tags': ['dtc:topology:label'], 'parameters': [{'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}, {'name': '_return_fields+', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma, this returns the required fields along with the default fields', 'schema': {'type': 'string'}}, {'name': '_max_results', 'in': 'query', 'required': False, 'description': 'Enter the number of results to be fetched', 'schema': {'type': 'integer', 'minimum': 1}}, {'name': '_return_as_object', 'in': 'query', 'required': False, 'description': 'Select 1 if result is required as a object', 'schema': {'type': 'integer', 'enum': [0, 1], 'default': 0}}, {'name': '_paging', 'in': 'query', 'required': False, 'description': 'Select 1 if paging is required. If SET, _max_results and _return_as_object must be entered.', 'schema': {'type': 'integer', 'enum': [0, 1], 'default': 0}}, {'name': ' _page_id', 'in': 'query', 'required': False, 'description': 'Enter the page ID for fetching next page', 'schema': {'type': 'string'}}, {'name': 'field', 'in': 'query', 'required': False, 'description': 'Enter the value of the field', 'schema': {'type': 'string'}}, {'name': 'label', 'in': 'query', 'required': False, 'description': 'Enter the value of the field', 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_topology_label'}}}}}, 'security': [{'basicAuth': []}]}}, '/wapi/v2.10/dtc:topology:label/{dtc:topology:label_reference}': {'get': {'tags': ['dtc:topology:label'], 'parameters': [{'name': 'dtc:topology:label_reference', 'in': 'path', 'required': True, 'description': 'Enter the reference for dtc:topology:label', 'schema': {'type': 'string', 'example': 'resourceID:resourceName'}}, {'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}, {'name': '_return_fields+', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma, this returns the required fields along with the default fields', 'schema': {'type': 'string'}}, {'name': '_return_as_object', 'in': 'query', 'required': False, 'description': 'Select 1 if result is required as a object', 'schema': {'type': 'integer', 'enum': [0, 1], 'default': 0}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_topology_label'}}}}}, 'security': [{'basicAuth': []}]}}, '/wapi/v2.10/dtc:topology:rule': {'get': {'tags': ['dtc:topology:rule'], 'parameters': [{'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}, {'name': '_return_fields+', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma, this returns the required fields along with the default fields', 'schema': {'type': 'string'}}, {'name': '_max_results', 'in': 'query', 'required': False, 'description': 'Enter the number of results to be fetched', 'schema': {'type': 'integer', 'minimum': 1}}, {'name': '_return_as_object', 'in': 'query', 'required': False, 'description': 'Select 1 if result is required as a object', 'schema': {'type': 'integer', 'enum': [0, 1], 'default': 0}}, {'name': '_paging', 'in': 'query', 'required': False, 'description': 'Select 1 if paging is required. If SET, _max_results and _return_as_object must be entered.', 'schema': {'type': 'integer', 'enum': [0, 1], 'default': 0}}, {'name': ' _page_id', 'in': 'query', 'required': False, 'description': 'Enter the page ID for fetching next page', 'schema': {'type': 'string'}}, {'name': 'topology', 'in': 'query', 'required': False, 'description': 'Enter the value of the field', 'schema': {'type': 'string'}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_topology_rule'}}}}}, 'security': [{'basicAuth': []}]}}, '/wapi/v2.10/dtc:topology:rule/{dtc:topology:rule_reference}': {'get': {'tags': ['dtc:topology:rule'], 'parameters': [{'name': 'dtc:topology:rule_reference', 'in': 'path', 'required': True, 'description': 'Enter the reference for dtc:topology:rule', 'schema': {'type': 'string', 'example': 'resourceID:resourceName'}}, {'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}, {'name': '_return_fields+', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma, this returns the required fields along with the default fields', 'schema': {'type': 'string'}}, {'name': '_return_as_object', 'in': 'query', 'required': False, 'description': 'Select 1 if result is required as a object', 'schema': {'type': 'integer', 'enum': [0, 1], 'default': 0}}], 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_topology_rule'}}}}}, 'security': [{'basicAuth': []}]}, 'put': {'description': 'Update the dtc:topology:rule resource', 'tags': ['dtc:topology:rule'], 'parameters': [{'name': 'dtc:topology:rule_reference', 'in': 'path', 'required': True, 'description': 'Enter the reference for dtc:topology:rule', 'schema': {'type': 'string', 'example': 'resourceID:resourceName'}}, {'name': '_return_fields', 'in': 'query', 'required': False, 'description': 'Enter the field names followed by comma', 'schema': {'type': 'string'}}], 'requestBody': {'description': 'Enter the request body here', 'required': True, 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'dest_type': {'type': 'string', 'example': "['POOL', 'SERVER']"}, 'destination_link': {'type': 'string', 'example': 'string'}, 'sources': {'type': 'string', 'example': "[{'source_type': 'enum', 'source_op': 'enum', 'source_value': 'string'}]"}}}}}}, 'responses': {'200': {'description': 'OK', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/dtc_topology_rule'}}}}}, 'security': [{'basicAuth': []}]}}}, 'components': {'securitySchemes': {'basicAuth': {'type': 'http', 'scheme': 'basic'}}, 'schemas': {'dtc': {'type': 'object', 'properties': {}}, 'dtc_allrecords': {'type': 'object', 'properties': {'comment': {'type': 'string', 'description': 'The record comment.'}, 'disable': {'type': 'boolean', 'example': 'boolean', 'description': 'The disable value determines if the record is disabled or not. False means the record is enabled.'}, 'dtc_server': {'type': 'string', 'description': 'The name of the DTC Server object with which the record is associated.'}, 'record': {'type': 'string', 'description': 'The record object, if supported by the WAPI. Otherwise, the value is None.'}, 'ttl': {'type': 'integer', 'example': 'integer', 'description': 'The TTL value of the record associated with the DTC AllRecords object.'}, 'type': {'type': 'string', 'enum': ['ALL', 'dtc:record:a', 'dtc:record:aaaa', 'dtc:record:cname', 'dtc:record:naptr', 'dtc:record:srv'], 'description': 'The record type. When searching for an unspecified record type, the search is performed for all records. On retrieval, the appliance returns UNSUPPORTED for unsupported records.'}}}, 'dtc_certificate': {'type': 'object', 'properties': {'certificate': {'type': 'string', 'description': 'Reference to underlying X509Certificate.'}, 'in_use': {'type': 'boolean', 'example': 'boolean', 'description': 'Determines whether the certificate is in use or not.'}}}, 'dtc_monitor_http': {'type': 'object', 'properties': {'ciphers': {'type': 'string', 'description': 'An optional cipher list for a secure HTTP/S connection.'}, 'client_cert': {'type': 'string', 'description': 'An optional client certificate, supplied in a secure HTTP/S mode if present.'}, 'comment': {'type': 'string', 'description': 'Comment for this DTC monitor; maximum 256 characters.'}, 'content_check': {'type': 'string', 'enum': ['NONE', 'MATCH', 'EXTRACT'], 'description': 'The content check type.'}, 'content_check_input': {'type': 'string', 'enum': ['HEADERS', 'ALL', 'BODY'], 'description': 'A portion of response to use as input for content check.'}, 'content_check_op': {'type': 'string', 'enum': ['EQ', 'NEQ', 'LEQ', 'GEQ'], 'description': 'A content check success criteria operator.'}, 'content_check_regex': {'type': 'string', 'description': 'A content check regular expression.'}, 'content_extract_group': {'type': 'integer', 'example': 'integer', 'description': 'A content extraction sub-expression to extract.'}, 'content_extract_type': {'type': 'string', 'enum': ['STRING', 'INTEGER'], 'description': 'A content extraction expected type for the extracted data.'}, 'content_extract_value': {'type': 'string', 'description': 'A content extraction value to compare with extracted result.'}, 'enable_sni': {'type': 'boolean', 'example': 'boolean', 'description': 'Determines whether the Server Name Indication (SNI) for HTTPS monitor is enabled.'}, 'extattrs': {'type': 'string', 'enum': ['extattr'], 'description': 'Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.'}, 'interval': {'type': 'integer', 'example': 'integer', 'description': 'The interval for TCP health check.'}, 'name': {'type': 'string', 'description': 'The display name for this DTC monitor.'}, 'port': {'type': 'integer', 'example': 'integer', 'description': 'Port for TCP requests.'}, 'request': {'type': 'string', 'description': 'An HTTP request to send.'}, 'result': {'type': 'string', 'enum': ['ANY', 'CODE_IS', 'CODE_IS_NOT'], 'description': 'The type of an expected result.'}, 'result_code': {'type': 'integer', 'example': 'integer', 'description': 'The expected return code.'}, 'retry_down': {'type': 'integer', 'example': 'integer', 'description': 'The value of how many times the server should appear as down to be treated as dead after it was alive.'}, 'retry_up': {'type': 'integer', 'example': 'integer', 'description': 'The value of how many times the server should appear as up to be treated as alive after it was dead.'}, 'secure': {'type': 'boolean', 'example': 'boolean', 'description': 'The connection security status.'}, 'timeout': {'type': 'integer', 'example': 'integer', 'description': 'The timeout for TCP health check in seconds.'}, 'validate_cert': {'type': 'boolean', 'example': 'boolean', 'description': "Determines whether the validation of the remote server's certificate is enabled."}}}, 'dtc_monitor_icmp': {'type': 'object', 'properties': {'comment': {'type': 'string', 'description': 'Comment for this DTC monitor; maximum 256 characters.'}, 'extattrs': {'type': 'string', 'enum': ['extattr'], 'description': 'Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.'}, 'interval': {'type': 'integer', 'example': 'integer', 'description': 'The interval for TCP health check.'}, 'name': {'type': 'string', 'description': 'The display name for this DTC monitor.'}, 'retry_down': {'type': 'integer', 'example': 'integer', 'description': 'The value of how many times the server should appear as down to be treated as dead after it was alive.'}, 'retry_up': {'type': 'integer', 'example': 'integer', 'description': 'The value of how many times the server should appear as up to be treated as alive after it was dead.'}, 'timeout': {'type': 'integer', 'example': 'integer', 'description': 'The timeout for TCP health check in seconds.'}}}, 'dtc_monitor_pdp': {'type': 'object', 'properties': {'comment': {'type': 'string', 'description': 'Comment for this DTC monitor; maximum 256 characters.'}, 'extattrs': {'type': 'string', 'enum': ['extattr'], 'description': 'Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.'}, 'interval': {'type': 'integer', 'example': 'integer', 'description': 'The interval for TCP health check.'}, 'name': {'type': 'string', 'description': 'The display name for this DTC monitor.'}, 'port': {'type': 'integer', 'example': 'integer', 'description': 'The port value for PDP requests.'}, 'retry_down': {'type': 'integer', 'example': 'integer', 'description': 'The value of how many times the server should appear as down to be treated as dead after it was alive.'}, 'retry_up': {'type': 'integer', 'example': 'integer', 'description': 'The value of how many times the server should appear as up to be treated as alive after it was dead.'}, 'timeout': {'type': 'integer', 'example': 'integer', 'description': 'The timeout for TCP health check in seconds.'}}}, 'dtc_monitor_sip': {'type': 'object', 'properties': {'ciphers': {'type': 'string', 'description': 'An optional cipher list for secure TLS/SIPS connection.'}, 'client_cert': {'type': 'string', 'description': 'An optional client certificate, supplied in TLS and SIPS mode if present.'}, 'comment': {'type': 'string', 'description': 'Comment for this DTC monitor; maximum 256 characters.'}, 'extattrs': {'type': 'string', 'enum': ['extattr'], 'description': 'Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.'}, 'interval': {'type': 'integer', 'example': 'integer', 'description': 'The interval for TCP health check.'}, 'name': {'type': 'string', 'description': 'The display name for this DTC monitor.'}, 'port': {'type': 'integer', 'example': 'integer', 'description': 'The port value for SIP requests.'}, 'request': {'type': 'string', 'description': 'A SIP request to send'}, 'result': {'type': 'string', 'enum': ['ANY', 'CODE_IS', 'CODE_IS_NOT'], 'description': 'The type of an expected result.'}, 'result_code': {'type': 'integer', 'example': 'integer', 'description': 'The expected return code value.'}, 'retry_down': {'type': 'integer', 'example': 'integer', 'description': 'The value of how many times the server should appear as down to be treated as dead after it was alive.'}, 'retry_up': {'type': 'integer', 'example': 'integer', 'description': 'The value of how many times the server should appear as up to be treated as alive after it was dead.'}, 'timeout': {'type': 'integer', 'example': 'integer', 'description': 'The timeout for TCP health check in seconds.'}, 'transport': {'type': 'string', 'enum': ['TCP', 'SIPS', 'TLS', 'UDP'], 'description': 'The transport layer protocol to use for SIP check.'}, 'validate_cert': {'type': 'boolean', 'example': 'boolean', 'description': "Determines whether the validation of the remote server's certificate is enabled."}}}, 'dtc_monitor_snmp': {'type': 'object', 'properties': {'comment': {'type': 'string', 'description': 'Comment for this DTC monitor; maximum 256 characters.'}, 'community': {'type': 'string', 'description': 'The SNMP community string for SNMP authentication.'}, 'context': {'type': 'string', 'description': 'The SNMPv3 context.'}, 'engine_id': {'type': 'string', 'description': 'The SNMPv3 engine identifier.'}, 'extattrs': {'type': 'string', 'enum': ['extattr'], 'description': 'Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.'}, 'interval': {'type': 'integer', 'example': 'integer', 'description': 'The interval for TCP health check.'}, 'name': {'type': 'string', 'description': 'The display name for this DTC monitor.'}, 'oids': {'type': 'string', 'enum': ['dtc:monitor:snmp:oid'], 'description': 'A list of OIDs for SNMP monitoring.'}, 'port': {'type': 'integer', 'example': 'integer', 'description': 'The port value for SNMP requests.'}, 'retry_down': {'type': 'integer', 'example': 'integer', 'description': 'The value of how many times the server should appear as down to be treated as dead after it was alive.'}, 'retry_up': {'type': 'integer', 'example': 'integer', 'description': 'The value of how many times the server should appear as up to be treated as alive after it was dead.'}, 'timeout': {'type': 'integer', 'example': 'integer', 'description': 'The timeout for TCP health check in seconds.'}, 'user': {'type': 'string', 'description': 'The SNMPv3 user setting.'}, 'version': {'type': 'string', 'enum': ['V1', 'V2C', 'V3'], 'description': 'The SNMP protocol version for the SNMP health check.'}}}, 'dtc_monitor_tcp': {'type': 'object', 'properties': {'comment': {'type': 'string', 'description': 'Comment for this DTC monitor; maximum 256 characters.'}, 'extattrs': {'type': 'string', 'enum': ['extattr'], 'description': 'Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.'}, 'interval': {'type': 'integer', 'example': 'integer', 'description': 'The interval for TCP health check.'}, 'name': {'type': 'string', 'description': 'The display name for this DTC monitor.'}, 'port': {'type': 'integer', 'example': 'integer', 'description': 'The port value for TCP requests.'}, 'retry_down': {'type': 'integer', 'example': 'integer', 'description': 'The value of how many times the server should appear as down to be treated as dead after it was alive.'}, 'retry_up': {'type': 'integer', 'example': 'integer', 'description': 'The value of how many times the server should appear as up to be treated as alive after it was dead.'}, 'timeout': {'type': 'integer', 'example': 'integer', 'description': 'The timeout for TCP health check in seconds.'}}}, 'dtc_object': {'type': 'object', 'properties': {'abstract_type': {'type': 'string', 'description': 'The abstract object type.'}, 'comment': {'type': 'string', 'description': 'The comment for the DTC object; maximum 256 characters.'}, 'display_type': {'type': 'string', 'description': 'The display object type.'}, 'extattrs': {'type': 'string', 'enum': ['extattr'], 'description': 'Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.'}, 'ipv4_address_list': {'type': 'string', 'description': 'The list of IPv4 addresses.'}, 'ipv6_address_list': {'type': 'string', 'description': 'The list of IPv6 addresses.'}, 'name': {'type': 'string', 'description': 'The display name of the DTC object.'}, 'object': {'type': 'string', 'description': 'The specific DTC object.'}, 'status': {'type': 'string', 'enum': ['NONE', 'GREEN', 'YELLOW', 'RED', 'BLUE', 'GRAY'], 'description': 'The availability color status.'}, 'status_time': {'type': 'string', 'enum': ['timestamp'], 'description': 'The timestamp when status or health was last determined.'}}}, 'dtc_pool': {'type': 'object', 'properties': {'availability': {'type': 'string', 'enum': ['ALL', 'ANY', 'QUORUM'], 'description': 'A resource in the pool is available if ANY, at least QUORUM, or ALL monitors for the pool say that it is up.'}, 'comment': {'type': 'string', 'description': 'The comment for the DTC Pool; maximum 256 characters.'}, 'consolidated_monitors': {'type': 'string', 'enum': ['dtc:pool:consolidated_monitor_health'], 'description': 'List of monitors and associated members statuses of which are shared across members and consolidated in server availability determination.'}, 'disable': {'type': 'boolean', 'example': 'boolean', 'description': 'Determines whether the DTC Pool is disabled or not. When this is set to False, the fixed address is enabled.'}, 'extattrs': {'type': 'string', 'enum': ['extattr'], 'description': 'Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.'}, 'health': {'type': 'string', 'enum': ['dtc:health'], 'description': 'The health status.'}, 'lb_alternate_method': {'type': 'string', 'enum': ['GLOBAL_AVAILABILITY', 'RATIO', 'ROUND_ROBIN', 'TOPOLOGY', 'ALL_AVAILABLE', 'DYNAMIC_RATIO'], 'description': 'The alternate load balancing method. Use this to select a method type from the pool if the preferred method does not return any results.'}, 'lb_alternate_topology': {'type': 'string', 'description': 'The alternate topology for load balancing.'}, 'lb_dynamic_ratio_alternate': {'type': 'string', 'enum': ['setting:dynamicratio'], 'description': "The DTC Pool settings for dynamic ratio when it's selected as alternate method."}, 'lb_dynamic_ratio_preferred': {'type': 'string', 'enum': ['setting:dynamicratio'], 'description': "The DTC Pool settings for dynamic ratio when it's selected as preferred method."}, 'lb_preferred_method': {'type': 'string', 'enum': ['GLOBAL_AVAILABILITY', 'RATIO', 'ROUND_ROBIN', 'TOPOLOGY', 'ALL_AVAILABLE', 'DYNAMIC_RATIO'], 'description': 'The preferred load balancing method. Use this to select a method type from the pool.'}, 'lb_preferred_topology': {'type': 'string', 'description': 'The preferred topology for load balancing.'}, 'monitors': {'type': 'string', 'enum': ['dtc:monitor:http'], 'description': 'The monitors related to pool.'}, 'name': {'type': 'string', 'description': 'The DTC Pool display name.'}, 'quorum': {'type': 'integer', 'example': 'integer', 'description': 'For availability mode QUORUM, at least this many monitors must report the resource as up for it to be available'}, 'servers': {'type': 'string', 'enum': ['dtc:server:link'], 'description': 'The servers related to the pool.'}, 'ttl': {'type': 'integer', 'example': 'integer', 'description': 'The Time To Live (TTL) value for the DTC Pool. A 32-bit unsigned integer that represents the duration, in seconds, for which the record is valid (cached). Zero indicates that the record should not be cached.'}, 'use_ttl': {'type': 'boolean', 'example': 'boolean', 'description': 'Use flag for: ttl'}}}, 'dtc_record_a': {'type': 'object', 'properties': {'auto_created': {'type': 'string', 'description': 'Flag that indicates whether this record was automatically created by NIOS.'}, 'comment': {'type': 'string', 'description': 'Comment for the record; maximum 256 characters.'}, 'disable': {'type': 'boolean', 'example': 'boolean', 'description': 'Determines if the record is disabled or not. False means that the record is enabled.'}, 'dtc_server': {'type': 'string', 'description': 'The name of the DTC Server object with which the DTC record is associated.'}, 'ipv4addr': {'type': 'string', 'description': 'The IPv4 Address of the domain name.'}, 'ttl': {'type': 'integer', 'example': 'integer', 'description': 'The Time to Live (TTL) value.'}, 'use_ttl': {'type': 'boolean', 'example': 'boolean', 'description': 'Use flag for: ttl'}}}, 'dtc_record_aaaa': {'type': 'object', 'properties': {'auto_created': {'type': 'string', 'description': 'Flag that indicates whether this record was automatically created by NIOS.'}, 'comment': {'type': 'string', 'description': 'Comment for the record; maximum 256 characters.'}, 'disable': {'type': 'boolean', 'example': 'boolean', 'description': 'Determines if the record is disabled or not. False means that the record is enabled.'}, 'dtc_server': {'type': 'string', 'description': 'The name of the DTC Server object with which the DTC record is associated.'}, 'ipv6addr': {'type': 'string', 'description': 'The IPv6 Address of the domain name.'}, 'ttl': {'type': 'integer', 'example': 'integer', 'description': 'The Time to Live (TTL) value.'}, 'use_ttl': {'type': 'boolean', 'example': 'boolean', 'description': 'Use flag for: ttl'}}}, 'dtc_record_cname': {'type': 'object', 'properties': {'auto_created': {'type': 'string', 'description': 'Flag that indicates whether this record was automatically created by NIOS.'}, 'canonical': {'type': 'string', 'description': 'The canonical name of the host.'}, 'comment': {'type': 'string', 'description': 'Comment for the record; maximum 256 characters.'}, 'disable': {'type': 'boolean', 'example': 'boolean', 'description': 'Determines if the record is disabled or not. False means that the record is enabled.'}, 'dns_canonical': {'type': 'string', 'description': 'The canonical name as server by DNS protocol.'}, 'dtc_server': {'type': 'string', 'description': 'The name of the DTC Server object with which the DTC record is associated.'}, 'ttl': {'type': 'integer', 'example': 'integer', 'description': 'The Time to Live (TTL) value.'}, 'use_ttl': {'type': 'boolean', 'example': 'boolean', 'description': 'Use flag for: ttl'}}}, 'dtc_record_naptr': {'type': 'object', 'properties': {'comment': {'type': 'string', 'description': 'Comment for the record; maximum 256 characters.'}, 'disable': {'type': 'boolean', 'example': 'boolean', 'description': 'Determines if the record is disabled or not. False means that the record is enabled.'}, 'dtc_server': {'type': 'string', 'description': 'The name of the DTC Server object with which the DTC record is associated.'}, 'flags': {'type': 'string', 'description': 'The flags used to control the interpretation of the fields for an NAPTR record object. Supported values for the flags field are U, S, P and A.'}, 'order': {'type': 'integer', 'example': 'integer', 'description': 'The order parameter of the NAPTR records. This parameter specifies the order in which the NAPTR rules are applied when multiple rules are present. Valid values are from 0 to 65535 (inclusive), in 32-bit unsigned integer format.'}, 'preference': {'type': 'integer', 'example': 'integer', 'description': 'The preference of the NAPTR record. The preference field determines the order the NAPTR records are processed when multiple records with the same order parameter are present. Valid values are from 0 to 65535 (inclusive), in 32-bit unsigned integer format.'}, 'regexp': {'type': 'string', 'description': 'The regular expression-based rewriting rule of the NAPTR record. This should be a POSIX compliant regular expression, including the substitution rule and flags. Refer to RFC 2915 for the field syntax details.'}, 'replacement': {'type': 'string', 'description': 'The replacement field of the NAPTR record object. For nonterminal NAPTR records, this field specifies the next domain name to look up. This value can be in unicode format.'}, 'services': {'type': 'string', 'description': 'The services field of the NAPTR record object; maximum 128 characters. The services field contains protocol and service identifiers, such as http+E2U or SIPS+D2T.'}, 'ttl': {'type': 'integer', 'example': 'integer', 'description': 'The Time to Live (TTL) value.'}, 'use_ttl': {'type': 'boolean', 'example': 'boolean', 'description': 'Use flag for: ttl'}}}, 'dtc_record_srv': {'type': 'object', 'properties': {'comment': {'type': 'string', 'description': 'Comment for the record; maximum 256 characters.'}, 'disable': {'type': 'boolean', 'example': 'boolean', 'description': 'Determines if the record is disabled or not. False means that the record is enabled.'}, 'dtc_server': {'type': 'string', 'description': 'The name of the DTC Server object with which the DTC record is associated.'}, 'name': {'type': 'string', 'description': 'The name for an SRV record in unicode format.'}, 'port': {'type': 'integer', 'example': 'integer', 'description': 'The port of the SRV record. Valid values are from 0 to 65535 (inclusive), in 32-bit unsigned integer format.'}, 'priority': {'type': 'integer', 'example': 'integer', 'description': 'The priority of the SRV record. Valid values are from 0 to 65535 (inclusive), in 32-bit unsigned integer format.'}, 'target': {'type': 'string', 'description': 'The target of the SRV record in FQDN format. This value can be in unicode format.'}, 'ttl': {'type': 'integer', 'example': 'integer', 'description': 'The Time to Live (TTL) value.'}, 'use_ttl': {'type': 'boolean', 'example': 'boolean', 'description': 'Use flag for: ttl'}, 'weight': {'type': 'integer', 'example': 'integer', 'description': 'The weight of the SRV record. Valid values are from 0 to 65535 (inclusive), in 32-bit unsigned integer format.'}}}, 'dtc_server': {'type': 'object', 'properties': {'auto_create_host_record': {'type': 'boolean', 'example': 'boolean', 'description': 'Enabling this option will auto-create a single read-only A/AAAA/CNAME record corresponding to the configured hostname and update it if the hostname changes.'}, 'comment': {'type': 'string', 'description': 'Comment for the DTC Server; maximum 256 characters.'}, 'disable': {'type': 'boolean', 'example': 'boolean', 'description': 'Determines whether the DTC Server is disabled or not. When this is set to False, the fixed address is enabled.'}, 'extattrs': {'type': 'string', 'enum': ['extattr'], 'description': 'Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.'}, 'health': {'type': 'string', 'enum': ['dtc:health'], 'description': 'The health status.'}, 'host': {'type': 'string', 'description': 'The address or FQDN of the server.'}, 'monitors': {'type': 'string', 'enum': ['dtc:server:monitor'], 'description': 'List of IP/FQDN and monitor pairs to be used for additional monitoring.'}, 'name': {'type': 'string', 'description': 'The DTC Server display name.'}, 'sni_hostname': {'type': 'string', 'description': 'The hostname for Server Name Indication (SNI) in FQDN format.'}, 'use_sni_hostname': {'type': 'boolean', 'example': 'boolean', 'description': 'Use flag for: sni_hostname'}}}, 'dtc_topology': {'type': 'object', 'properties': {'comment': {'type': 'string', 'description': 'The comment for the DTC TOPOLOGY monitor object; maximum 256 characters.'}, 'extattrs': {'type': 'string', 'enum': ['extattr'], 'description': 'Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.'}, 'name': {'type': 'string', 'description': 'Display name of the DTC Topology.'}, 'rules': {'type': 'string', 'enum': ['dtc:topology:rule'], 'description': 'Topology rules.'}}}, 'dtc_topology_label': {'type': 'object', 'properties': {'field': {'type': 'string', 'enum': ['SUBNET', 'CONTINENT', 'COUNTRY', 'SUBDIVISION', 'CITY', 'EA0', 'EA1', 'EA2', 'EA3'], 'description': 'The name of the field in the Topology database the label was obtained from.'}, 'label': {'type': 'string', 'description': 'The DTC Topology label name.'}}}, 'dtc_topology_rule': {'type': 'object', 'properties': {'dest_type': {'type': 'string', 'enum': ['POOL', 'SERVER'], 'description': 'The type of the destination for this DTC Topology rule.'}, 'destination_link': {'type': 'string', 'description': 'The reference to the destination DTC pool or DTC server.'}, 'sources': {'type': 'string', 'enum': ['dtc:topology:rule:source'], 'description': 'The conditions for matching sources. Should be empty to set rule as default destination.'}, 'topology': {'type': 'string', 'description': 'The DTC Topology the rule belongs to.'}, 'valid': {'type': 'boolean', 'example': 'boolean', 'description': 'True if the label in the rule exists in the current Topology DB. Always true for SUBNET rules. Rules with non-existent labels may be configured but will never match.'}}}}}}