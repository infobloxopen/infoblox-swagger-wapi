{
  "openapi": "3.0.0",
  "info": {
    "description": "Sample WAPI Documentation",
    "version": "v2.7",
    "title": "Infoblox WAPI",
    "license": {
      "name": "Infoblox License",
      "url": "https://www.infoblox.com/"
    },
    "contact": {
      "name": "Krishna",
      "email": "kvasudevan@infoblox.com"
    }
  },
  "paths": {
    "/wapi/v2.7/ad_auth_service": {
      "get": {
        "tags": [
          "ad_auth_service"
        ],
        "parameters": [
          {
            "name": "_return_fields",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_return_fields+",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_max_results",
            "in": "query",
            "required": false,
            "description": "Enter the number of results to be fetched",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "_return_as_object",
            "in": "query",
            "required": false,
            "description": "Select 1 if result is required as a object",
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1
              ],
              "default": 0
            }
          },
          {
            "name": "_paging",
            "in": "query",
            "required": false,
            "description": "Select 1 if paging is required. If SET, _max_results and _return_as_object must be entered.",
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1
              ],
              "default": 0
            }
          },
          {
            "name": " _page_id",
            "in": "query",
            "required": false,
            "description": "Enter the page ID for fetching next page",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ad_domain",
            "in": "query",
            "required": false,
            "description": "Enter the value of the field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "comment",
            "in": "query",
            "required": false,
            "description": "Enter the value of the field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "description": "Enter the value of the field",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ad_auth_service"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "ad_auth_service"
        ],
        "parameters": [
          {
            "name": "_return_fields",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Enter the request body here",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ad_domain": {
                    "type": "string",
                    "example": "string"
                  },
                  "comment": {
                    "type": "string",
                    "example": "string"
                  },
                  "disabled": {
                    "type": "string",
                    "example": "bool"
                  },
                  "domain_controllers": {
                    "type": "string",
                    "example": "[{'fqdn_or_ip': 'string', 'auth_port': 'uint', 'comment': 'string', 'disabled': 'bool', 'encryption': 'enum', 'mgmt_port': 'bool', 'use_mgmt_port': 'bool'}]"
                  },
                  "name": {
                    "type": "string",
                    "example": "string"
                  },
                  "timeout": {
                    "type": "string",
                    "example": "uint"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ad_auth_service"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/wapi/v2.7/ad_auth_service/{ad_auth_service_reference}": {
      "get": {
        "tags": [
          "ad_auth_service"
        ],
        "parameters": [
          {
            "name": "ad_auth_service_reference",
            "in": "path",
            "required": true,
            "description": "Enter the reference for ad_auth_service",
            "schema": {
              "type": "string",
              "example": "resourceID:resourceName"
            }
          },
          {
            "name": "_return_fields",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_return_fields+",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_return_as_object",
            "in": "query",
            "required": false,
            "description": "Select 1 if result is required as a object",
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1
              ],
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ad_auth_service"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "put": {
        "description": "Update the ad_auth_service resource",
        "tags": [
          "ad_auth_service"
        ],
        "parameters": [
          {
            "name": "ad_auth_service_reference",
            "in": "path",
            "required": true,
            "description": "Enter the reference for ad_auth_service",
            "schema": {
              "type": "string",
              "example": "resourceID:resourceName"
            }
          },
          {
            "name": "_return_fields",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Enter the request body here",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ad_domain": {
                    "type": "string",
                    "example": "string"
                  },
                  "comment": {
                    "type": "string",
                    "example": "string"
                  },
                  "disabled": {
                    "type": "string",
                    "example": "bool"
                  },
                  "domain_controllers": {
                    "type": "string",
                    "example": "[{'fqdn_or_ip': 'string', 'auth_port': 'uint', 'comment': 'string', 'disabled': 'bool', 'encryption': 'enum', 'mgmt_port': 'bool', 'use_mgmt_port': 'bool'}]"
                  },
                  "name": {
                    "type": "string",
                    "example": "string"
                  },
                  "timeout": {
                    "type": "string",
                    "example": "uint"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ad_auth_service"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "description": "Delete the ad_auth_service resource",
        "tags": [
          "ad_auth_service"
        ],
        "parameters": [
          {
            "name": "ad_auth_service_reference",
            "in": "path",
            "required": true,
            "description": "Enter the reference for ad_auth_service",
            "schema": {
              "type": "string",
              "example": "resourceID:resourceName"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "$ref": {
                      "type": "string",
                      "description": "Reference of the deleted string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/wapi/v2.7/admingroup": {
      "get": {
        "tags": [
          "admingroup"
        ],
        "parameters": [
          {
            "name": "_return_fields",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_return_fields+",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_max_results",
            "in": "query",
            "required": false,
            "description": "Enter the number of results to be fetched",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "_return_as_object",
            "in": "query",
            "required": false,
            "description": "Select 1 if result is required as a object",
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1
              ],
              "default": 0
            }
          },
          {
            "name": "_paging",
            "in": "query",
            "required": false,
            "description": "Select 1 if paging is required. If SET, _max_results and _return_as_object must be entered.",
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1
              ],
              "default": 0
            }
          },
          {
            "name": " _page_id",
            "in": "query",
            "required": false,
            "description": "Enter the page ID for fetching next page",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "comment",
            "in": "query",
            "required": false,
            "description": "Enter the value of the field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "description": "Enter the value of the field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roles",
            "in": "query",
            "required": false,
            "description": "Enter the value of the field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "superuser",
            "in": "query",
            "required": false,
            "description": "Enter the value of the field",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/admingroup"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "admingroup"
        ],
        "parameters": [
          {
            "name": "_return_fields",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Enter the request body here",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "access_method": {
                    "type": "string",
                    "example": "['GUI', 'API', 'TAXII', 'CLOUD_API']"
                  },
                  "comment": {
                    "type": "string",
                    "example": "string"
                  },
                  "disable": {
                    "type": "string",
                    "example": "bool"
                  },
                  "email_addresses": {
                    "type": "string",
                    "example": "string"
                  },
                  "enable_restricted_user_access": {
                    "type": "string",
                    "example": "bool"
                  },
                  "extattrs": {
                    "type": "string",
                    "example": "extattr"
                  },
                  "name": {
                    "type": "string",
                    "example": "string"
                  },
                  "roles": {
                    "type": "string",
                    "example": "string"
                  },
                  "superuser": {
                    "type": "string",
                    "example": "bool"
                  },
                  "user_access": {
                    "type": "string",
                    "example": "[{'address': 'string', 'permission': 'enum'}]"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/admingroup"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/wapi/v2.7/admingroup/{admingroup_reference}": {
      "get": {
        "tags": [
          "admingroup"
        ],
        "parameters": [
          {
            "name": "admingroup_reference",
            "in": "path",
            "required": true,
            "description": "Enter the reference for admingroup",
            "schema": {
              "type": "string",
              "example": "resourceID:resourceName"
            }
          },
          {
            "name": "_return_fields",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_return_fields+",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_return_as_object",
            "in": "query",
            "required": false,
            "description": "Select 1 if result is required as a object",
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1
              ],
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/admingroup"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "put": {
        "description": "Update the admingroup resource",
        "tags": [
          "admingroup"
        ],
        "parameters": [
          {
            "name": "admingroup_reference",
            "in": "path",
            "required": true,
            "description": "Enter the reference for admingroup",
            "schema": {
              "type": "string",
              "example": "resourceID:resourceName"
            }
          },
          {
            "name": "_return_fields",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Enter the request body here",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "access_method": {
                    "type": "string",
                    "example": "['GUI', 'API', 'TAXII', 'CLOUD_API']"
                  },
                  "comment": {
                    "type": "string",
                    "example": "string"
                  },
                  "disable": {
                    "type": "string",
                    "example": "bool"
                  },
                  "email_addresses": {
                    "type": "string",
                    "example": "string"
                  },
                  "enable_restricted_user_access": {
                    "type": "string",
                    "example": "bool"
                  },
                  "extattrs": {
                    "type": "string",
                    "example": "extattr"
                  },
                  "name": {
                    "type": "string",
                    "example": "string"
                  },
                  "roles": {
                    "type": "string",
                    "example": "string"
                  },
                  "superuser": {
                    "type": "string",
                    "example": "bool"
                  },
                  "user_access": {
                    "type": "string",
                    "example": "[{'address': 'string', 'permission': 'enum'}]"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/admingroup"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "description": "Delete the admingroup resource",
        "tags": [
          "admingroup"
        ],
        "parameters": [
          {
            "name": "admingroup_reference",
            "in": "path",
            "required": true,
            "description": "Enter the reference for admingroup",
            "schema": {
              "type": "string",
              "example": "resourceID:resourceName"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "$ref": {
                      "type": "string",
                      "description": "Reference of the deleted string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/wapi/v2.7/adminrole": {
      "get": {
        "tags": [
          "adminrole"
        ],
        "parameters": [
          {
            "name": "_return_fields",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_return_fields+",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_max_results",
            "in": "query",
            "required": false,
            "description": "Enter the number of results to be fetched",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "_return_as_object",
            "in": "query",
            "required": false,
            "description": "Select 1 if result is required as a object",
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1
              ],
              "default": 0
            }
          },
          {
            "name": "_paging",
            "in": "query",
            "required": false,
            "description": "Select 1 if paging is required. If SET, _max_results and _return_as_object must be entered.",
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1
              ],
              "default": 0
            }
          },
          {
            "name": " _page_id",
            "in": "query",
            "required": false,
            "description": "Enter the page ID for fetching next page",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "comment",
            "in": "query",
            "required": false,
            "description": "Enter the value of the field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "description": "Enter the value of the field",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/adminrole"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "adminrole"
        ],
        "parameters": [
          {
            "name": "_return_fields",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Enter the request body here",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "comment": {
                    "type": "string",
                    "example": "string"
                  },
                  "disable": {
                    "type": "string",
                    "example": "bool"
                  },
                  "extattrs": {
                    "type": "string",
                    "example": "extattr"
                  },
                  "name": {
                    "type": "string",
                    "example": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/adminrole"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/wapi/v2.7/adminrole/{adminrole_reference}": {
      "get": {
        "tags": [
          "adminrole"
        ],
        "parameters": [
          {
            "name": "adminrole_reference",
            "in": "path",
            "required": true,
            "description": "Enter the reference for adminrole",
            "schema": {
              "type": "string",
              "example": "resourceID:resourceName"
            }
          },
          {
            "name": "_return_fields",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_return_fields+",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_return_as_object",
            "in": "query",
            "required": false,
            "description": "Select 1 if result is required as a object",
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1
              ],
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/adminrole"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "put": {
        "description": "Update the adminrole resource",
        "tags": [
          "adminrole"
        ],
        "parameters": [
          {
            "name": "adminrole_reference",
            "in": "path",
            "required": true,
            "description": "Enter the reference for adminrole",
            "schema": {
              "type": "string",
              "example": "resourceID:resourceName"
            }
          },
          {
            "name": "_return_fields",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Enter the request body here",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "comment": {
                    "type": "string",
                    "example": "string"
                  },
                  "disable": {
                    "type": "string",
                    "example": "bool"
                  },
                  "extattrs": {
                    "type": "string",
                    "example": "extattr"
                  },
                  "name": {
                    "type": "string",
                    "example": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/adminrole"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "description": "Delete the adminrole resource",
        "tags": [
          "adminrole"
        ],
        "parameters": [
          {
            "name": "adminrole_reference",
            "in": "path",
            "required": true,
            "description": "Enter the reference for adminrole",
            "schema": {
              "type": "string",
              "example": "resourceID:resourceName"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "$ref": {
                      "type": "string",
                      "description": "Reference of the deleted string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/wapi/v2.7/adminuser": {
      "get": {
        "tags": [
          "adminuser"
        ],
        "parameters": [
          {
            "name": "_return_fields",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_return_fields+",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_max_results",
            "in": "query",
            "required": false,
            "description": "Enter the number of results to be fetched",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "_return_as_object",
            "in": "query",
            "required": false,
            "description": "Select 1 if result is required as a object",
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1
              ],
              "default": 0
            }
          },
          {
            "name": "_paging",
            "in": "query",
            "required": false,
            "description": "Select 1 if paging is required. If SET, _max_results and _return_as_object must be entered.",
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1
              ],
              "default": 0
            }
          },
          {
            "name": " _page_id",
            "in": "query",
            "required": false,
            "description": "Enter the page ID for fetching next page",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "admin_groups",
            "in": "query",
            "required": false,
            "description": "Enter the value of the field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ca_certificate_issuer",
            "in": "query",
            "required": false,
            "description": "Enter the value of the field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_certificate_serial_number",
            "in": "query",
            "required": false,
            "description": "Enter the value of the field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "comment",
            "in": "query",
            "required": false,
            "description": "Enter the value of the field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "description": "Enter the value of the field",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/adminuser"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "adminuser"
        ],
        "parameters": [
          {
            "name": "_return_fields",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Enter the request body here",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "admin_groups": {
                    "type": "string",
                    "example": "string"
                  },
                  "auth_type": {
                    "type": "string",
                    "example": "['LOCAL', 'RADIUS', 'REMOTE']"
                  },
                  "ca_certificate_issuer": {
                    "type": "string",
                    "example": "string"
                  },
                  "client_certificate_serial_number": {
                    "type": "string",
                    "example": "string"
                  },
                  "comment": {
                    "type": "string",
                    "example": "string"
                  },
                  "disable": {
                    "type": "string",
                    "example": "bool"
                  },
                  "email": {
                    "type": "string",
                    "example": "string"
                  },
                  "enable_certificate_authentication": {
                    "type": "string",
                    "example": "bool"
                  },
                  "extattrs": {
                    "type": "string",
                    "example": "extattr"
                  },
                  "name": {
                    "type": "string",
                    "example": "string"
                  },
                  "password": {
                    "type": "string",
                    "example": "string"
                  },
                  "time_zone": {
                    "type": "string",
                    "example": "['(UTC - 12:00)', '(UTC - 11:00) Midway Island, Samoa', '(UTC - 10:00) Hawaii', '(UTC - 9:00) Alaska', '(UTC - 8:00) Pacific Time (US and Canada), Tijuana', '(UTC - 7:00) Arizona', '(UTC - 7:00) Mountain Time (US and Canada)', '(UTC - 6:00) Central Time (US and Canada)', '(UTC - 6:00) Mexico City, Tegucigalpa', '(UTC - 6:00) Saskatchewan', '(UTC - 5:00) Bogota, Lima, Quito', '(UTC - 5:00) Eastern Time (US and Canada)', '(UTC - 5:00) Indiana (East)', '(UTC - 4:00) Caracas', '(UTC - 4:00) Atlantic Time (Canada)', '(UTC - 4:00) Santiago', '(UTC - 3:30) Newfoundland', '(UTC - 3:00) Brasilia', '(UTC - 3:00) Buenos Aires', '(UTC - 2:00) Mid-Atlantic', '(UTC - 1:00) Azores', '(UTC) Coordinated Universal Time', '(UTC) Dublin', '(UTC) Lisbon', '(UTC) London', '(UTC + 1:00) Casablanca', '(UTC + 1:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna', '(UTC + 1:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague', '(UTC + 1:00) Brussels, Copenhagen, Madrid, Paris', '(UTC + 1:00) Sarajevo, Skopje, Sofija, Warsaw, Zagreb', '(UTC + 2:00) Athens, Vilnius', '(UTC + 2:00) Bucharest', '(UTC + 2:00) Cairo', '(UTC + 2:00) Harare', '(UTC + 2:00) Helsinki', '(UTC + 2:00) Jerusalem', '(UTC + 2:00) Kaliningrad', '(UTC + 3:00) Baghdad, Istanbul, Kuwait, Minsk, Riyadh', '(UTC + 3:00) Moscow, St. Petersburg, Volgograd', '(UTC + 3:00) Nairobi', '(UTC + 3:30) Tehran', '(UTC + 4:00) Dubai', '(UTC + 4:00) Baku', '(UTC + 4:00) Samara', '(UTC + 4:30) Kabul', '(UTC + 5:00) Ekaterinburg', '(UTC + 5:00) Islamabad, Karachi', '(UTC + 5:30) Bombay, Calcutta, Madras, New Delhi', '(UTC + 5:30) Colombo', '(UTC + 6:00) Dhaka', '(UTC + 6:00) Omsk', '(UTC + 6:30) Rangoon', '(UTC + 7:00) Bangkok, Hanoi', '(UTC + 7:00) Krasnoyarsk', '(UTC + 8:00) Beijing, Chongqing, Shanghai', '(UTC + 8:00) Hong Kong', '(UTC + 8:00) Irkutsk', '(UTC + 8:00) Perth', '(UTC + 8:00) Singapore', '(UTC + 8:00) Taipei', '(UTC + 9:00) Osaka, Sapporo, Tokyo', '(UTC + 9:00) Seoul', '(UTC + 9:00) Yakutsk', '(UTC + 9:30) Adelaide', '(UTC + 9:30) Darwin', '(UTC + 10:00) Brisbane', '(UTC + 10:00) Canberra, Sydney', '(UTC + 10:00) Melbourne, Victoria', '(UTC + 10:00) Guam', '(UTC + 10:00) Hobart', '(UTC + 10:00) Vladivostok', '(UTC + 11:00) Solomon Islands', '(UTC + 11:00) Magadan', '(UTC + 12:00) Anadyr', '(UTC + 12:00) Auckland', '(UTC + 12:00) Fiji', '(UTC + 12:00) Marshall Islands']"
                  },
                  "use_time_zone": {
                    "type": "string",
                    "example": "bool"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/adminuser"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/wapi/v2.7/adminuser/{adminuser_reference}": {
      "get": {
        "tags": [
          "adminuser"
        ],
        "parameters": [
          {
            "name": "adminuser_reference",
            "in": "path",
            "required": true,
            "description": "Enter the reference for adminuser",
            "schema": {
              "type": "string",
              "example": "resourceID:resourceName"
            }
          },
          {
            "name": "_return_fields",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_return_fields+",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_return_as_object",
            "in": "query",
            "required": false,
            "description": "Select 1 if result is required as a object",
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1
              ],
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/adminuser"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "put": {
        "description": "Update the adminuser resource",
        "tags": [
          "adminuser"
        ],
        "parameters": [
          {
            "name": "adminuser_reference",
            "in": "path",
            "required": true,
            "description": "Enter the reference for adminuser",
            "schema": {
              "type": "string",
              "example": "resourceID:resourceName"
            }
          },
          {
            "name": "_return_fields",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Enter the request body here",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "admin_groups": {
                    "type": "string",
                    "example": "string"
                  },
                  "auth_type": {
                    "type": "string",
                    "example": "['LOCAL', 'RADIUS', 'REMOTE']"
                  },
                  "ca_certificate_issuer": {
                    "type": "string",
                    "example": "string"
                  },
                  "client_certificate_serial_number": {
                    "type": "string",
                    "example": "string"
                  },
                  "comment": {
                    "type": "string",
                    "example": "string"
                  },
                  "disable": {
                    "type": "string",
                    "example": "bool"
                  },
                  "email": {
                    "type": "string",
                    "example": "string"
                  },
                  "enable_certificate_authentication": {
                    "type": "string",
                    "example": "bool"
                  },
                  "extattrs": {
                    "type": "string",
                    "example": "extattr"
                  },
                  "name": {
                    "type": "string",
                    "example": "string"
                  },
                  "password": {
                    "type": "string",
                    "example": "string"
                  },
                  "time_zone": {
                    "type": "string",
                    "example": "['(UTC - 12:00)', '(UTC - 11:00) Midway Island, Samoa', '(UTC - 10:00) Hawaii', '(UTC - 9:00) Alaska', '(UTC - 8:00) Pacific Time (US and Canada), Tijuana', '(UTC - 7:00) Arizona', '(UTC - 7:00) Mountain Time (US and Canada)', '(UTC - 6:00) Central Time (US and Canada)', '(UTC - 6:00) Mexico City, Tegucigalpa', '(UTC - 6:00) Saskatchewan', '(UTC - 5:00) Bogota, Lima, Quito', '(UTC - 5:00) Eastern Time (US and Canada)', '(UTC - 5:00) Indiana (East)', '(UTC - 4:00) Caracas', '(UTC - 4:00) Atlantic Time (Canada)', '(UTC - 4:00) Santiago', '(UTC - 3:30) Newfoundland', '(UTC - 3:00) Brasilia', '(UTC - 3:00) Buenos Aires', '(UTC - 2:00) Mid-Atlantic', '(UTC - 1:00) Azores', '(UTC) Coordinated Universal Time', '(UTC) Dublin', '(UTC) Lisbon', '(UTC) London', '(UTC + 1:00) Casablanca', '(UTC + 1:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna', '(UTC + 1:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague', '(UTC + 1:00) Brussels, Copenhagen, Madrid, Paris', '(UTC + 1:00) Sarajevo, Skopje, Sofija, Warsaw, Zagreb', '(UTC + 2:00) Athens, Vilnius', '(UTC + 2:00) Bucharest', '(UTC + 2:00) Cairo', '(UTC + 2:00) Harare', '(UTC + 2:00) Helsinki', '(UTC + 2:00) Jerusalem', '(UTC + 2:00) Kaliningrad', '(UTC + 3:00) Baghdad, Istanbul, Kuwait, Minsk, Riyadh', '(UTC + 3:00) Moscow, St. Petersburg, Volgograd', '(UTC + 3:00) Nairobi', '(UTC + 3:30) Tehran', '(UTC + 4:00) Dubai', '(UTC + 4:00) Baku', '(UTC + 4:00) Samara', '(UTC + 4:30) Kabul', '(UTC + 5:00) Ekaterinburg', '(UTC + 5:00) Islamabad, Karachi', '(UTC + 5:30) Bombay, Calcutta, Madras, New Delhi', '(UTC + 5:30) Colombo', '(UTC + 6:00) Dhaka', '(UTC + 6:00) Omsk', '(UTC + 6:30) Rangoon', '(UTC + 7:00) Bangkok, Hanoi', '(UTC + 7:00) Krasnoyarsk', '(UTC + 8:00) Beijing, Chongqing, Shanghai', '(UTC + 8:00) Hong Kong', '(UTC + 8:00) Irkutsk', '(UTC + 8:00) Perth', '(UTC + 8:00) Singapore', '(UTC + 8:00) Taipei', '(UTC + 9:00) Osaka, Sapporo, Tokyo', '(UTC + 9:00) Seoul', '(UTC + 9:00) Yakutsk', '(UTC + 9:30) Adelaide', '(UTC + 9:30) Darwin', '(UTC + 10:00) Brisbane', '(UTC + 10:00) Canberra, Sydney', '(UTC + 10:00) Melbourne, Victoria', '(UTC + 10:00) Guam', '(UTC + 10:00) Hobart', '(UTC + 10:00) Vladivostok', '(UTC + 11:00) Solomon Islands', '(UTC + 11:00) Magadan', '(UTC + 12:00) Anadyr', '(UTC + 12:00) Auckland', '(UTC + 12:00) Fiji', '(UTC + 12:00) Marshall Islands']"
                  },
                  "use_time_zone": {
                    "type": "string",
                    "example": "bool"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/adminuser"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "description": "Delete the adminuser resource",
        "tags": [
          "adminuser"
        ],
        "parameters": [
          {
            "name": "adminuser_reference",
            "in": "path",
            "required": true,
            "description": "Enter the reference for adminuser",
            "schema": {
              "type": "string",
              "example": "resourceID:resourceName"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "$ref": {
                      "type": "string",
                      "description": "Reference of the deleted string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/wapi/v2.7/approvalworkflow": {
      "get": {
        "tags": [
          "approvalworkflow"
        ],
        "parameters": [
          {
            "name": "_return_fields",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_return_fields+",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_max_results",
            "in": "query",
            "required": false,
            "description": "Enter the number of results to be fetched",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "_return_as_object",
            "in": "query",
            "required": false,
            "description": "Select 1 if result is required as a object",
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1
              ],
              "default": 0
            }
          },
          {
            "name": "_paging",
            "in": "query",
            "required": false,
            "description": "Select 1 if paging is required. If SET, _max_results and _return_as_object must be entered.",
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1
              ],
              "default": 0
            }
          },
          {
            "name": " _page_id",
            "in": "query",
            "required": false,
            "description": "Enter the page ID for fetching next page",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "approval_group",
            "in": "query",
            "required": false,
            "description": "Enter the value of the field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "submitter_group",
            "in": "query",
            "required": false,
            "description": "Enter the value of the field",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/approvalworkflow"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "approvalworkflow"
        ],
        "parameters": [
          {
            "name": "_return_fields",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Enter the request body here",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "approval_group": {
                    "type": "string",
                    "example": "string"
                  },
                  "approval_notify_to": {
                    "type": "string",
                    "example": "['SUBMITTER', 'APPROVER', 'BOTH']"
                  },
                  "approved_notify_to": {
                    "type": "string",
                    "example": "['SUBMITTER', 'APPROVER', 'BOTH']"
                  },
                  "approver_comment": {
                    "type": "string",
                    "example": "['UNUSED', 'OPTIONAL', 'REQUIRED']"
                  },
                  "enable_approval_notify": {
                    "type": "string",
                    "example": "bool"
                  },
                  "enable_approved_notify": {
                    "type": "string",
                    "example": "bool"
                  },
                  "enable_failed_notify": {
                    "type": "string",
                    "example": "bool"
                  },
                  "enable_notify_group": {
                    "type": "string",
                    "example": "bool"
                  },
                  "enable_notify_user": {
                    "type": "string",
                    "example": "bool"
                  },
                  "enable_rejected_notify": {
                    "type": "string",
                    "example": "bool"
                  },
                  "enable_rescheduled_notify": {
                    "type": "string",
                    "example": "bool"
                  },
                  "enable_succeeded_notify": {
                    "type": "string",
                    "example": "bool"
                  },
                  "extattrs": {
                    "type": "string",
                    "example": "extattr"
                  },
                  "failed_notify_to": {
                    "type": "string",
                    "example": "['SUBMITTER', 'APPROVER', 'BOTH']"
                  },
                  "rejected_notify_to": {
                    "type": "string",
                    "example": "['SUBMITTER', 'APPROVER', 'BOTH']"
                  },
                  "rescheduled_notify_to": {
                    "type": "string",
                    "example": "['SUBMITTER', 'APPROVER', 'BOTH']"
                  },
                  "submitter_comment": {
                    "type": "string",
                    "example": "['UNUSED', 'OPTIONAL', 'REQUIRED']"
                  },
                  "submitter_group": {
                    "type": "string",
                    "example": "string"
                  },
                  "succeeded_notify_to": {
                    "type": "string",
                    "example": "['SUBMITTER', 'APPROVER', 'BOTH']"
                  },
                  "ticket_number": {
                    "type": "string",
                    "example": "['UNUSED', 'OPTIONAL', 'REQUIRED']"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/approvalworkflow"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/wapi/v2.7/approvalworkflow/{approvalworkflow_reference}": {
      "get": {
        "tags": [
          "approvalworkflow"
        ],
        "parameters": [
          {
            "name": "approvalworkflow_reference",
            "in": "path",
            "required": true,
            "description": "Enter the reference for approvalworkflow",
            "schema": {
              "type": "string",
              "example": "resourceID:resourceName"
            }
          },
          {
            "name": "_return_fields",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_return_fields+",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_return_as_object",
            "in": "query",
            "required": false,
            "description": "Select 1 if result is required as a object",
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1
              ],
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/approvalworkflow"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "put": {
        "description": "Update the approvalworkflow resource",
        "tags": [
          "approvalworkflow"
        ],
        "parameters": [
          {
            "name": "approvalworkflow_reference",
            "in": "path",
            "required": true,
            "description": "Enter the reference for approvalworkflow",
            "schema": {
              "type": "string",
              "example": "resourceID:resourceName"
            }
          },
          {
            "name": "_return_fields",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Enter the request body here",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "approval_group": {
                    "type": "string",
                    "example": "string"
                  },
                  "approval_notify_to": {
                    "type": "string",
                    "example": "['SUBMITTER', 'APPROVER', 'BOTH']"
                  },
                  "approved_notify_to": {
                    "type": "string",
                    "example": "['SUBMITTER', 'APPROVER', 'BOTH']"
                  },
                  "approver_comment": {
                    "type": "string",
                    "example": "['UNUSED', 'OPTIONAL', 'REQUIRED']"
                  },
                  "enable_approval_notify": {
                    "type": "string",
                    "example": "bool"
                  },
                  "enable_approved_notify": {
                    "type": "string",
                    "example": "bool"
                  },
                  "enable_failed_notify": {
                    "type": "string",
                    "example": "bool"
                  },
                  "enable_notify_group": {
                    "type": "string",
                    "example": "bool"
                  },
                  "enable_notify_user": {
                    "type": "string",
                    "example": "bool"
                  },
                  "enable_rejected_notify": {
                    "type": "string",
                    "example": "bool"
                  },
                  "enable_rescheduled_notify": {
                    "type": "string",
                    "example": "bool"
                  },
                  "enable_succeeded_notify": {
                    "type": "string",
                    "example": "bool"
                  },
                  "extattrs": {
                    "type": "string",
                    "example": "extattr"
                  },
                  "failed_notify_to": {
                    "type": "string",
                    "example": "['SUBMITTER', 'APPROVER', 'BOTH']"
                  },
                  "rejected_notify_to": {
                    "type": "string",
                    "example": "['SUBMITTER', 'APPROVER', 'BOTH']"
                  },
                  "rescheduled_notify_to": {
                    "type": "string",
                    "example": "['SUBMITTER', 'APPROVER', 'BOTH']"
                  },
                  "submitter_comment": {
                    "type": "string",
                    "example": "['UNUSED', 'OPTIONAL', 'REQUIRED']"
                  },
                  "succeeded_notify_to": {
                    "type": "string",
                    "example": "['SUBMITTER', 'APPROVER', 'BOTH']"
                  },
                  "ticket_number": {
                    "type": "string",
                    "example": "['UNUSED', 'OPTIONAL', 'REQUIRED']"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/approvalworkflow"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "description": "Delete the approvalworkflow resource",
        "tags": [
          "approvalworkflow"
        ],
        "parameters": [
          {
            "name": "approvalworkflow_reference",
            "in": "path",
            "required": true,
            "description": "Enter the reference for approvalworkflow",
            "schema": {
              "type": "string",
              "example": "resourceID:resourceName"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "$ref": {
                      "type": "string",
                      "description": "Reference of the deleted string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/wapi/v2.7/authpolicy": {
      "get": {
        "tags": [
          "authpolicy"
        ],
        "parameters": [
          {
            "name": "_return_fields",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_return_fields+",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_max_results",
            "in": "query",
            "required": false,
            "description": "Enter the number of results to be fetched",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "_return_as_object",
            "in": "query",
            "required": false,
            "description": "Select 1 if result is required as a object",
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1
              ],
              "default": 0
            }
          },
          {
            "name": "_paging",
            "in": "query",
            "required": false,
            "description": "Select 1 if paging is required. If SET, _max_results and _return_as_object must be entered.",
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1
              ],
              "default": 0
            }
          },
          {
            "name": " _page_id",
            "in": "query",
            "required": false,
            "description": "Enter the page ID for fetching next page",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "default_group",
            "in": "query",
            "required": false,
            "description": "Enter the value of the field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "usage_type",
            "in": "query",
            "required": false,
            "description": "Enter the value of the field",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authpolicy"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/wapi/v2.7/authpolicy/{authpolicy_reference}": {
      "get": {
        "tags": [
          "authpolicy"
        ],
        "parameters": [
          {
            "name": "authpolicy_reference",
            "in": "path",
            "required": true,
            "description": "Enter the reference for authpolicy",
            "schema": {
              "type": "string",
              "example": "resourceID:resourceName"
            }
          },
          {
            "name": "_return_fields",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_return_fields+",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_return_as_object",
            "in": "query",
            "required": false,
            "description": "Select 1 if result is required as a object",
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1
              ],
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authpolicy"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "put": {
        "description": "Update the authpolicy resource",
        "tags": [
          "authpolicy"
        ],
        "parameters": [
          {
            "name": "authpolicy_reference",
            "in": "path",
            "required": true,
            "description": "Enter the reference for authpolicy",
            "schema": {
              "type": "string",
              "example": "resourceID:resourceName"
            }
          },
          {
            "name": "_return_fields",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Enter the request body here",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "admin_groups": {
                    "type": "string",
                    "example": "string"
                  },
                  "auth_services": {
                    "type": "string",
                    "example": "localuser:authservice"
                  },
                  "default_group": {
                    "type": "string",
                    "example": "string"
                  },
                  "usage_type": {
                    "type": "string",
                    "example": "['FULL', 'AUTH_ONLY']"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authpolicy"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/wapi/v2.7/bfdtemplate": {
      "get": {
        "tags": [
          "bfdtemplate"
        ],
        "parameters": [
          {
            "name": "_return_fields",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_return_fields+",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_max_results",
            "in": "query",
            "required": false,
            "description": "Enter the number of results to be fetched",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "_return_as_object",
            "in": "query",
            "required": false,
            "description": "Select 1 if result is required as a object",
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1
              ],
              "default": 0
            }
          },
          {
            "name": "_paging",
            "in": "query",
            "required": false,
            "description": "Select 1 if paging is required. If SET, _max_results and _return_as_object must be entered.",
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1
              ],
              "default": 0
            }
          },
          {
            "name": " _page_id",
            "in": "query",
            "required": false,
            "description": "Enter the page ID for fetching next page",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "description": "Enter the value of the field",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bfdtemplate"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "bfdtemplate"
        ],
        "parameters": [
          {
            "name": "_return_fields",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Enter the request body here",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "authentication_key": {
                    "type": "string",
                    "example": "string"
                  },
                  "authentication_key_id": {
                    "type": "string",
                    "example": "uint"
                  },
                  "authentication_type": {
                    "type": "string",
                    "example": "['NONE', 'MD5', 'METICULOUS-MD5', 'SHA1', 'METICULOUS-SHA1']"
                  },
                  "detection_multiplier": {
                    "type": "string",
                    "example": "uint"
                  },
                  "min_rx_interval": {
                    "type": "string",
                    "example": "uint"
                  },
                  "min_tx_interval": {
                    "type": "string",
                    "example": "uint"
                  },
                  "name": {
                    "type": "string",
                    "example": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bfdtemplate"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/wapi/v2.7/bfdtemplate/{bfdtemplate_reference}": {
      "get": {
        "tags": [
          "bfdtemplate"
        ],
        "parameters": [
          {
            "name": "bfdtemplate_reference",
            "in": "path",
            "required": true,
            "description": "Enter the reference for bfdtemplate",
            "schema": {
              "type": "string",
              "example": "resourceID:resourceName"
            }
          },
          {
            "name": "_return_fields",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_return_fields+",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_return_as_object",
            "in": "query",
            "required": false,
            "description": "Select 1 if result is required as a object",
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1
              ],
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bfdtemplate"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "put": {
        "description": "Update the bfdtemplate resource",
        "tags": [
          "bfdtemplate"
        ],
        "parameters": [
          {
            "name": "bfdtemplate_reference",
            "in": "path",
            "required": true,
            "description": "Enter the reference for bfdtemplate",
            "schema": {
              "type": "string",
              "example": "resourceID:resourceName"
            }
          },
          {
            "name": "_return_fields",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Enter the request body here",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "authentication_key": {
                    "type": "string",
                    "example": "string"
                  },
                  "authentication_key_id": {
                    "type": "string",
                    "example": "uint"
                  },
                  "authentication_type": {
                    "type": "string",
                    "example": "['NONE', 'MD5', 'METICULOUS-MD5', 'SHA1', 'METICULOUS-SHA1']"
                  },
                  "detection_multiplier": {
                    "type": "string",
                    "example": "uint"
                  },
                  "min_rx_interval": {
                    "type": "string",
                    "example": "uint"
                  },
                  "min_tx_interval": {
                    "type": "string",
                    "example": "uint"
                  },
                  "name": {
                    "type": "string",
                    "example": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bfdtemplate"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "description": "Delete the bfdtemplate resource",
        "tags": [
          "bfdtemplate"
        ],
        "parameters": [
          {
            "name": "bfdtemplate_reference",
            "in": "path",
            "required": true,
            "description": "Enter the reference for bfdtemplate",
            "schema": {
              "type": "string",
              "example": "resourceID:resourceName"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "$ref": {
                      "type": "string",
                      "description": "Reference of the deleted string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/wapi/v2.7/certificate:authservice": {
      "get": {
        "tags": [
          "certificate:authservice"
        ],
        "parameters": [
          {
            "name": "_return_fields",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_return_fields+",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_max_results",
            "in": "query",
            "required": false,
            "description": "Enter the number of results to be fetched",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "_return_as_object",
            "in": "query",
            "required": false,
            "description": "Select 1 if result is required as a object",
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1
              ],
              "default": 0
            }
          },
          {
            "name": "_paging",
            "in": "query",
            "required": false,
            "description": "Select 1 if paging is required. If SET, _max_results and _return_as_object must be entered.",
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1
              ],
              "default": 0
            }
          },
          {
            "name": " _page_id",
            "in": "query",
            "required": false,
            "description": "Enter the page ID for fetching next page",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_cert_subject",
            "in": "query",
            "required": false,
            "description": "Enter the value of the field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "comment",
            "in": "query",
            "required": false,
            "description": "Enter the value of the field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "description": "Enter the value of the field",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/certificate_authservice"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "certificate:authservice"
        ],
        "parameters": [
          {
            "name": "_return_fields",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Enter the request body here",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "auto_populate_login": {
                    "type": "string",
                    "example": "['SERIAL_NUMBER', 'S_DN_CN', 'S_DN_EMAIL', 'SAN_UPN', 'SAN_EMAIL', 'AD_SUBJECT_ISSUER']"
                  },
                  "ca_certificates": {
                    "type": "string",
                    "example": "cacertificate"
                  },
                  "client_cert_subject": {
                    "type": "string",
                    "example": "string"
                  },
                  "comment": {
                    "type": "string",
                    "example": "string"
                  },
                  "disabled": {
                    "type": "string",
                    "example": "bool"
                  },
                  "enable_password_request": {
                    "type": "string",
                    "example": "bool"
                  },
                  "enable_remote_lookup": {
                    "type": "string",
                    "example": "bool"
                  },
                  "max_retries": {
                    "type": "string",
                    "example": "uint"
                  },
                  "name": {
                    "type": "string",
                    "example": "string"
                  },
                  "ocsp_check": {
                    "type": "string",
                    "example": "['MANUAL', 'AIA_ONLY', 'AIA_AND_MANUAL', 'DISABLED']"
                  },
                  "ocsp_responders": {
                    "type": "string",
                    "example": "[{'fqdn_or_ip': 'string', 'port': 'uint', 'comment': 'string', 'disabled': 'bool', 'certificate': 'string', 'certificate_token': 'string'}]"
                  },
                  "recovery_interval": {
                    "type": "string",
                    "example": "uint"
                  },
                  "remote_lookup_password": {
                    "type": "string",
                    "example": "string"
                  },
                  "remote_lookup_service": {
                    "type": "string",
                    "example": "string"
                  },
                  "remote_lookup_username": {
                    "type": "string",
                    "example": "string"
                  },
                  "response_timeout": {
                    "type": "string",
                    "example": "uint"
                  },
                  "trust_model": {
                    "type": "string",
                    "example": "['DIRECT', 'DELEGATED']"
                  },
                  "user_match_type": {
                    "type": "string",
                    "example": "['DIRECT_MATCH', 'AUTO_MATCH']"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/certificate_authservice"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/wapi/v2.7/certificate:authservice/{certificate:authservice_reference}": {
      "get": {
        "tags": [
          "certificate:authservice"
        ],
        "parameters": [
          {
            "name": "certificate:authservice_reference",
            "in": "path",
            "required": true,
            "description": "Enter the reference for certificate:authservice",
            "schema": {
              "type": "string",
              "example": "resourceID:resourceName"
            }
          },
          {
            "name": "_return_fields",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_return_fields+",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_return_as_object",
            "in": "query",
            "required": false,
            "description": "Select 1 if result is required as a object",
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1
              ],
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/certificate_authservice"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "description": "Function calls",
        "tags": [
          "certificate:authservice"
        ],
        "parameters": [
          {
            "name": "certificate:authservice_reference",
            "in": "path",
            "required": true,
            "description": "Enter the reference for certificate:authservice",
            "schema": {
              "type": "string",
              "example": "resourceID:resourceName"
            }
          },
          {
            "name": "_function",
            "in": "query",
            "required": true,
            "description": "Select the function",
            "schema": {
              "type": "string",
              "enum": [
                "test_ocsp_responder_settings"
              ]
            }
          }
        ],
        "requestBody": {
          "description": "Enter the request body here",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "test_ocsp_responder_settings": {
                      "type": "string",
                      "example": {
                        "certificate_auth_service": "string",
                        "ocsp_responder": "ocsp_responder"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "put": {
        "description": "Update the certificate:authservice resource",
        "tags": [
          "certificate:authservice"
        ],
        "parameters": [
          {
            "name": "certificate:authservice_reference",
            "in": "path",
            "required": true,
            "description": "Enter the reference for certificate:authservice",
            "schema": {
              "type": "string",
              "example": "resourceID:resourceName"
            }
          },
          {
            "name": "_return_fields",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Enter the request body here",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "auto_populate_login": {
                    "type": "string",
                    "example": "['SERIAL_NUMBER', 'S_DN_CN', 'S_DN_EMAIL', 'SAN_UPN', 'SAN_EMAIL', 'AD_SUBJECT_ISSUER']"
                  },
                  "ca_certificates": {
                    "type": "string",
                    "example": "cacertificate"
                  },
                  "client_cert_subject": {
                    "type": "string",
                    "example": "string"
                  },
                  "comment": {
                    "type": "string",
                    "example": "string"
                  },
                  "disabled": {
                    "type": "string",
                    "example": "bool"
                  },
                  "enable_password_request": {
                    "type": "string",
                    "example": "bool"
                  },
                  "enable_remote_lookup": {
                    "type": "string",
                    "example": "bool"
                  },
                  "max_retries": {
                    "type": "string",
                    "example": "uint"
                  },
                  "name": {
                    "type": "string",
                    "example": "string"
                  },
                  "ocsp_check": {
                    "type": "string",
                    "example": "['MANUAL', 'AIA_ONLY', 'AIA_AND_MANUAL', 'DISABLED']"
                  },
                  "ocsp_responders": {
                    "type": "string",
                    "example": "[{'fqdn_or_ip': 'string', 'port': 'uint', 'comment': 'string', 'disabled': 'bool', 'certificate': 'string', 'certificate_token': 'string'}]"
                  },
                  "recovery_interval": {
                    "type": "string",
                    "example": "uint"
                  },
                  "remote_lookup_password": {
                    "type": "string",
                    "example": "string"
                  },
                  "remote_lookup_service": {
                    "type": "string",
                    "example": "string"
                  },
                  "remote_lookup_username": {
                    "type": "string",
                    "example": "string"
                  },
                  "response_timeout": {
                    "type": "string",
                    "example": "uint"
                  },
                  "trust_model": {
                    "type": "string",
                    "example": "['DIRECT', 'DELEGATED']"
                  },
                  "user_match_type": {
                    "type": "string",
                    "example": "['DIRECT_MATCH', 'AUTO_MATCH']"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/certificate_authservice"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "description": "Delete the certificate:authservice resource",
        "tags": [
          "certificate:authservice"
        ],
        "parameters": [
          {
            "name": "certificate:authservice_reference",
            "in": "path",
            "required": true,
            "description": "Enter the reference for certificate:authservice",
            "schema": {
              "type": "string",
              "example": "resourceID:resourceName"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "$ref": {
                      "type": "string",
                      "description": "Reference of the deleted string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/wapi/v2.7/ftpuser": {
      "get": {
        "tags": [
          "ftpuser"
        ],
        "parameters": [
          {
            "name": "_return_fields",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_return_fields+",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_max_results",
            "in": "query",
            "required": false,
            "description": "Enter the number of results to be fetched",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "_return_as_object",
            "in": "query",
            "required": false,
            "description": "Select 1 if result is required as a object",
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1
              ],
              "default": 0
            }
          },
          {
            "name": "_paging",
            "in": "query",
            "required": false,
            "description": "Select 1 if paging is required. If SET, _max_results and _return_as_object must be entered.",
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1
              ],
              "default": 0
            }
          },
          {
            "name": " _page_id",
            "in": "query",
            "required": false,
            "description": "Enter the page ID for fetching next page",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "username",
            "in": "query",
            "required": false,
            "description": "Enter the value of the field",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ftpuser"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "ftpuser"
        ],
        "parameters": [
          {
            "name": "_return_fields",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Enter the request body here",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "create_home_dir": {
                    "type": "string",
                    "example": "bool"
                  },
                  "extattrs": {
                    "type": "string",
                    "example": "extattr"
                  },
                  "home_dir": {
                    "type": "string",
                    "example": "string"
                  },
                  "password": {
                    "type": "string",
                    "example": "string"
                  },
                  "permission": {
                    "type": "string",
                    "example": "['RO', 'RW']"
                  },
                  "username": {
                    "type": "string",
                    "example": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ftpuser"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/wapi/v2.7/ftpuser/{ftpuser_reference}": {
      "get": {
        "tags": [
          "ftpuser"
        ],
        "parameters": [
          {
            "name": "ftpuser_reference",
            "in": "path",
            "required": true,
            "description": "Enter the reference for ftpuser",
            "schema": {
              "type": "string",
              "example": "resourceID:resourceName"
            }
          },
          {
            "name": "_return_fields",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_return_fields+",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_return_as_object",
            "in": "query",
            "required": false,
            "description": "Select 1 if result is required as a object",
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1
              ],
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ftpuser"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "put": {
        "description": "Update the ftpuser resource",
        "tags": [
          "ftpuser"
        ],
        "parameters": [
          {
            "name": "ftpuser_reference",
            "in": "path",
            "required": true,
            "description": "Enter the reference for ftpuser",
            "schema": {
              "type": "string",
              "example": "resourceID:resourceName"
            }
          },
          {
            "name": "_return_fields",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Enter the request body here",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "extattrs": {
                    "type": "string",
                    "example": "extattr"
                  },
                  "password": {
                    "type": "string",
                    "example": "string"
                  },
                  "permission": {
                    "type": "string",
                    "example": "['RO', 'RW']"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ftpuser"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "description": "Delete the ftpuser resource",
        "tags": [
          "ftpuser"
        ],
        "parameters": [
          {
            "name": "ftpuser_reference",
            "in": "path",
            "required": true,
            "description": "Enter the reference for ftpuser",
            "schema": {
              "type": "string",
              "example": "resourceID:resourceName"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "$ref": {
                      "type": "string",
                      "description": "Reference of the deleted string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/wapi/v2.7/ldap_auth_service": {
      "get": {
        "tags": [
          "ldap_auth_service"
        ],
        "parameters": [
          {
            "name": "_return_fields",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_return_fields+",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_max_results",
            "in": "query",
            "required": false,
            "description": "Enter the number of results to be fetched",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "_return_as_object",
            "in": "query",
            "required": false,
            "description": "Select 1 if result is required as a object",
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1
              ],
              "default": 0
            }
          },
          {
            "name": "_paging",
            "in": "query",
            "required": false,
            "description": "Select 1 if paging is required. If SET, _max_results and _return_as_object must be entered.",
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1
              ],
              "default": 0
            }
          },
          {
            "name": " _page_id",
            "in": "query",
            "required": false,
            "description": "Enter the page ID for fetching next page",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "comment",
            "in": "query",
            "required": false,
            "description": "Enter the value of the field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mode",
            "in": "query",
            "required": false,
            "description": "Enter the value of the field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "description": "Enter the value of the field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search_scope",
            "in": "query",
            "required": false,
            "description": "Enter the value of the field",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ldap_auth_service"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "ldap_auth_service"
        ],
        "parameters": [
          {
            "name": "_return_fields",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Enter the request body here",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "comment": {
                    "type": "string",
                    "example": "string"
                  },
                  "disable": {
                    "type": "string",
                    "example": "bool"
                  },
                  "ea_mapping": {
                    "type": "string",
                    "example": "[{'name': 'string', 'mapped_ea': 'string'}]"
                  },
                  "ldap_group_attribute": {
                    "type": "string",
                    "example": "string"
                  },
                  "ldap_group_authentication_type": {
                    "type": "string",
                    "example": "['GROUP_ATTRIBUTE', 'POSIX_GROUP']"
                  },
                  "ldap_user_attribute": {
                    "type": "string",
                    "example": "string"
                  },
                  "mode": {
                    "type": "string",
                    "example": "['ORDERED_LIST', 'ROUND_ROBIN']"
                  },
                  "name": {
                    "type": "string",
                    "example": "string"
                  },
                  "recovery_interval": {
                    "type": "string",
                    "example": "uint"
                  },
                  "retries": {
                    "type": "string",
                    "example": "uint"
                  },
                  "search_scope": {
                    "type": "string",
                    "example": "['BASE', 'ONELEVEL', 'SUBTREE']"
                  },
                  "servers": {
                    "type": "string",
                    "example": "[{'address': 'string', 'authentication_type': 'enum', 'base_dn': 'string', 'bind_password': 'string', 'bind_user_dn': 'string', 'comment': 'string', 'disable': 'bool', 'encryption': 'enum', 'port': 'uint', 'use_mgmt_port': 'bool', 'version': 'enum'}]"
                  },
                  "timeout": {
                    "type": "string",
                    "example": "uint"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ldap_auth_service"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/wapi/v2.7/ldap_auth_service/{ldap_auth_service_reference}": {
      "get": {
        "tags": [
          "ldap_auth_service"
        ],
        "parameters": [
          {
            "name": "ldap_auth_service_reference",
            "in": "path",
            "required": true,
            "description": "Enter the reference for ldap_auth_service",
            "schema": {
              "type": "string",
              "example": "resourceID:resourceName"
            }
          },
          {
            "name": "_return_fields",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_return_fields+",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_return_as_object",
            "in": "query",
            "required": false,
            "description": "Select 1 if result is required as a object",
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1
              ],
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ldap_auth_service"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "description": "Function calls",
        "tags": [
          "ldap_auth_service"
        ],
        "parameters": [
          {
            "name": "ldap_auth_service_reference",
            "in": "path",
            "required": true,
            "description": "Enter the reference for ldap_auth_service",
            "schema": {
              "type": "string",
              "example": "resourceID:resourceName"
            }
          },
          {
            "name": "_function",
            "in": "query",
            "required": true,
            "description": "Select the function",
            "schema": {
              "type": "string",
              "enum": [
                "check_ldap_server_settings"
              ]
            }
          }
        ],
        "requestBody": {
          "description": "Enter the request body here",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "check_ldap_server_settings": {
                      "type": "string",
                      "example": {
                        "ldap_server": "ldap_server",
                        "timeout": "uint",
                        "ldap_authservice": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "put": {
        "description": "Update the ldap_auth_service resource",
        "tags": [
          "ldap_auth_service"
        ],
        "parameters": [
          {
            "name": "ldap_auth_service_reference",
            "in": "path",
            "required": true,
            "description": "Enter the reference for ldap_auth_service",
            "schema": {
              "type": "string",
              "example": "resourceID:resourceName"
            }
          },
          {
            "name": "_return_fields",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Enter the request body here",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "comment": {
                    "type": "string",
                    "example": "string"
                  },
                  "disable": {
                    "type": "string",
                    "example": "bool"
                  },
                  "ea_mapping": {
                    "type": "string",
                    "example": "[{'name': 'string', 'mapped_ea': 'string'}]"
                  },
                  "ldap_group_attribute": {
                    "type": "string",
                    "example": "string"
                  },
                  "ldap_group_authentication_type": {
                    "type": "string",
                    "example": "['GROUP_ATTRIBUTE', 'POSIX_GROUP']"
                  },
                  "ldap_user_attribute": {
                    "type": "string",
                    "example": "string"
                  },
                  "mode": {
                    "type": "string",
                    "example": "['ORDERED_LIST', 'ROUND_ROBIN']"
                  },
                  "name": {
                    "type": "string",
                    "example": "string"
                  },
                  "recovery_interval": {
                    "type": "string",
                    "example": "uint"
                  },
                  "retries": {
                    "type": "string",
                    "example": "uint"
                  },
                  "search_scope": {
                    "type": "string",
                    "example": "['BASE', 'ONELEVEL', 'SUBTREE']"
                  },
                  "servers": {
                    "type": "string",
                    "example": "[{'address': 'string', 'authentication_type': 'enum', 'base_dn': 'string', 'bind_password': 'string', 'bind_user_dn': 'string', 'comment': 'string', 'disable': 'bool', 'encryption': 'enum', 'port': 'uint', 'use_mgmt_port': 'bool', 'version': 'enum'}]"
                  },
                  "timeout": {
                    "type": "string",
                    "example": "uint"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ldap_auth_service"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "description": "Delete the ldap_auth_service resource",
        "tags": [
          "ldap_auth_service"
        ],
        "parameters": [
          {
            "name": "ldap_auth_service_reference",
            "in": "path",
            "required": true,
            "description": "Enter the reference for ldap_auth_service",
            "schema": {
              "type": "string",
              "example": "resourceID:resourceName"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "$ref": {
                      "type": "string",
                      "description": "Reference of the deleted string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/wapi/v2.7/localuser:authservice": {
      "get": {
        "tags": [
          "localuser:authservice"
        ],
        "parameters": [
          {
            "name": "_return_fields",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_return_fields+",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_max_results",
            "in": "query",
            "required": false,
            "description": "Enter the number of results to be fetched",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "_return_as_object",
            "in": "query",
            "required": false,
            "description": "Select 1 if result is required as a object",
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1
              ],
              "default": 0
            }
          },
          {
            "name": "_paging",
            "in": "query",
            "required": false,
            "description": "Select 1 if paging is required. If SET, _max_results and _return_as_object must be entered.",
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1
              ],
              "default": 0
            }
          },
          {
            "name": " _page_id",
            "in": "query",
            "required": false,
            "description": "Enter the page ID for fetching next page",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/localuser_authservice"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/wapi/v2.7/localuser:authservice/{localuser:authservice_reference}": {
      "get": {
        "tags": [
          "localuser:authservice"
        ],
        "parameters": [
          {
            "name": "localuser:authservice_reference",
            "in": "path",
            "required": true,
            "description": "Enter the reference for localuser:authservice",
            "schema": {
              "type": "string",
              "example": "resourceID:resourceName"
            }
          },
          {
            "name": "_return_fields",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_return_fields+",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_return_as_object",
            "in": "query",
            "required": false,
            "description": "Select 1 if result is required as a object",
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1
              ],
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/localuser_authservice"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/wapi/v2.7/networkuser": {
      "get": {
        "tags": [
          "networkuser"
        ],
        "parameters": [
          {
            "name": "_return_fields",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_return_fields+",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_max_results",
            "in": "query",
            "required": false,
            "description": "Enter the number of results to be fetched",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "_return_as_object",
            "in": "query",
            "required": false,
            "description": "Select 1 if result is required as a object",
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1
              ],
              "default": 0
            }
          },
          {
            "name": "_paging",
            "in": "query",
            "required": false,
            "description": "Select 1 if paging is required. If SET, _max_results and _return_as_object must be entered.",
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1
              ],
              "default": 0
            }
          },
          {
            "name": " _page_id",
            "in": "query",
            "required": false,
            "description": "Enter the page ID for fetching next page",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "in": "query",
            "required": false,
            "description": "Enter the value of the field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "domainname",
            "in": "query",
            "required": false,
            "description": "Enter the value of the field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "guid",
            "in": "query",
            "required": false,
            "description": "Enter the value of the field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "logon_id",
            "in": "query",
            "required": false,
            "description": "Enter the value of the field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "description": "Enter the value of the field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "network_view",
            "in": "query",
            "required": false,
            "description": "Enter the value of the field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_status",
            "in": "query",
            "required": false,
            "description": "Enter the value of the field",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/networkuser"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "networkuser"
        ],
        "parameters": [
          {
            "name": "_return_fields",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Enter the request body here",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "address": {
                    "type": "string",
                    "example": "string"
                  },
                  "domainname": {
                    "type": "string",
                    "example": "string"
                  },
                  "first_seen_time": {
                    "type": "string",
                    "example": "timestamp"
                  },
                  "guid": {
                    "type": "string",
                    "example": "string"
                  },
                  "last_seen_time": {
                    "type": "string",
                    "example": "timestamp"
                  },
                  "last_updated_time": {
                    "type": "string",
                    "example": "timestamp"
                  },
                  "logon_id": {
                    "type": "string",
                    "example": "string"
                  },
                  "logout_time": {
                    "type": "string",
                    "example": "timestamp"
                  },
                  "name": {
                    "type": "string",
                    "example": "string"
                  },
                  "network_view": {
                    "type": "string",
                    "example": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/networkuser"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/wapi/v2.7/networkuser/{networkuser_reference}": {
      "get": {
        "tags": [
          "networkuser"
        ],
        "parameters": [
          {
            "name": "networkuser_reference",
            "in": "path",
            "required": true,
            "description": "Enter the reference for networkuser",
            "schema": {
              "type": "string",
              "example": "resourceID:resourceName"
            }
          },
          {
            "name": "_return_fields",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_return_fields+",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_return_as_object",
            "in": "query",
            "required": false,
            "description": "Select 1 if result is required as a object",
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1
              ],
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/networkuser"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "put": {
        "description": "Update the networkuser resource",
        "tags": [
          "networkuser"
        ],
        "parameters": [
          {
            "name": "networkuser_reference",
            "in": "path",
            "required": true,
            "description": "Enter the reference for networkuser",
            "schema": {
              "type": "string",
              "example": "resourceID:resourceName"
            }
          },
          {
            "name": "_return_fields",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Enter the request body here",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "address": {
                    "type": "string",
                    "example": "string"
                  },
                  "domainname": {
                    "type": "string",
                    "example": "string"
                  },
                  "first_seen_time": {
                    "type": "string",
                    "example": "timestamp"
                  },
                  "guid": {
                    "type": "string",
                    "example": "string"
                  },
                  "last_seen_time": {
                    "type": "string",
                    "example": "timestamp"
                  },
                  "last_updated_time": {
                    "type": "string",
                    "example": "timestamp"
                  },
                  "logon_id": {
                    "type": "string",
                    "example": "string"
                  },
                  "logout_time": {
                    "type": "string",
                    "example": "timestamp"
                  },
                  "name": {
                    "type": "string",
                    "example": "string"
                  },
                  "network_view": {
                    "type": "string",
                    "example": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/networkuser"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "description": "Delete the networkuser resource",
        "tags": [
          "networkuser"
        ],
        "parameters": [
          {
            "name": "networkuser_reference",
            "in": "path",
            "required": true,
            "description": "Enter the reference for networkuser",
            "schema": {
              "type": "string",
              "example": "resourceID:resourceName"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "$ref": {
                      "type": "string",
                      "description": "Reference of the deleted string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/wapi/v2.7/permission": {
      "get": {
        "tags": [
          "permission"
        ],
        "parameters": [
          {
            "name": "_return_fields",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_return_fields+",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_max_results",
            "in": "query",
            "required": false,
            "description": "Enter the number of results to be fetched",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "_return_as_object",
            "in": "query",
            "required": false,
            "description": "Select 1 if result is required as a object",
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1
              ],
              "default": 0
            }
          },
          {
            "name": "_paging",
            "in": "query",
            "required": false,
            "description": "Select 1 if paging is required. If SET, _max_results and _return_as_object must be entered.",
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1
              ],
              "default": 0
            }
          },
          {
            "name": " _page_id",
            "in": "query",
            "required": false,
            "description": "Enter the page ID for fetching next page",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "group",
            "in": "query",
            "required": false,
            "description": "Enter the value of the field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "object",
            "in": "query",
            "required": false,
            "description": "Enter the value of the field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "permission",
            "in": "query",
            "required": false,
            "description": "Enter the value of the field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "resource_type",
            "in": "query",
            "required": false,
            "description": "Enter the value of the field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "role",
            "in": "query",
            "required": false,
            "description": "Enter the value of the field",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/permission"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "permission"
        ],
        "parameters": [
          {
            "name": "_return_fields",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Enter the request body here",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "group": {
                    "type": "string",
                    "example": "string"
                  },
                  "object": {
                    "type": "string",
                    "example": "string"
                  },
                  "permission": {
                    "type": "string",
                    "example": "['DENY', 'READ', 'WRITE']"
                  },
                  "resource_type": {
                    "type": "string",
                    "example": "['SUPER_HOST', 'VLAN_VIEW', 'Unknown', 'IDNS_MONITOR', 'AAAA', 'SCHEDULE_TASK', 'GRID_DHCP_PROPERTIES', 'IDNS_GEO_IP', 'BULKHOST', 'DHCP_FINGERPRINT', 'IDNS_LBDN_RECORD', 'SG_IPV6_NETWORK', 'MSSERVER', 'VLAN_OBJECTS', 'IDNS_LBDN', 'GRID_AAA_PROPERTIES', 'NAPTR', 'SUB_GRID', 'IPV6_NETWORK_TEMPLATE', 'IMC_PROPERTIES', 'FIXED_ADDRESS_TEMPLATE', 'NETWORK_DISCOVERY', 'SHARED_NETWORK', 'IDNS_CERTIFICATE', 'DATACOLLECTOR_CLUSTER', 'FIREEYE_PUBLISH_ALERT', 'CLUSTER', 'OPTION_SPACE', 'RESTART_SERVICE', 'SHARED_SRV', 'IPV6_DHCP_LEASE_HISTORY', 'VIEW', 'IPV6_RANGE', 'CNAME', 'IPV6_NETWORK', 'SHARED_AAAA', 'DASHBOARD_TASK', 'FIXED_ADDRESS', 'NETWORK_CONTAINER', 'SG_IPV4_NETWORK', 'DNAME', 'IPV6_SHARED_NETWORK', 'PTR', 'GRID_ANALYTICS_PROPERTIES', 'TLSA', 'CA_CERTIFICATE', 'RANGE', 'RULESET', 'AAA_EXTERNAL_SERVICE', 'HSM_GROUP', 'HOST_ADDRESS', 'IDNS_TOPOLOGY', 'SHARED_A', 'DELETED_OBJS_INFO_TRACKING', 'SHARED_TXT', 'DHCP_LEASE_HISTORY', 'MEMBER_DHCP_PROPERTIES', 'SUB_GRID_NETWORK_VIEW_PARENT', 'IMC_SITE', 'KERBEROS_KEY', 'MEMBER_SECURITY_PROPERTIES', 'IPV6_HOST_ADDRESS', 'IMC_AVP', 'MEMBER', 'IPV6_NETWORK_CONTAINER', 'VLAN_RANGE', 'RESPONSE_POLICY_ZONE', 'FILE_DIST_DIRECTORY', 'RESPONSE_POLICY_RULE', 'MS_SUPERSCOPE', 'HOST', 'SRV', 'IDNS_POOL', 'PORT_CONTROL', 'TENANT', 'IDNS_SERVER', 'OCSP_SERVICE', 'MEMBER_DNS_PROPERTIES', 'NETWORK_TEMPLATE', 'TEMPLATE', 'SHARED_RECORD_GROUP', 'CSV_IMPORT_TASK', 'IPV6_TEMPLATE', 'NETWORK', 'NETWORK_VIEW', 'IPV6_FIXED_ADDRESS', 'GRID_REPORTING_PROPERTIES', 'CAA', 'GRID_DNS_PROPERTIES', 'IPV6_FIXED_ADDRESS_TEMPLATE', 'REPORTING_DASHBOARD', 'ROAMING_HOST', 'ADD_A_RR_WITH_EMPTY_HOSTNAME', 'DHCP_MAC_FILTER', 'GRID_FILE_DIST_PROPERTIES', 'TXT', 'IPV6_RANGE_TEMPLATE', 'RANGE_TEMPLATE', 'DEFINED_ACL', 'A', 'SHARED_CNAME', 'BFD_TEMPLATE', 'GRID_SECURITY_PROPERTIES', 'MS_ADSITES_DOMAIN', 'SAML_AUTH_SERVICE', 'SHARED_MX', 'ALIAS', 'DEVICE', 'SG_NETWORK_VIEW', 'DNS64_SYNTHESIS_GROUP', 'ZONE', 'REPORTING_SEARCH', 'RECLAMATION', 'MX', 'MEMBER_CLOUD', 'MEMBER_ANALYTICS_PROPERTIES', 'RESTORABLE_OPERATION', 'MEMBER_FILE_DIST_PROPERTIES']"
                  },
                  "role": {
                    "type": "string",
                    "example": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/permission"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/wapi/v2.7/permission/{permission_reference}": {
      "get": {
        "tags": [
          "permission"
        ],
        "parameters": [
          {
            "name": "permission_reference",
            "in": "path",
            "required": true,
            "description": "Enter the reference for permission",
            "schema": {
              "type": "string",
              "example": "resourceID:resourceName"
            }
          },
          {
            "name": "_return_fields",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_return_fields+",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_return_as_object",
            "in": "query",
            "required": false,
            "description": "Select 1 if result is required as a object",
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1
              ],
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/permission"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "put": {
        "description": "Update the permission resource",
        "tags": [
          "permission"
        ],
        "parameters": [
          {
            "name": "permission_reference",
            "in": "path",
            "required": true,
            "description": "Enter the reference for permission",
            "schema": {
              "type": "string",
              "example": "resourceID:resourceName"
            }
          },
          {
            "name": "_return_fields",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Enter the request body here",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "group": {
                    "type": "string",
                    "example": "string"
                  },
                  "object": {
                    "type": "string",
                    "example": "string"
                  },
                  "permission": {
                    "type": "string",
                    "example": "['DENY', 'READ', 'WRITE']"
                  },
                  "resource_type": {
                    "type": "string",
                    "example": "['SUPER_HOST', 'VLAN_VIEW', 'Unknown', 'IDNS_MONITOR', 'AAAA', 'SCHEDULE_TASK', 'GRID_DHCP_PROPERTIES', 'IDNS_GEO_IP', 'BULKHOST', 'DHCP_FINGERPRINT', 'IDNS_LBDN_RECORD', 'SG_IPV6_NETWORK', 'MSSERVER', 'VLAN_OBJECTS', 'IDNS_LBDN', 'GRID_AAA_PROPERTIES', 'NAPTR', 'SUB_GRID', 'IPV6_NETWORK_TEMPLATE', 'IMC_PROPERTIES', 'FIXED_ADDRESS_TEMPLATE', 'NETWORK_DISCOVERY', 'SHARED_NETWORK', 'IDNS_CERTIFICATE', 'DATACOLLECTOR_CLUSTER', 'FIREEYE_PUBLISH_ALERT', 'CLUSTER', 'OPTION_SPACE', 'RESTART_SERVICE', 'SHARED_SRV', 'IPV6_DHCP_LEASE_HISTORY', 'VIEW', 'IPV6_RANGE', 'CNAME', 'IPV6_NETWORK', 'SHARED_AAAA', 'DASHBOARD_TASK', 'FIXED_ADDRESS', 'NETWORK_CONTAINER', 'SG_IPV4_NETWORK', 'DNAME', 'IPV6_SHARED_NETWORK', 'PTR', 'GRID_ANALYTICS_PROPERTIES', 'TLSA', 'CA_CERTIFICATE', 'RANGE', 'RULESET', 'AAA_EXTERNAL_SERVICE', 'HSM_GROUP', 'HOST_ADDRESS', 'IDNS_TOPOLOGY', 'SHARED_A', 'DELETED_OBJS_INFO_TRACKING', 'SHARED_TXT', 'DHCP_LEASE_HISTORY', 'MEMBER_DHCP_PROPERTIES', 'SUB_GRID_NETWORK_VIEW_PARENT', 'IMC_SITE', 'KERBEROS_KEY', 'MEMBER_SECURITY_PROPERTIES', 'IPV6_HOST_ADDRESS', 'IMC_AVP', 'MEMBER', 'IPV6_NETWORK_CONTAINER', 'VLAN_RANGE', 'RESPONSE_POLICY_ZONE', 'FILE_DIST_DIRECTORY', 'RESPONSE_POLICY_RULE', 'MS_SUPERSCOPE', 'HOST', 'SRV', 'IDNS_POOL', 'PORT_CONTROL', 'TENANT', 'IDNS_SERVER', 'OCSP_SERVICE', 'MEMBER_DNS_PROPERTIES', 'NETWORK_TEMPLATE', 'TEMPLATE', 'SHARED_RECORD_GROUP', 'CSV_IMPORT_TASK', 'IPV6_TEMPLATE', 'NETWORK', 'NETWORK_VIEW', 'IPV6_FIXED_ADDRESS', 'GRID_REPORTING_PROPERTIES', 'CAA', 'GRID_DNS_PROPERTIES', 'IPV6_FIXED_ADDRESS_TEMPLATE', 'REPORTING_DASHBOARD', 'ROAMING_HOST', 'ADD_A_RR_WITH_EMPTY_HOSTNAME', 'DHCP_MAC_FILTER', 'GRID_FILE_DIST_PROPERTIES', 'TXT', 'IPV6_RANGE_TEMPLATE', 'RANGE_TEMPLATE', 'DEFINED_ACL', 'A', 'SHARED_CNAME', 'BFD_TEMPLATE', 'GRID_SECURITY_PROPERTIES', 'MS_ADSITES_DOMAIN', 'SAML_AUTH_SERVICE', 'SHARED_MX', 'ALIAS', 'DEVICE', 'SG_NETWORK_VIEW', 'DNS64_SYNTHESIS_GROUP', 'ZONE', 'REPORTING_SEARCH', 'RECLAMATION', 'MX', 'MEMBER_CLOUD', 'MEMBER_ANALYTICS_PROPERTIES', 'RESTORABLE_OPERATION', 'MEMBER_FILE_DIST_PROPERTIES']"
                  },
                  "role": {
                    "type": "string",
                    "example": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/permission"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "description": "Delete the permission resource",
        "tags": [
          "permission"
        ],
        "parameters": [
          {
            "name": "permission_reference",
            "in": "path",
            "required": true,
            "description": "Enter the reference for permission",
            "schema": {
              "type": "string",
              "example": "resourceID:resourceName"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "$ref": {
                      "type": "string",
                      "description": "Reference of the deleted string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/wapi/v2.7/radius:authservice": {
      "get": {
        "tags": [
          "radius:authservice"
        ],
        "parameters": [
          {
            "name": "_return_fields",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_return_fields+",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_max_results",
            "in": "query",
            "required": false,
            "description": "Enter the number of results to be fetched",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "_return_as_object",
            "in": "query",
            "required": false,
            "description": "Select 1 if result is required as a object",
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1
              ],
              "default": 0
            }
          },
          {
            "name": "_paging",
            "in": "query",
            "required": false,
            "description": "Select 1 if paging is required. If SET, _max_results and _return_as_object must be entered.",
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1
              ],
              "default": 0
            }
          },
          {
            "name": " _page_id",
            "in": "query",
            "required": false,
            "description": "Enter the page ID for fetching next page",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "comment",
            "in": "query",
            "required": false,
            "description": "Enter the value of the field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mode",
            "in": "query",
            "required": false,
            "description": "Enter the value of the field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "description": "Enter the value of the field",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/radius_authservice"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "radius:authservice"
        ],
        "parameters": [
          {
            "name": "_return_fields",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Enter the request body here",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "acct_retries": {
                    "type": "string",
                    "example": "uint"
                  },
                  "acct_timeout": {
                    "type": "string",
                    "example": "uint"
                  },
                  "auth_retries": {
                    "type": "string",
                    "example": "uint"
                  },
                  "auth_timeout": {
                    "type": "string",
                    "example": "uint"
                  },
                  "cache_ttl": {
                    "type": "string",
                    "example": "uint"
                  },
                  "comment": {
                    "type": "string",
                    "example": "string"
                  },
                  "disable": {
                    "type": "string",
                    "example": "bool"
                  },
                  "enable_cache": {
                    "type": "string",
                    "example": "bool"
                  },
                  "mode": {
                    "type": "string",
                    "example": "['HUNT_GROUP', 'ROUND_ROBIN']"
                  },
                  "name": {
                    "type": "string",
                    "example": "string"
                  },
                  "recovery_interval": {
                    "type": "string",
                    "example": "uint"
                  },
                  "servers": {
                    "type": "string",
                    "example": "[{'acct_port': 'uint', 'auth_port': 'uint', 'auth_type': 'enum', 'comment': 'string', 'disable': 'bool', 'address': 'string', 'shared_secret': 'string', 'use_accounting': 'bool', 'use_mgmt_port': 'bool'}]"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/radius_authservice"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/wapi/v2.7/radius:authservice/{radius:authservice_reference}": {
      "get": {
        "tags": [
          "radius:authservice"
        ],
        "parameters": [
          {
            "name": "radius:authservice_reference",
            "in": "path",
            "required": true,
            "description": "Enter the reference for radius:authservice",
            "schema": {
              "type": "string",
              "example": "resourceID:resourceName"
            }
          },
          {
            "name": "_return_fields",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_return_fields+",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_return_as_object",
            "in": "query",
            "required": false,
            "description": "Select 1 if result is required as a object",
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1
              ],
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/radius_authservice"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "description": "Function calls",
        "tags": [
          "radius:authservice"
        ],
        "parameters": [
          {
            "name": "radius:authservice_reference",
            "in": "path",
            "required": true,
            "description": "Enter the reference for radius:authservice",
            "schema": {
              "type": "string",
              "example": "resourceID:resourceName"
            }
          },
          {
            "name": "_function",
            "in": "query",
            "required": true,
            "description": "Select the function",
            "schema": {
              "type": "string",
              "enum": [
                "check_radius_server_settings"
              ]
            }
          }
        ],
        "requestBody": {
          "description": "Enter the request body here",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "check_radius_server_settings": {
                      "type": "string",
                      "example": {
                        "radius_server": "radius:server",
                        "auth_timeout": "uint",
                        "acct_timeout": "uint",
                        "radius_authservice": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "put": {
        "description": "Update the radius:authservice resource",
        "tags": [
          "radius:authservice"
        ],
        "parameters": [
          {
            "name": "radius:authservice_reference",
            "in": "path",
            "required": true,
            "description": "Enter the reference for radius:authservice",
            "schema": {
              "type": "string",
              "example": "resourceID:resourceName"
            }
          },
          {
            "name": "_return_fields",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Enter the request body here",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "acct_retries": {
                    "type": "string",
                    "example": "uint"
                  },
                  "acct_timeout": {
                    "type": "string",
                    "example": "uint"
                  },
                  "auth_retries": {
                    "type": "string",
                    "example": "uint"
                  },
                  "auth_timeout": {
                    "type": "string",
                    "example": "uint"
                  },
                  "cache_ttl": {
                    "type": "string",
                    "example": "uint"
                  },
                  "comment": {
                    "type": "string",
                    "example": "string"
                  },
                  "disable": {
                    "type": "string",
                    "example": "bool"
                  },
                  "enable_cache": {
                    "type": "string",
                    "example": "bool"
                  },
                  "mode": {
                    "type": "string",
                    "example": "['HUNT_GROUP', 'ROUND_ROBIN']"
                  },
                  "name": {
                    "type": "string",
                    "example": "string"
                  },
                  "recovery_interval": {
                    "type": "string",
                    "example": "uint"
                  },
                  "servers": {
                    "type": "string",
                    "example": "[{'acct_port': 'uint', 'auth_port': 'uint', 'auth_type': 'enum', 'comment': 'string', 'disable': 'bool', 'address': 'string', 'shared_secret': 'string', 'use_accounting': 'bool', 'use_mgmt_port': 'bool'}]"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/radius_authservice"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "description": "Delete the radius:authservice resource",
        "tags": [
          "radius:authservice"
        ],
        "parameters": [
          {
            "name": "radius:authservice_reference",
            "in": "path",
            "required": true,
            "description": "Enter the reference for radius:authservice",
            "schema": {
              "type": "string",
              "example": "resourceID:resourceName"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "$ref": {
                      "type": "string",
                      "description": "Reference of the deleted string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/wapi/v2.7/snmpuser": {
      "get": {
        "tags": [
          "snmpuser"
        ],
        "parameters": [
          {
            "name": "_return_fields",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_return_fields+",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_max_results",
            "in": "query",
            "required": false,
            "description": "Enter the number of results to be fetched",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "_return_as_object",
            "in": "query",
            "required": false,
            "description": "Select 1 if result is required as a object",
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1
              ],
              "default": 0
            }
          },
          {
            "name": "_paging",
            "in": "query",
            "required": false,
            "description": "Select 1 if paging is required. If SET, _max_results and _return_as_object must be entered.",
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1
              ],
              "default": 0
            }
          },
          {
            "name": " _page_id",
            "in": "query",
            "required": false,
            "description": "Enter the page ID for fetching next page",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "comment",
            "in": "query",
            "required": false,
            "description": "Enter the value of the field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "description": "Enter the value of the field",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/snmpuser"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "snmpuser"
        ],
        "parameters": [
          {
            "name": "_return_fields",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Enter the request body here",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "authentication_password": {
                    "type": "string",
                    "example": "string"
                  },
                  "authentication_protocol": {
                    "type": "string",
                    "example": "['NONE', 'MD5', 'SHA']"
                  },
                  "comment": {
                    "type": "string",
                    "example": "string"
                  },
                  "disable": {
                    "type": "string",
                    "example": "bool"
                  },
                  "extattrs": {
                    "type": "string",
                    "example": "extattr"
                  },
                  "name": {
                    "type": "string",
                    "example": "string"
                  },
                  "privacy_password": {
                    "type": "string",
                    "example": "string"
                  },
                  "privacy_protocol": {
                    "type": "string",
                    "example": "['NONE', 'DES', 'AES']"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/snmpuser"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/wapi/v2.7/snmpuser/{snmpuser_reference}": {
      "get": {
        "tags": [
          "snmpuser"
        ],
        "parameters": [
          {
            "name": "snmpuser_reference",
            "in": "path",
            "required": true,
            "description": "Enter the reference for snmpuser",
            "schema": {
              "type": "string",
              "example": "resourceID:resourceName"
            }
          },
          {
            "name": "_return_fields",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_return_fields+",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_return_as_object",
            "in": "query",
            "required": false,
            "description": "Select 1 if result is required as a object",
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1
              ],
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/snmpuser"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "put": {
        "description": "Update the snmpuser resource",
        "tags": [
          "snmpuser"
        ],
        "parameters": [
          {
            "name": "snmpuser_reference",
            "in": "path",
            "required": true,
            "description": "Enter the reference for snmpuser",
            "schema": {
              "type": "string",
              "example": "resourceID:resourceName"
            }
          },
          {
            "name": "_return_fields",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Enter the request body here",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "authentication_password": {
                    "type": "string",
                    "example": "string"
                  },
                  "authentication_protocol": {
                    "type": "string",
                    "example": "['NONE', 'MD5', 'SHA']"
                  },
                  "comment": {
                    "type": "string",
                    "example": "string"
                  },
                  "disable": {
                    "type": "string",
                    "example": "bool"
                  },
                  "extattrs": {
                    "type": "string",
                    "example": "extattr"
                  },
                  "name": {
                    "type": "string",
                    "example": "string"
                  },
                  "privacy_password": {
                    "type": "string",
                    "example": "string"
                  },
                  "privacy_protocol": {
                    "type": "string",
                    "example": "['NONE', 'DES', 'AES']"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/snmpuser"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "description": "Delete the snmpuser resource",
        "tags": [
          "snmpuser"
        ],
        "parameters": [
          {
            "name": "snmpuser_reference",
            "in": "path",
            "required": true,
            "description": "Enter the reference for snmpuser",
            "schema": {
              "type": "string",
              "example": "resourceID:resourceName"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "$ref": {
                      "type": "string",
                      "description": "Reference of the deleted string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/wapi/v2.7/tacacsplus:authservice": {
      "get": {
        "tags": [
          "tacacsplus:authservice"
        ],
        "parameters": [
          {
            "name": "_return_fields",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_return_fields+",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_max_results",
            "in": "query",
            "required": false,
            "description": "Enter the number of results to be fetched",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "_return_as_object",
            "in": "query",
            "required": false,
            "description": "Select 1 if result is required as a object",
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1
              ],
              "default": 0
            }
          },
          {
            "name": "_paging",
            "in": "query",
            "required": false,
            "description": "Select 1 if paging is required. If SET, _max_results and _return_as_object must be entered.",
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1
              ],
              "default": 0
            }
          },
          {
            "name": " _page_id",
            "in": "query",
            "required": false,
            "description": "Enter the page ID for fetching next page",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "comment",
            "in": "query",
            "required": false,
            "description": "Enter the value of the field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "description": "Enter the value of the field",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tacacsplus_authservice"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "tacacsplus:authservice"
        ],
        "parameters": [
          {
            "name": "_return_fields",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Enter the request body here",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "acct_retries": {
                    "type": "string",
                    "example": "uint"
                  },
                  "acct_timeout": {
                    "type": "string",
                    "example": "uint"
                  },
                  "auth_retries": {
                    "type": "string",
                    "example": "uint"
                  },
                  "auth_timeout": {
                    "type": "string",
                    "example": "uint"
                  },
                  "comment": {
                    "type": "string",
                    "example": "string"
                  },
                  "disable": {
                    "type": "string",
                    "example": "bool"
                  },
                  "name": {
                    "type": "string",
                    "example": "string"
                  },
                  "servers": {
                    "type": "string",
                    "example": "[{'address': 'string', 'port': 'uint', 'shared_secret': 'string', 'auth_type': 'enum', 'comment': 'string', 'disable': 'bool', 'use_mgmt_port': 'bool', 'use_accounting': 'bool'}]"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tacacsplus_authservice"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/wapi/v2.7/tacacsplus:authservice/{tacacsplus:authservice_reference}": {
      "get": {
        "tags": [
          "tacacsplus:authservice"
        ],
        "parameters": [
          {
            "name": "tacacsplus:authservice_reference",
            "in": "path",
            "required": true,
            "description": "Enter the reference for tacacsplus:authservice",
            "schema": {
              "type": "string",
              "example": "resourceID:resourceName"
            }
          },
          {
            "name": "_return_fields",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_return_fields+",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_return_as_object",
            "in": "query",
            "required": false,
            "description": "Select 1 if result is required as a object",
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1
              ],
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tacacsplus_authservice"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "description": "Function calls",
        "tags": [
          "tacacsplus:authservice"
        ],
        "parameters": [
          {
            "name": "tacacsplus:authservice_reference",
            "in": "path",
            "required": true,
            "description": "Enter the reference for tacacsplus:authservice",
            "schema": {
              "type": "string",
              "example": "resourceID:resourceName"
            }
          },
          {
            "name": "_function",
            "in": "query",
            "required": true,
            "description": "Select the function",
            "schema": {
              "type": "string",
              "enum": [
                "check_tacacsplus_server_settings"
              ]
            }
          }
        ],
        "requestBody": {
          "description": "Enter the request body here",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "check_tacacsplus_server_settings": {
                      "type": "string",
                      "example": {
                        "tacacsplus_server": "tacacsplus:server",
                        "auth_timeout": "uint",
                        "acct_timeout": "uint",
                        "tacacsplus_authservice": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "put": {
        "description": "Update the tacacsplus:authservice resource",
        "tags": [
          "tacacsplus:authservice"
        ],
        "parameters": [
          {
            "name": "tacacsplus:authservice_reference",
            "in": "path",
            "required": true,
            "description": "Enter the reference for tacacsplus:authservice",
            "schema": {
              "type": "string",
              "example": "resourceID:resourceName"
            }
          },
          {
            "name": "_return_fields",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Enter the request body here",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "acct_retries": {
                    "type": "string",
                    "example": "uint"
                  },
                  "acct_timeout": {
                    "type": "string",
                    "example": "uint"
                  },
                  "auth_retries": {
                    "type": "string",
                    "example": "uint"
                  },
                  "auth_timeout": {
                    "type": "string",
                    "example": "uint"
                  },
                  "comment": {
                    "type": "string",
                    "example": "string"
                  },
                  "disable": {
                    "type": "string",
                    "example": "bool"
                  },
                  "name": {
                    "type": "string",
                    "example": "string"
                  },
                  "servers": {
                    "type": "string",
                    "example": "[{'address': 'string', 'port': 'uint', 'shared_secret': 'string', 'auth_type': 'enum', 'comment': 'string', 'disable': 'bool', 'use_mgmt_port': 'bool', 'use_accounting': 'bool'}]"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tacacsplus_authservice"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "description": "Delete the tacacsplus:authservice resource",
        "tags": [
          "tacacsplus:authservice"
        ],
        "parameters": [
          {
            "name": "tacacsplus:authservice_reference",
            "in": "path",
            "required": true,
            "description": "Enter the reference for tacacsplus:authservice",
            "schema": {
              "type": "string",
              "example": "resourceID:resourceName"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "$ref": {
                      "type": "string",
                      "description": "Reference of the deleted string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/wapi/v2.7/userprofile": {
      "get": {
        "tags": [
          "userprofile"
        ],
        "parameters": [
          {
            "name": "_return_fields",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_return_fields+",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_max_results",
            "in": "query",
            "required": false,
            "description": "Enter the number of results to be fetched",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "_return_as_object",
            "in": "query",
            "required": false,
            "description": "Select 1 if result is required as a object",
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1
              ],
              "default": 0
            }
          },
          {
            "name": "_paging",
            "in": "query",
            "required": false,
            "description": "Select 1 if paging is required. If SET, _max_results and _return_as_object must be entered.",
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1
              ],
              "default": 0
            }
          },
          {
            "name": " _page_id",
            "in": "query",
            "required": false,
            "description": "Enter the page ID for fetching next page",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userprofile"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/wapi/v2.7/userprofile/{userprofile_reference}": {
      "get": {
        "tags": [
          "userprofile"
        ],
        "parameters": [
          {
            "name": "userprofile_reference",
            "in": "path",
            "required": true,
            "description": "Enter the reference for userprofile",
            "schema": {
              "type": "string",
              "example": "resourceID:resourceName"
            }
          },
          {
            "name": "_return_fields",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_return_fields+",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma, this returns the required fields along with the default fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_return_as_object",
            "in": "query",
            "required": false,
            "description": "Select 1 if result is required as a object",
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1
              ],
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userprofile"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "put": {
        "description": "Update the userprofile resource",
        "tags": [
          "userprofile"
        ],
        "parameters": [
          {
            "name": "userprofile_reference",
            "in": "path",
            "required": true,
            "description": "Enter the reference for userprofile",
            "schema": {
              "type": "string",
              "example": "resourceID:resourceName"
            }
          },
          {
            "name": "_return_fields",
            "in": "query",
            "required": false,
            "description": "Enter the field names followed by comma",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Enter the request body here",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "active_dashboard_type": {
                    "type": "string",
                    "example": "['INFO', 'TASK']"
                  },
                  "email": {
                    "type": "string",
                    "example": "string"
                  },
                  "global_search_on_ea": {
                    "type": "string",
                    "example": "bool"
                  },
                  "global_search_on_ni_data": {
                    "type": "string",
                    "example": "bool"
                  },
                  "lb_tree_nodes_at_gen_level": {
                    "type": "string",
                    "example": "uint"
                  },
                  "lb_tree_nodes_at_last_level": {
                    "type": "string",
                    "example": "uint"
                  },
                  "max_count_widgets": {
                    "type": "string",
                    "example": "uint"
                  },
                  "old_password": {
                    "type": "string",
                    "example": "string"
                  },
                  "password": {
                    "type": "string",
                    "example": "string"
                  },
                  "table_size": {
                    "type": "string",
                    "example": "uint"
                  },
                  "time_zone": {
                    "type": "string",
                    "example": "['(UTC - 12:00)', '(UTC - 11:00) Midway Island, Samoa', '(UTC - 10:00) Hawaii', '(UTC - 9:00) Alaska', '(UTC - 8:00) Pacific Time (US and Canada), Tijuana', '(UTC - 7:00) Arizona', '(UTC - 7:00) Mountain Time (US and Canada)', '(UTC - 6:00) Central Time (US and Canada)', '(UTC - 6:00) Mexico City, Tegucigalpa', '(UTC - 6:00) Saskatchewan', '(UTC - 5:00) Bogota, Lima, Quito', '(UTC - 5:00) Eastern Time (US and Canada)', '(UTC - 5:00) Indiana (East)', '(UTC - 4:00) Caracas', '(UTC - 4:00) Atlantic Time (Canada)', '(UTC - 4:00) Santiago', '(UTC - 3:30) Newfoundland', '(UTC - 3:00) Brasilia', '(UTC - 3:00) Buenos Aires', '(UTC - 2:00) Mid-Atlantic', '(UTC - 1:00) Azores', '(UTC) Coordinated Universal Time', '(UTC) Dublin', '(UTC) Lisbon', '(UTC) London', '(UTC + 1:00) Casablanca', '(UTC + 1:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna', '(UTC + 1:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague', '(UTC + 1:00) Brussels, Copenhagen, Madrid, Paris', '(UTC + 1:00) Sarajevo, Skopje, Sofija, Warsaw, Zagreb', '(UTC + 2:00) Athens, Vilnius', '(UTC + 2:00) Bucharest', '(UTC + 2:00) Cairo', '(UTC + 2:00) Harare', '(UTC + 2:00) Helsinki', '(UTC + 2:00) Jerusalem', '(UTC + 2:00) Kaliningrad', '(UTC + 3:00) Baghdad, Istanbul, Kuwait, Minsk, Riyadh', '(UTC + 3:00) Moscow, St. Petersburg, Volgograd', '(UTC + 3:00) Nairobi', '(UTC + 3:30) Tehran', '(UTC + 4:00) Dubai', '(UTC + 4:00) Baku', '(UTC + 4:00) Samara', '(UTC + 4:30) Kabul', '(UTC + 5:00) Ekaterinburg', '(UTC + 5:00) Islamabad, Karachi', '(UTC + 5:30) Bombay, Calcutta, Madras, New Delhi', '(UTC + 5:30) Colombo', '(UTC + 6:00) Dhaka', '(UTC + 6:00) Omsk', '(UTC + 6:30) Rangoon', '(UTC + 7:00) Bangkok, Hanoi', '(UTC + 7:00) Krasnoyarsk', '(UTC + 8:00) Beijing, Chongqing, Shanghai', '(UTC + 8:00) Hong Kong', '(UTC + 8:00) Irkutsk', '(UTC + 8:00) Perth', '(UTC + 8:00) Singapore', '(UTC + 8:00) Taipei', '(UTC + 9:00) Osaka, Sapporo, Tokyo', '(UTC + 9:00) Seoul', '(UTC + 9:00) Yakutsk', '(UTC + 9:30) Adelaide', '(UTC + 9:30) Darwin', '(UTC + 10:00) Brisbane', '(UTC + 10:00) Canberra, Sydney', '(UTC + 10:00) Melbourne, Victoria', '(UTC + 10:00) Guam', '(UTC + 10:00) Hobart', '(UTC + 10:00) Vladivostok', '(UTC + 11:00) Solomon Islands', '(UTC + 11:00) Magadan', '(UTC + 12:00) Anadyr', '(UTC + 12:00) Auckland', '(UTC + 12:00) Fiji', '(UTC + 12:00) Marshall Islands']"
                  },
                  "use_time_zone": {
                    "type": "string",
                    "example": "bool"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userprofile"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "basicAuth": {
        "type": "http",
        "scheme": "basic"
      }
    },
    "schemas": {
      "ad_auth_service": {
        "type": "object",
        "properties": {
          "ad_domain": {
            "type": "string",
            "description": "The Active Directory domain to which this server belongs."
          },
          "comment": {
            "type": "string",
            "description": "The descriptive comment for the AD authentication service."
          },
          "disabled": {
            "type": "boolean",
            "example": "boolean",
            "description": "Determines if Active Directory Authentication Service is disabled."
          },
          "domain_controllers": {
            "type": "string",
            "enum": [
              "ad_auth_server"
            ],
            "description": "The AD authentication server list."
          },
          "name": {
            "type": "string",
            "description": "The AD authentication service name."
          },
          "timeout": {
            "type": "integer",
            "example": "integer",
            "description": "The number of seconds that the appliance waits for a response from the AD server."
          }
        }
      },
      "admingroup": {
        "type": "object",
        "properties": {
          "access_method": {
            "type": "string",
            "enum": [
              "GUI",
              "API",
              "TAXII",
              "CLOUD_API"
            ],
            "description": "Access methods specify whether an admin group can use the GUI and the API to access the appliance or to send Taxii messages to the appliance. Note that API includes both the Perl API and RESTful API."
          },
          "comment": {
            "type": "string",
            "description": "Comment for the Admin Group; maximum 256 characters."
          },
          "disable": {
            "type": "boolean",
            "example": "boolean",
            "description": "Determines whether the Admin Group is disabled or not. When this is set to False, the Admin Group is enabled."
          },
          "email_addresses": {
            "type": "string",
            "description": "The e-mail addresses for the Admin Group."
          },
          "enable_restricted_user_access": {
            "type": "boolean",
            "example": "boolean",
            "description": "Determines whether the restrictions will be applied to the admin connector level for users of this Admin Group."
          },
          "extattrs": {
            "type": "string",
            "enum": [
              "extattr"
            ],
            "description": "Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}."
          },
          "name": {
            "type": "string",
            "description": "The name of the Admin Group."
          },
          "roles": {
            "type": "string",
            "description": "The names of roles this Admin Group applies to."
          },
          "superuser": {
            "type": "boolean",
            "example": "boolean",
            "description": "Determines whether this Admin Group is a superuser group. A superuser group can perform all operations on the appliance, and can view and configure all types of data."
          },
          "user_access": {
            "type": "string",
            "enum": [
              "addressac"
            ],
            "description": "The access control items for this Admin Group."
          }
        }
      },
      "adminrole": {
        "type": "object",
        "properties": {
          "comment": {
            "type": "string",
            "description": "The descriptive comment of the Admin Role object."
          },
          "disable": {
            "type": "boolean",
            "example": "boolean",
            "description": "The disable flag."
          },
          "extattrs": {
            "type": "string",
            "enum": [
              "extattr"
            ],
            "description": "Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}."
          },
          "name": {
            "type": "string",
            "description": "The name of an admin role."
          }
        }
      },
      "adminuser": {
        "type": "object",
        "properties": {
          "admin_groups": {
            "type": "string",
            "description": "The names of the Admin Groups to which this Admin User belongs. Currently, this is limited to only one Admin Group."
          },
          "auth_type": {
            "type": "string",
            "enum": [
              "LOCAL",
              "RADIUS",
              "REMOTE"
            ],
            "description": "The authentication type for the admin user."
          },
          "ca_certificate_issuer": {
            "type": "string",
            "description": "The CA certificate that is used for user lookup during authentication."
          },
          "client_certificate_serial_number": {
            "type": "string",
            "description": "The serial number of the client certificate."
          },
          "comment": {
            "type": "string",
            "description": "Comment for the admin user; maximum 256 characters."
          },
          "disable": {
            "type": "boolean",
            "example": "boolean",
            "description": "Determines whether the admin user is disabled or not. When this is set to False, the admin user is enabled."
          },
          "email": {
            "type": "string",
            "description": "The e-mail address for the admin user."
          },
          "enable_certificate_authentication": {
            "type": "boolean",
            "example": "boolean",
            "description": "Determines whether the user is allowed to log in only with the certificate. Regular username/password authentication will be disabled for this user."
          },
          "extattrs": {
            "type": "string",
            "enum": [
              "extattr"
            ],
            "description": "Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}."
          },
          "name": {
            "type": "string",
            "description": "The name of the admin user."
          },
          "password": {
            "type": "string",
            "description": "The password for the administrator to use when logging in."
          },
          "time_zone": {
            "type": "string",
            "enum": [
              "(UTC - 12:00)",
              "(UTC - 11:00) Midway Island, Samoa",
              "(UTC - 10:00) Hawaii",
              "(UTC - 9:00) Alaska",
              "(UTC - 8:00) Pacific Time (US and Canada), Tijuana",
              "(UTC - 7:00) Arizona",
              "(UTC - 7:00) Mountain Time (US and Canada)",
              "(UTC - 6:00) Central Time (US and Canada)",
              "(UTC - 6:00) Mexico City, Tegucigalpa",
              "(UTC - 6:00) Saskatchewan",
              "(UTC - 5:00) Bogota, Lima, Quito",
              "(UTC - 5:00) Eastern Time (US and Canada)",
              "(UTC - 5:00) Indiana (East)",
              "(UTC - 4:00) Caracas",
              "(UTC - 4:00) Atlantic Time (Canada)",
              "(UTC - 4:00) Santiago",
              "(UTC - 3:30) Newfoundland",
              "(UTC - 3:00) Brasilia",
              "(UTC - 3:00) Buenos Aires",
              "(UTC - 2:00) Mid-Atlantic",
              "(UTC - 1:00) Azores",
              "(UTC) Coordinated Universal Time",
              "(UTC) Dublin",
              "(UTC) Lisbon",
              "(UTC) London",
              "(UTC + 1:00) Casablanca",
              "(UTC + 1:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna",
              "(UTC + 1:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague",
              "(UTC + 1:00) Brussels, Copenhagen, Madrid, Paris",
              "(UTC + 1:00) Sarajevo, Skopje, Sofija, Warsaw, Zagreb",
              "(UTC + 2:00) Athens, Vilnius",
              "(UTC + 2:00) Bucharest",
              "(UTC + 2:00) Cairo",
              "(UTC + 2:00) Harare",
              "(UTC + 2:00) Helsinki",
              "(UTC + 2:00) Jerusalem",
              "(UTC + 2:00) Kaliningrad",
              "(UTC + 3:00) Baghdad, Istanbul, Kuwait, Minsk, Riyadh",
              "(UTC + 3:00) Moscow, St. Petersburg, Volgograd",
              "(UTC + 3:00) Nairobi",
              "(UTC + 3:30) Tehran",
              "(UTC + 4:00) Dubai",
              "(UTC + 4:00) Baku",
              "(UTC + 4:00) Samara",
              "(UTC + 4:30) Kabul",
              "(UTC + 5:00) Ekaterinburg",
              "(UTC + 5:00) Islamabad, Karachi",
              "(UTC + 5:30) Bombay, Calcutta, Madras, New Delhi",
              "(UTC + 5:30) Colombo",
              "(UTC + 6:00) Dhaka",
              "(UTC + 6:00) Omsk",
              "(UTC + 6:30) Rangoon",
              "(UTC + 7:00) Bangkok, Hanoi",
              "(UTC + 7:00) Krasnoyarsk",
              "(UTC + 8:00) Beijing, Chongqing, Shanghai",
              "(UTC + 8:00) Hong Kong",
              "(UTC + 8:00) Irkutsk",
              "(UTC + 8:00) Perth",
              "(UTC + 8:00) Singapore",
              "(UTC + 8:00) Taipei",
              "(UTC + 9:00) Osaka, Sapporo, Tokyo",
              "(UTC + 9:00) Seoul",
              "(UTC + 9:00) Yakutsk",
              "(UTC + 9:30) Adelaide",
              "(UTC + 9:30) Darwin",
              "(UTC + 10:00) Brisbane",
              "(UTC + 10:00) Canberra, Sydney",
              "(UTC + 10:00) Melbourne, Victoria",
              "(UTC + 10:00) Guam",
              "(UTC + 10:00) Hobart",
              "(UTC + 10:00) Vladivostok",
              "(UTC + 11:00) Solomon Islands",
              "(UTC + 11:00) Magadan",
              "(UTC + 12:00) Anadyr",
              "(UTC + 12:00) Auckland",
              "(UTC + 12:00) Fiji",
              "(UTC + 12:00) Marshall Islands"
            ],
            "description": "The time zone for this admin user."
          },
          "use_time_zone": {
            "type": "boolean",
            "example": "boolean",
            "description": "Use flag for: time_zone"
          }
        }
      },
      "approvalworkflow": {
        "type": "object",
        "properties": {
          "approval_group": {
            "type": "string",
            "description": "The approval administration group."
          },
          "approval_notify_to": {
            "type": "string",
            "enum": [
              "SUBMITTER",
              "APPROVER",
              "BOTH"
            ],
            "description": "The destination for approval task notifications."
          },
          "approved_notify_to": {
            "type": "string",
            "enum": [
              "SUBMITTER",
              "APPROVER",
              "BOTH"
            ],
            "description": "The destination for approved task notifications."
          },
          "approver_comment": {
            "type": "string",
            "enum": [
              "UNUSED",
              "OPTIONAL",
              "REQUIRED"
            ],
            "description": "The requirement for the comment when an approver approves a submitted task."
          },
          "enable_approval_notify": {
            "type": "boolean",
            "example": "boolean",
            "description": "Determines whether approval task notifications are enabled."
          },
          "enable_approved_notify": {
            "type": "boolean",
            "example": "boolean",
            "description": "Determines whether approved task notifications are enabled."
          },
          "enable_failed_notify": {
            "type": "boolean",
            "example": "boolean",
            "description": "Determines whether failed task notifications are enabled."
          },
          "enable_notify_group": {
            "type": "boolean",
            "example": "boolean",
            "description": "Determines whether e-mail notifications to admin group's e-mail address are enabled."
          },
          "enable_notify_user": {
            "type": "boolean",
            "example": "boolean",
            "description": "Determines whether e-mail notifications to an admin member's e-mail address are enabled."
          },
          "enable_rejected_notify": {
            "type": "boolean",
            "example": "boolean",
            "description": "Determines whether rejected task notifications are enabled."
          },
          "enable_rescheduled_notify": {
            "type": "boolean",
            "example": "boolean",
            "description": "Determines whether rescheduled task notifications are enabled."
          },
          "enable_succeeded_notify": {
            "type": "boolean",
            "example": "boolean",
            "description": "Determines whether succeeded task notifications are enabled."
          },
          "extattrs": {
            "type": "string",
            "enum": [
              "extattr"
            ],
            "description": "Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}."
          },
          "failed_notify_to": {
            "type": "string",
            "enum": [
              "SUBMITTER",
              "APPROVER",
              "BOTH"
            ],
            "description": "The destination for failed task notifications."
          },
          "rejected_notify_to": {
            "type": "string",
            "enum": [
              "SUBMITTER",
              "APPROVER",
              "BOTH"
            ],
            "description": "The destination for rejected task notifications."
          },
          "rescheduled_notify_to": {
            "type": "string",
            "enum": [
              "SUBMITTER",
              "APPROVER",
              "BOTH"
            ],
            "description": "The destination for rescheduled task notifications."
          },
          "submitter_comment": {
            "type": "string",
            "enum": [
              "UNUSED",
              "OPTIONAL",
              "REQUIRED"
            ],
            "description": "The requirement for the comment when a submitter submits a task for approval."
          },
          "submitter_group": {
            "type": "string",
            "description": "The submitter admininstration group."
          },
          "succeeded_notify_to": {
            "type": "string",
            "enum": [
              "SUBMITTER",
              "APPROVER",
              "BOTH"
            ],
            "description": "The destination for succeeded task notifications."
          },
          "ticket_number": {
            "type": "string",
            "enum": [
              "UNUSED",
              "OPTIONAL",
              "REQUIRED"
            ],
            "description": "The requirement for the ticket number when a submitter submits a task for approval."
          }
        }
      },
      "authpolicy": {
        "type": "object",
        "properties": {
          "admin_groups": {
            "type": "string",
            "description": "List of names of local administration groups that are mapped to remote administration groups."
          },
          "auth_services": {
            "type": "string",
            "enum": [
              "localuser:authservice"
            ],
            "description": "The array that contains an ordered list of refs to :doc:`localuser:authservice object </objects/localuser.authservice>`, ldap_auth_service object ldap_auth_service, :doc:`radius:authservice object </objects/radius.authservice>`, :doc:`tacacsplus:authservice object </objects/tacacsplus.authservice>`, ad_auth_service object ad_auth_service, :doc:`certificate:authservice object </objects/certificate.authservice>`."
          },
          "default_group": {
            "type": "string",
            "description": "The default admin group that provides authentication in case no valid group is found."
          },
          "usage_type": {
            "type": "string",
            "enum": [
              "FULL",
              "AUTH_ONLY"
            ],
            "description": "Remote policies usage."
          }
        }
      },
      "bfdtemplate": {
        "type": "object",
        "properties": {
          "authentication_key": {
            "type": "string",
            "description": "The authentication key for BFD protocol message-digest authentication."
          },
          "authentication_key_id": {
            "type": "integer",
            "example": "integer",
            "description": "The authentication key identifier for BFD protocol authentication. Valid values are between 1 and 255."
          },
          "authentication_type": {
            "type": "string",
            "enum": [
              "NONE",
              "MD5",
              "METICULOUS-MD5",
              "SHA1",
              "METICULOUS-SHA1"
            ],
            "description": "The authentication type for BFD protocol."
          },
          "detection_multiplier": {
            "type": "integer",
            "example": "integer",
            "description": "The detection time multiplier value for BFD protocol. The negotiated transmit interval, multiplied by this value, provides the detection time for the receiving system in asynchronous BFD mode. Valid values are between 3 and 50."
          },
          "min_rx_interval": {
            "type": "integer",
            "example": "integer",
            "description": "The minimum receive time (in seconds) for BFD protocol. Valid values are between 50 and 9999."
          },
          "min_tx_interval": {
            "type": "integer",
            "example": "integer",
            "description": "The minimum transmission time (in seconds) for BFD protocol. Valid values are between 50 and 9999."
          },
          "name": {
            "type": "string",
            "description": "The name of the BFD template object."
          }
        }
      },
      "certificate_authservice": {
        "type": "object",
        "properties": {
          "auto_populate_login": {
            "type": "string",
            "enum": [
              "SERIAL_NUMBER",
              "S_DN_CN",
              "S_DN_EMAIL",
              "SAN_UPN",
              "SAN_EMAIL",
              "AD_SUBJECT_ISSUER"
            ],
            "description": "Specifies the value of the client certificate for automatically populating the NIOS login name."
          },
          "ca_certificates": {
            "type": "string",
            "enum": [
              "cacertificate"
            ],
            "description": "The list of CA certificates."
          },
          "client_cert_subject": {
            "type": "string",
            "description": "The client certificate subject name should begin with the value of this field so it can be associated with the certificate group during authentication."
          },
          "comment": {
            "type": "string",
            "description": "The descriptive comment for the certificate authentication service."
          },
          "disabled": {
            "type": "boolean",
            "example": "boolean",
            "description": "Determines if this certificate authentication service is enabled or disabled."
          },
          "enable_password_request": {
            "type": "boolean",
            "example": "boolean",
            "description": "Determines if username/password authentication together with client certificate authentication is enabled or disabled."
          },
          "enable_remote_lookup": {
            "type": "boolean",
            "example": "boolean",
            "description": "Determines if the lookup for user group membership information on remote services is enabled or disabled."
          },
          "max_retries": {
            "type": "integer",
            "example": "integer",
            "description": "The number of validation attempts before the appliance contacts the next responder."
          },
          "name": {
            "type": "string",
            "description": "The name of the certificate authentication service."
          },
          "ocsp_check": {
            "type": "string",
            "enum": [
              "MANUAL",
              "AIA_ONLY",
              "AIA_AND_MANUAL",
              "DISABLED"
            ],
            "description": "Specifies the source of OCSP settings."
          },
          "ocsp_responders": {
            "type": "string",
            "enum": [
              "ocsp_responder"
            ],
            "description": "An ordered list of OCSP responders that are part of the certificate authentication service."
          },
          "recovery_interval": {
            "type": "integer",
            "example": "integer",
            "description": "The period of time the appliance waits before it attempts to contact a responder that is out of service again. The value must be between 1 and 600 seconds."
          },
          "remote_lookup_password": {
            "type": "string",
            "description": "The password for the service account."
          },
          "remote_lookup_service": {
            "type": "string",
            "description": "The service that will be used for remote lookup."
          },
          "remote_lookup_username": {
            "type": "string",
            "description": "The username for the service account."
          },
          "response_timeout": {
            "type": "integer",
            "example": "integer",
            "description": "The validation timeout period in milliseconds."
          },
          "trust_model": {
            "type": "string",
            "enum": [
              "DIRECT",
              "DELEGATED"
            ],
            "description": "The OCSP trust model."
          },
          "user_match_type": {
            "type": "string",
            "enum": [
              "DIRECT_MATCH",
              "AUTO_MATCH"
            ],
            "description": "Specifies how to search for a user."
          }
        }
      },
      "ftpuser": {
        "type": "object",
        "properties": {
          "create_home_dir": {
            "type": "boolean",
            "example": "boolean",
            "description": "Determines whether to create the home directory with the user name or to use the existing directory as the home directory."
          },
          "extattrs": {
            "type": "string",
            "enum": [
              "extattr"
            ],
            "description": "Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}."
          },
          "home_dir": {
            "type": "string",
            "description": "The absolute path of the FTP user's home directory."
          },
          "password": {
            "type": "string",
            "description": "The FTP user password."
          },
          "permission": {
            "type": "string",
            "enum": [
              "RO",
              "RW"
            ],
            "description": "The FTP user permission."
          },
          "username": {
            "type": "string",
            "description": "The FTP user name."
          }
        }
      },
      "ldap_auth_service": {
        "type": "object",
        "properties": {
          "comment": {
            "type": "string",
            "description": "The LDAP descriptive comment."
          },
          "disable": {
            "type": "boolean",
            "example": "boolean",
            "description": "Determines if the LDAP authentication service is disabled."
          },
          "ea_mapping": {
            "type": "string",
            "enum": [
              "ldap_eamapping"
            ],
            "description": "The mapping LDAP fields to extensible attributes."
          },
          "ldap_group_attribute": {
            "type": "string",
            "description": "The name of the LDAP attribute that defines group membership."
          },
          "ldap_group_authentication_type": {
            "type": "string",
            "enum": [
              "GROUP_ATTRIBUTE",
              "POSIX_GROUP"
            ],
            "description": "The LDAP group authentication type."
          },
          "ldap_user_attribute": {
            "type": "string",
            "description": "The LDAP userid attribute that is used for search."
          },
          "mode": {
            "type": "string",
            "enum": [
              "ORDERED_LIST",
              "ROUND_ROBIN"
            ],
            "description": "The LDAP authentication mode."
          },
          "name": {
            "type": "string",
            "description": "The LDAP authentication service name."
          },
          "recovery_interval": {
            "type": "integer",
            "example": "integer",
            "description": "The period of time in seconds to wait before trying to contact a LDAP server that has been marked as 'DOWN'."
          },
          "retries": {
            "type": "integer",
            "example": "integer",
            "description": "The maximum number of LDAP authentication attempts."
          },
          "search_scope": {
            "type": "string",
            "enum": [
              "BASE",
              "ONELEVEL",
              "SUBTREE"
            ],
            "description": "The starting point of the LDAP search."
          },
          "servers": {
            "type": "string",
            "enum": [
              "ldap_server"
            ],
            "description": "The list of LDAP servers used for authentication."
          },
          "timeout": {
            "type": "integer",
            "example": "integer",
            "description": "The LDAP authentication timeout in seconds."
          }
        }
      },
      "localuser_authservice": {
        "type": "object",
        "properties": {
          "comment": {
            "type": "string",
            "description": "The local user authentication service comment."
          },
          "disabled": {
            "type": "boolean",
            "example": "boolean",
            "description": "Flag that indicates whether the local user authentication service is enabled or not."
          },
          "name": {
            "type": "string",
            "description": "The name of the local user authentication service."
          }
        }
      },
      "networkuser": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "The IPv4 Address or IPv6 Address of the Network User."
          },
          "address_object": {
            "type": "string",
            "description": "The reference of the IPAM IPv4Address or IPv6Address object describing the address of the Network User."
          },
          "data_source": {
            "type": "string",
            "description": "The Network User data source."
          },
          "data_source_ip": {
            "type": "string",
            "description": "The Network User data source IPv4 Address or IPv6 Address or FQDN address."
          },
          "domainname": {
            "type": "string",
            "description": "The domain name of the Network User."
          },
          "first_seen_time": {
            "type": "string",
            "enum": [
              "timestamp"
            ],
            "description": "The first seen timestamp of the Network User."
          },
          "guid": {
            "type": "string",
            "description": "The group identifier of the Network User."
          },
          "last_seen_time": {
            "type": "string",
            "enum": [
              "timestamp"
            ],
            "description": "The last seen timestamp of the Network User."
          },
          "last_updated_time": {
            "type": "string",
            "enum": [
              "timestamp"
            ],
            "description": "The last updated timestamp of the Network User."
          },
          "logon_id": {
            "type": "string",
            "description": "The logon identifier of the Network User."
          },
          "logout_time": {
            "type": "string",
            "enum": [
              "timestamp"
            ],
            "description": "The logout timestamp of the Network User."
          },
          "name": {
            "type": "string",
            "description": "The name of the Network User."
          },
          "network": {
            "type": "string",
            "description": "The reference to the network to which the Network User belongs."
          },
          "network_view": {
            "type": "string",
            "description": "The name of the network view in which this Network User resides."
          },
          "user_status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "LOGOUT",
              "TIMEOUT"
            ],
            "description": "The status of the Network User."
          }
        }
      },
      "permission": {
        "type": "object",
        "properties": {
          "group": {
            "type": "string",
            "description": "The name of the admin group this permission applies to."
          },
          "object": {
            "type": "string",
            "description": "A reference to a WAPI object, which will be the object this permission applies to."
          },
          "permission": {
            "type": "string",
            "enum": [
              "DENY",
              "READ",
              "WRITE"
            ],
            "description": "The type of permission."
          },
          "resource_type": {
            "type": "string",
            "enum": [
              "SUPER_HOST",
              "VLAN_VIEW",
              "Unknown",
              "IDNS_MONITOR",
              "AAAA",
              "SCHEDULE_TASK",
              "GRID_DHCP_PROPERTIES",
              "IDNS_GEO_IP",
              "BULKHOST",
              "DHCP_FINGERPRINT",
              "IDNS_LBDN_RECORD",
              "SG_IPV6_NETWORK",
              "MSSERVER",
              "VLAN_OBJECTS",
              "IDNS_LBDN",
              "GRID_AAA_PROPERTIES",
              "NAPTR",
              "SUB_GRID",
              "IPV6_NETWORK_TEMPLATE",
              "IMC_PROPERTIES",
              "FIXED_ADDRESS_TEMPLATE",
              "NETWORK_DISCOVERY",
              "SHARED_NETWORK",
              "IDNS_CERTIFICATE",
              "DATACOLLECTOR_CLUSTER",
              "FIREEYE_PUBLISH_ALERT",
              "CLUSTER",
              "OPTION_SPACE",
              "RESTART_SERVICE",
              "SHARED_SRV",
              "IPV6_DHCP_LEASE_HISTORY",
              "VIEW",
              "IPV6_RANGE",
              "CNAME",
              "IPV6_NETWORK",
              "SHARED_AAAA",
              "DASHBOARD_TASK",
              "FIXED_ADDRESS",
              "NETWORK_CONTAINER",
              "SG_IPV4_NETWORK",
              "DNAME",
              "IPV6_SHARED_NETWORK",
              "PTR",
              "GRID_ANALYTICS_PROPERTIES",
              "TLSA",
              "CA_CERTIFICATE",
              "RANGE",
              "RULESET",
              "AAA_EXTERNAL_SERVICE",
              "HSM_GROUP",
              "HOST_ADDRESS",
              "IDNS_TOPOLOGY",
              "SHARED_A",
              "DELETED_OBJS_INFO_TRACKING",
              "SHARED_TXT",
              "DHCP_LEASE_HISTORY",
              "MEMBER_DHCP_PROPERTIES",
              "SUB_GRID_NETWORK_VIEW_PARENT",
              "IMC_SITE",
              "KERBEROS_KEY",
              "MEMBER_SECURITY_PROPERTIES",
              "IPV6_HOST_ADDRESS",
              "IMC_AVP",
              "MEMBER",
              "IPV6_NETWORK_CONTAINER",
              "VLAN_RANGE",
              "RESPONSE_POLICY_ZONE",
              "FILE_DIST_DIRECTORY",
              "RESPONSE_POLICY_RULE",
              "MS_SUPERSCOPE",
              "HOST",
              "SRV",
              "IDNS_POOL",
              "PORT_CONTROL",
              "TENANT",
              "IDNS_SERVER",
              "OCSP_SERVICE",
              "MEMBER_DNS_PROPERTIES",
              "NETWORK_TEMPLATE",
              "TEMPLATE",
              "SHARED_RECORD_GROUP",
              "CSV_IMPORT_TASK",
              "IPV6_TEMPLATE",
              "NETWORK",
              "NETWORK_VIEW",
              "IPV6_FIXED_ADDRESS",
              "GRID_REPORTING_PROPERTIES",
              "CAA",
              "GRID_DNS_PROPERTIES",
              "IPV6_FIXED_ADDRESS_TEMPLATE",
              "REPORTING_DASHBOARD",
              "ROAMING_HOST",
              "ADD_A_RR_WITH_EMPTY_HOSTNAME",
              "DHCP_MAC_FILTER",
              "GRID_FILE_DIST_PROPERTIES",
              "TXT",
              "IPV6_RANGE_TEMPLATE",
              "RANGE_TEMPLATE",
              "DEFINED_ACL",
              "A",
              "SHARED_CNAME",
              "BFD_TEMPLATE",
              "GRID_SECURITY_PROPERTIES",
              "MS_ADSITES_DOMAIN",
              "SAML_AUTH_SERVICE",
              "SHARED_MX",
              "ALIAS",
              "DEVICE",
              "SG_NETWORK_VIEW",
              "DNS64_SYNTHESIS_GROUP",
              "ZONE",
              "REPORTING_SEARCH",
              "RECLAMATION",
              "MX",
              "MEMBER_CLOUD",
              "MEMBER_ANALYTICS_PROPERTIES",
              "RESTORABLE_OPERATION",
              "MEMBER_FILE_DIST_PROPERTIES"
            ],
            "description": "The type of resource this permission applies to. If 'object' is set, the permission is going to apply to child objects of the specified type, for example if 'object' was set to an authoritative zone reference and 'resource_type' was set to 'A', the permission would apply to A Resource Records within the specified zone."
          },
          "role": {
            "type": "string",
            "description": "The name of the role this permission applies to."
          }
        }
      },
      "radius_authservice": {
        "type": "object",
        "properties": {
          "acct_retries": {
            "type": "integer",
            "example": "integer",
            "description": "The number of times to attempt to contact an accounting RADIUS server."
          },
          "acct_timeout": {
            "type": "integer",
            "example": "integer",
            "description": "The number of seconds to wait for a response from the RADIUS server."
          },
          "auth_retries": {
            "type": "integer",
            "example": "integer",
            "description": "The number of times to attempt to contact an authentication RADIUS server."
          },
          "auth_timeout": {
            "type": "integer",
            "example": "integer",
            "description": "The number of seconds to wait for a response from the RADIUS server."
          },
          "cache_ttl": {
            "type": "integer",
            "example": "integer",
            "description": "The TTL of cached authentication data in seconds."
          },
          "comment": {
            "type": "string",
            "description": "The RADIUS descriptive comment."
          },
          "disable": {
            "type": "boolean",
            "example": "boolean",
            "description": "Determines whether the RADIUS authentication service is disabled."
          },
          "enable_cache": {
            "type": "boolean",
            "example": "boolean",
            "description": "Determines whether the authentication cache is enabled."
          },
          "mode": {
            "type": "string",
            "enum": [
              "HUNT_GROUP",
              "ROUND_ROBIN"
            ],
            "description": "The way to contact the RADIUS server."
          },
          "name": {
            "type": "string",
            "description": "The RADIUS authentication service name."
          },
          "recovery_interval": {
            "type": "integer",
            "example": "integer",
            "description": "The time period to wait before retrying a server that has been marked as down."
          },
          "servers": {
            "type": "string",
            "enum": [
              "radius:server"
            ],
            "description": "The ordered list of RADIUS authentication servers."
          }
        }
      },
      "snmpuser": {
        "type": "object",
        "properties": {
          "authentication_password": {
            "type": "string",
            "description": "Determines an authentication password for the user. This is a write-only attribute."
          },
          "authentication_protocol": {
            "type": "string",
            "enum": [
              "NONE",
              "MD5",
              "SHA"
            ],
            "description": "The authentication protocol to be used for this user."
          },
          "comment": {
            "type": "string",
            "description": "A descriptive comment for the SNMPv3 User."
          },
          "disable": {
            "type": "boolean",
            "example": "boolean",
            "description": "Determines if SNMPv3 user is disabled or not."
          },
          "extattrs": {
            "type": "string",
            "enum": [
              "extattr"
            ],
            "description": "Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}."
          },
          "name": {
            "type": "string",
            "description": "The name of the user."
          },
          "privacy_password": {
            "type": "string",
            "description": "Determines a password for the privacy protocol."
          },
          "privacy_protocol": {
            "type": "string",
            "enum": [
              "NONE",
              "DES",
              "AES"
            ],
            "description": "The privacy protocol to be used for this user."
          }
        }
      },
      "tacacsplus_authservice": {
        "type": "object",
        "properties": {
          "acct_retries": {
            "type": "integer",
            "example": "integer",
            "description": "The number of the accounting retries before giving up and moving on to the next server."
          },
          "acct_timeout": {
            "type": "integer",
            "example": "integer",
            "description": "The accounting retry period in milliseconds."
          },
          "auth_retries": {
            "type": "integer",
            "example": "integer",
            "description": "The number of the authentication/authorization retries before giving up and moving on to the next server."
          },
          "auth_timeout": {
            "type": "integer",
            "example": "integer",
            "description": "The authentication/authorization timeout period in milliseconds."
          },
          "comment": {
            "type": "string",
            "description": "The TACACS+ authentication service descriptive comment."
          },
          "disable": {
            "type": "boolean",
            "example": "boolean",
            "description": "Determines whether the TACACS+ authentication service object is disabled."
          },
          "name": {
            "type": "string",
            "description": "The TACACS+ authentication service name."
          },
          "servers": {
            "type": "string",
            "enum": [
              "tacacsplus:server"
            ],
            "description": "The list of the TACACS+ servers used for authentication."
          }
        }
      },
      "userprofile": {
        "type": "object",
        "properties": {
          "active_dashboard_type": {
            "type": "string",
            "enum": [
              "INFO",
              "TASK"
            ],
            "description": "Determines the active dashboard type."
          },
          "admin_group": {
            "type": "string",
            "description": "The Admin Group object to which the admin belongs. An admin user can belong to only one admin group at a time."
          },
          "days_to_expire": {
            "type": "string",
            "enum": [
              "int"
            ],
            "description": "The number of days left before the admin's password expires."
          },
          "email": {
            "type": "string",
            "description": "The email address of the admin."
          },
          "global_search_on_ea": {
            "type": "boolean",
            "example": "boolean",
            "description": "Determines if extensible attribute values will be returned by global search or not."
          },
          "global_search_on_ni_data": {
            "type": "boolean",
            "example": "boolean",
            "description": "Determines if global search will search for network insight devices and interfaces or not."
          },
          "grid_admin_groups": {
            "type": "string",
            "description": "List of Admin Group objects that the current user is mapped to."
          },
          "last_login": {
            "type": "string",
            "enum": [
              "timestamp"
            ],
            "description": "The timestamp when the admin last logged in."
          },
          "lb_tree_nodes_at_gen_level": {
            "type": "integer",
            "example": "integer",
            "description": "Determines how many nodes are displayed at generation levels."
          },
          "lb_tree_nodes_at_last_level": {
            "type": "integer",
            "example": "integer",
            "description": "Determines how many nodes are displayed at the last level."
          },
          "max_count_widgets": {
            "type": "integer",
            "example": "integer",
            "description": "The maximum count of widgets that can be added to one dashboard."
          },
          "name": {
            "type": "string",
            "description": "The admin name."
          },
          "old_password": {
            "type": "string",
            "description": "The current password that will be replaced by a new password. To change a password in the database, you must provide both the current and new password values. This is a write-only attribute."
          },
          "password": {
            "type": "string",
            "description": "The new password of the admin. To change a password in the database, you must provide both the current and new password values. This is a write-only attribute."
          },
          "table_size": {
            "type": "integer",
            "example": "integer",
            "description": "The number of lines of data a table or a single list view can contain."
          },
          "time_zone": {
            "type": "string",
            "enum": [
              "(UTC - 12:00)",
              "(UTC - 11:00) Midway Island, Samoa",
              "(UTC - 10:00) Hawaii",
              "(UTC - 9:00) Alaska",
              "(UTC - 8:00) Pacific Time (US and Canada), Tijuana",
              "(UTC - 7:00) Arizona",
              "(UTC - 7:00) Mountain Time (US and Canada)",
              "(UTC - 6:00) Central Time (US and Canada)",
              "(UTC - 6:00) Mexico City, Tegucigalpa",
              "(UTC - 6:00) Saskatchewan",
              "(UTC - 5:00) Bogota, Lima, Quito",
              "(UTC - 5:00) Eastern Time (US and Canada)",
              "(UTC - 5:00) Indiana (East)",
              "(UTC - 4:00) Caracas",
              "(UTC - 4:00) Atlantic Time (Canada)",
              "(UTC - 4:00) Santiago",
              "(UTC - 3:30) Newfoundland",
              "(UTC - 3:00) Brasilia",
              "(UTC - 3:00) Buenos Aires",
              "(UTC - 2:00) Mid-Atlantic",
              "(UTC - 1:00) Azores",
              "(UTC) Coordinated Universal Time",
              "(UTC) Dublin",
              "(UTC) Lisbon",
              "(UTC) London",
              "(UTC + 1:00) Casablanca",
              "(UTC + 1:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna",
              "(UTC + 1:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague",
              "(UTC + 1:00) Brussels, Copenhagen, Madrid, Paris",
              "(UTC + 1:00) Sarajevo, Skopje, Sofija, Warsaw, Zagreb",
              "(UTC + 2:00) Athens, Vilnius",
              "(UTC + 2:00) Bucharest",
              "(UTC + 2:00) Cairo",
              "(UTC + 2:00) Harare",
              "(UTC + 2:00) Helsinki",
              "(UTC + 2:00) Jerusalem",
              "(UTC + 2:00) Kaliningrad",
              "(UTC + 3:00) Baghdad, Istanbul, Kuwait, Minsk, Riyadh",
              "(UTC + 3:00) Moscow, St. Petersburg, Volgograd",
              "(UTC + 3:00) Nairobi",
              "(UTC + 3:30) Tehran",
              "(UTC + 4:00) Dubai",
              "(UTC + 4:00) Baku",
              "(UTC + 4:00) Samara",
              "(UTC + 4:30) Kabul",
              "(UTC + 5:00) Ekaterinburg",
              "(UTC + 5:00) Islamabad, Karachi",
              "(UTC + 5:30) Bombay, Calcutta, Madras, New Delhi",
              "(UTC + 5:30) Colombo",
              "(UTC + 6:00) Dhaka",
              "(UTC + 6:00) Omsk",
              "(UTC + 6:30) Rangoon",
              "(UTC + 7:00) Bangkok, Hanoi",
              "(UTC + 7:00) Krasnoyarsk",
              "(UTC + 8:00) Beijing, Chongqing, Shanghai",
              "(UTC + 8:00) Hong Kong",
              "(UTC + 8:00) Irkutsk",
              "(UTC + 8:00) Perth",
              "(UTC + 8:00) Singapore",
              "(UTC + 8:00) Taipei",
              "(UTC + 9:00) Osaka, Sapporo, Tokyo",
              "(UTC + 9:00) Seoul",
              "(UTC + 9:00) Yakutsk",
              "(UTC + 9:30) Adelaide",
              "(UTC + 9:30) Darwin",
              "(UTC + 10:00) Brisbane",
              "(UTC + 10:00) Canberra, Sydney",
              "(UTC + 10:00) Melbourne, Victoria",
              "(UTC + 10:00) Guam",
              "(UTC + 10:00) Hobart",
              "(UTC + 10:00) Vladivostok",
              "(UTC + 11:00) Solomon Islands",
              "(UTC + 11:00) Magadan",
              "(UTC + 12:00) Anadyr",
              "(UTC + 12:00) Auckland",
              "(UTC + 12:00) Fiji",
              "(UTC + 12:00) Marshall Islands"
            ],
            "description": "The time zone of the admin user."
          },
          "use_time_zone": {
            "type": "boolean",
            "example": "boolean",
            "description": "Use flag for: time_zone"
          },
          "user_type": {
            "type": "string",
            "enum": [
              "LOCAL",
              "REMOTE"
            ],
            "description": "The admin type."
          }
        }
      }
    }
  }
}